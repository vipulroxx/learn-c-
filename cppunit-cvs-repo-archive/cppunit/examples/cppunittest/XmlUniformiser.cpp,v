head	1.8;
access;
symbols
	REL_1_12_1:1.8
	REL_1_11_6:1.7
	REL_1_11_4:1.7
	REL_1_11_0:1.7
	TG_CPPUNIT_NO_STREAM_AFTER:1.7
	TG_CPPUNIT_NO_STREAM_BEFORE:1.7
	REL_1_10_2:1.7
	REL_1_10_0:1.7
	REL_1_9_14:1.7
	REL_1_9_12:1.7
	BRANCH_1_9_12:1.7.0.2
	TG_BRANCH_1_9_12:1.7
	TG_BEFORE_HPUX_PLUGIN:1.7
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.3
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.3
	REL_1_9_6:1.3
	REL_1_9_4:1.3
	REL_1_9_0:1.2
	REL_1_8_0:1.2
	REL_1_7_8:1.2
	REL_1_7_3:1.2
	REL_1_7_1:1.2;
locks; strict;
comment	@// @;


1.8
date	2007.01.12.05.56.34;	author smr99;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.15.10.21.44;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2003.03.11.21.13.57;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.14.19.48.31;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.13.10.33.49;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.13.18.51.20;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.05.22.27.14;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.10.05.08.06.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Arrange class initializers in correct order.
@
text
@#include "XmlUniformiser.h"


int 
notEqualIndex( std::string expectedXml,
               std::string actualXml )
{
  unsigned int index = 0;
  while ( index < actualXml.length()  &&  
          index < expectedXml.length()  &&
          actualXml[index] == expectedXml[index] )
    ++index;

  return index;
}


/// Asserts that two XML string are equivalent.
void 
checkXmlEqual( std::string expectedXml,
               std::string actualXml,
               CPPUNIT_NS::SourceLine sourceLine )
{
  std::string expected = XmlUniformiser( expectedXml ).stripped();
  std::string actual = XmlUniformiser( actualXml ).stripped();

  if ( expected == actual )
    return;

  int index = notEqualIndex( expected, actual );
  CPPUNIT_NS::OStringStream message;
  message  <<  "differ at index: "  <<  index  << "\n"
           <<  "expected: "  <<  expected.substr(index) << "\n"
           <<  "but was : "  <<  actual.substr( index );
  CPPUNIT_NS::Asserter::failNotEqual( expected,
                                      actual,
                                      sourceLine,
                                      message.str() );
}



XmlUniformiser::XmlUniformiser( const std::string &xml ) :
    m_index( 0 ),
    m_xml( xml )
{
}


std::string 
XmlUniformiser::stripped()
{
  while ( isValidIndex() )
  {
    skipSpaces();
    if ( startsWith( "<?" ) )
      skipProcessed();
    else if ( startsWith( "<!--" ) )
      skipComment();
    else if ( startsWith( "<" ) )
      copyElement();
    else
      copyElementContent();
  }
  return m_stripped;
}


void 
XmlUniformiser::skipSpaces()
{
  while ( isSpace() )
    skipNext();
}


bool 
XmlUniformiser::isSpace( char c )
{
  return c < 33;
}


bool 
XmlUniformiser::isSpace()
{
  return isValidIndex()  &&  isSpace( m_xml[m_index] );
}


bool 
XmlUniformiser::isValidIndex()
{
  return m_index < m_xml.length();
}


void 
XmlUniformiser::skipNext( int count )
{
  while ( count-- > 0 )
    ++m_index;
}


void 
XmlUniformiser::copyNext( int count )
{
  while ( count-- > 0  &&  isValidIndex() )
    m_stripped += m_xml[ m_index++ ];
}


bool 
XmlUniformiser::startsWith( std::string expected )
{
  std::string actual = m_xml.substr( m_index, expected.length() );
  return actual == expected;
}


void 
XmlUniformiser::skipProcessed()
{
  while ( isValidIndex()  &&  !startsWith( "?>" ) )
    skipNext();
  if ( isValidIndex() )
    skipNext( 2 );
}


void 
XmlUniformiser::skipComment()
{
  while ( isValidIndex()  &&  !startsWith( "-->" ) )
    skipNext();
  if ( isValidIndex() )
    skipNext( 3 );
}


void 
XmlUniformiser::copyElement()
{
  copyElementName();
  copyElementAttributes();
}


void 
XmlUniformiser::copyElementName()
{
  while ( isValidIndex()  &&
          !( isSpace()  ||  startsWith( ">" ) ) )
    copyNext();
}


void 
XmlUniformiser::copyElementAttributes()
{
  do
  {
    bool hadSpace = isSpace();
    skipSpaces();
    if ( startsWith( ">" ) )
      break;

    if ( hadSpace )
      m_stripped += ' ';

    copyAttributeName();
    skipSpaces();
    if ( startsWith( "=" ) )
    {
      copyNext();
      copyAttributeValue();
    }
    else    // attribute should always be valued, ne ?
      m_stripped += ' ';
  }
  while ( isValidIndex() );
  copyNext();
}


void 
XmlUniformiser::copyAttributeName()
{
  while ( isValidIndex()  &&  !isEndOfAttributeName() )
    copyNext();
}


bool 
XmlUniformiser::isEndOfAttributeName()
{
  return isSpace()  ||  startsWith( ">" )  ||  startsWith( "=" );
}


void 
XmlUniformiser::copyAttributeValue()
{
  skipSpaces();
  copyUntilDoubleQuote();
  copyUntilDoubleQuote();
}


void 
XmlUniformiser::copyUntilDoubleQuote()
{
  while ( isValidIndex()  &&  !startsWith("\"") )
    copyNext();
  copyNext();   // '"'
}


void 
XmlUniformiser::copyElementContent()
{
  while ( isValidIndex()  &&  !startsWith( "<" ) )
    copyNext();
  removeTrailingSpaces();
}


void 
XmlUniformiser::removeTrailingSpaces()
{
  int index = m_stripped.length();
  while ( index-1 > 0  &&  isSpace( m_stripped[index-1] ) )
    --index;
  m_stripped.resize( index );
}
@


1.7
log
@* include/cppunit/tools/Algorithm.h:
* examples/cppunittest/XmlOutputterTest.cpp:
* examples/cppunittest/XmlUniformiser.*:
* src/cppunit/CompilerOutputter.cpp:
* src/cppunit/ProtectorChain.cpp:
* src/cppunit/StringTools.cpp:
* src/cppunit/TestPath.cpp:
* src/cppunit/TypeInfoHelper.cpp:
* src/cppunit/XmlElement.cpp:
* src/cppunit/XmlOutputter.cpp:
* src/DllPlugInTester/CommandLineParser.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp: switched to using unsigned index in loop to
  avoid signed/unsigned warning in vc7.
@
text
@d44 2
a45 2
    m_xml( xml ),
    m_index( 0 )
@


1.6
log
@* src/cppunit/XmlElement.cpp:
* src/examples/CppUnitTest/XmlUniformser.cpp: fixed bug #676505 (no space
between attributes of XmlElement).
@
text
@d8 1
a8 1
  int index = 0;
@


1.5
log
@* CodingGuideLines.txt: added. CppUnit's coding guidelines for portability.

* include/cppunit/portability/CppUnitStack.h: added. wrapper for std::stack.

* include/cppunit/portability/CppUnitSet.h: added. wrapper for std::set.

* include/cppunit/ui/text/TestRunner.h: fixed namespace definition for
  deprecated TestRunner.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: removed old deprecated functions that did
  not use SourceLine. Moved assertEquals() and assertDoubleEquals() into
  CppUnit namespace.

* src/cppunit/TestFactoryRegistry.cpp: use CppUnitMap instead of std::map.

* src/DllPlugInTester/CommandLineParser.h: use CppUnitDeque instead
  std::deque.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp: removed all usage of CppUnitTest namespace.
  Everything is now in global space.

* examples/*/*.h:
* examples/*/*.cpp: replaced usage of CppUnit:: with CPPUNIT_NS::.

* examples/ClockerPlugIn/ClockerModel.h: use CppUnit STL wrapper instead
  of STL container.
@
text
@d164 1
d168 3
a170 1
    m_stripped += ' ';
@


1.4
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@a2 4
namespace CppUnitTest
{


d35 4
a38 4
  ::CPPUNIT_NS::Asserter::failNotEqual( expected,
                                     actual,
                                     sourceLine,
                                     message.str() );
a233 3


}  // namespace CppUnitTest
@


1.3
log
@* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: Made XML output more human readable. Idented element.

* examples/cppunittest/XmlUniformiser.h:
* examples/cppunittest/XmlUniformiser.cpp:
* examples/cppunittest/XmlUniformiserTest.cpp: modified to ignore trailing space
  at the end of element content.
@
text
@d26 1
a26 1
               CppUnit::SourceLine sourceLine )
d35 1
a35 1
  CppUnit::OStringStream message;
d39 1
a39 1
  ::CppUnit::Asserter::failNotEqual( expected,
@


1.2
log
@* include/cppunit/Asserter.h :
* src/cppunit/Asserter.cpp : added. Helper to create assertion macros.

* src/cppunit/cppunit.dsp :
* src/cppunit/Makefile.am :
* include/cppunit/Makefile.am : added Asserter.h and Asserter.cpp.

* include/cppunit/Exception.h :
* src/cppunit/Exception.cpp : added constructor that take a
SourceLine argument. Deprecated static constant and old constructor.
Fixed some constness issues.

* examples/cppunittest/ExceptionTest.cpp : Refactored.

* NEWS : partially updated (need to be more detailed)

* include/cppunit/NotEqualException.h :
* src/cppunit/NotEqualException.cpp : added constructor that take a
SourceLine argument. Deprecated old constructor. Added a third element
to compose message.

* examples/cppunittest/NotEqualExceptionTest.cpp : moved to "Core"
suite. Added test for SourceLine() and additionalMessage().
Refactored.

* include/cppunit/SourceLine.h :
* src/cppunit/SourceLine.cpp : added. Result of applying
IntroduceParameterObject refactoring on filename & line number...

* include/cppunit/TestAssert.h :
* src/cppunit/TestAssert.cpp : deprecated old assert functions.
added functions assertEquals() and assertDoubleEquals() which use
SourceLine.

* src/cppunit/TestCase.cpp : Modified for SourceLine.

* include/cppunit/TestFailure.h :
* src/cppunit/TestFailure.cpp : added failedTestName(), and
sourceLine().

* src/msvc6/testrunner/TestRunnerDlg.cpp : modified to use SourceLine.

* include/cppunit/TextTestResult.h :
* src/cppunit/TextTestResult.cpp : corrected include order and
switched to angled brackets. Refactored. Don't print failure location
if not available. Not equal failure dump additional message if
available.

* src/cppunit/TextTestRunner.cpp : run() now returns a boolean to
indicate if the run was sucessful.

* src/cppunit/XmlTestResultOutputter.cpp : replaced itoa() with
OStringStream. Refactored.

* examples/cppunittest/XmlUniformiser.h :
* examples/cppunittest/XmlUniformiser.cpp :
CPPUNITTEST_ASSERT_XML_EQUAL capture failure location. Refactored
checkXmlEqual().

* examples/cppunittest/XmlUniformiserTest.h :
* examples/cppunittest/XmlUniformiserTest.cpp : added test for
CPPUNITTEST_ASSERT_XML_EQUAL.

* include/cppunit/XmlTestResultOutputter.h :
* src/cppunit/XmlTestResultOutputter.cpp : updated to use SourceLine.
@
text
@d226 11
@


1.1
log
@* NEWS : updated.

* include/cppunit/Exception.h : added include Portability.h.

* include/cppunit/TestResult.* : changed TestFailures to a deque.
added tests().

* examples/cppunittest/CppUnitTest.dsp :
* examples/cppunittest/MakeFile.am :
* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : Added
XmlTestResultOutputterTest.*, XmlUniformiser.*, XmlUniformiserTest.*,
UnitTestToolSuite.h, OutputSuite.h.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : revised project
folders structure. Added missing NoteEqualExceptionTest.*.

* examples/cppunittest/CppUnitTestSuite.cpp : added 'Output' and
'UnitTestTool' suites.

* src/cppunit/cppunit.dsp: removed estring.h. Revised project folders
structure. Removed TestRegistry.*. Added TestSetUp.h,
XmlTestResultOutputter.*.

* src/cppunit/MakeFile.am: added XmlTestResultOutputter.*.

* src/testrunner/TestRunnerDlg.cpp: removed disabled code.
@
text
@d7 15
d25 2
a26 1
               std::string actualXml )
a29 14
  int index =0;
  while ( index < actual.length()  &&  
          index < expected.length() )
  {
    if ( actual[index] != expected[index] )
    {
      CppUnit::OStringStream message;
      message  <<  "expected xml: "  <<  expected << "\n"
               <<  "actual xml  : "  <<  actual  <<  "\n"
               <<  "differ at column: "  <<  index  << "\n"
               <<  "expected: "  <<  expected.substr(index) << "\n"
               <<  "but was : "  <<  actual.substr( index );
      CPPUNIT_FAIL( message.str() );
    }
d31 2
a32 2
    ++index;
  }
d34 9
a42 10
  if ( actual.length() != expected.length() )
  {
      CppUnit::OStringStream message;
      message  <<  "expected: "  <<  expected << "\n"
               <<  "was     : "  <<  actual  <<  "\n"
               <<  "differ at column: "  <<  index  << "\n"
               <<  "expected: "  <<  expected.substr(index) << "\n"
               <<  "but was : "  <<  actual.substr( index );
      CPPUNIT_FAIL( message.str() );
  }
@

