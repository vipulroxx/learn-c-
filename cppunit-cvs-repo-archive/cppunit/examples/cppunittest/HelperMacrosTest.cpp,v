head	1.10;
access;
symbols
	REL_1_12_1:1.10
	REL_1_11_6:1.10
	REL_1_11_4:1.10
	REL_1_11_0:1.9
	TG_CPPUNIT_NO_STREAM_AFTER:1.9
	TG_CPPUNIT_NO_STREAM_BEFORE:1.9
	REL_1_10_2:1.9
	REL_1_10_0:1.9
	REL_1_9_14:1.9
	REL_1_9_12:1.9
	BRANCH_1_9_12:1.9.0.2
	TG_BRANCH_1_9_12:1.9
	TG_BEFORE_HPUX_PLUGIN:1.9
	TG_BEFORE_SUN4_PORT:1.9
	REL_1_9_10:1.9
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.6
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.6
	REL_1_9_6:1.5
	REL_1_9_4:1.5
	REL_1_9_0:1.5
	REL_1_8_0:1.5
	REL_1_7_8:1.4
	REL_1_7_3:1.4
	REL_1_7_1:1.3
	REL_1_6_2:1.1
	BRANCH_1_6:1.1.0.2
	REL_1_6_1:1.1
	REL_1_6_0:1.1;
locks; strict;
comment	@// @;


1.10
date	2005.10.13.20.13.15;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2002.08.28.22.20.52;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2002.07.14.19.48.31;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2002.07.13.10.33.49;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2002.06.12.16.44.17;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2002.03.27.17.56.41;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.02.28.10.49.20;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.02.20.43.55;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2001.10.02.06.49.27;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.11.19.56.23;	author blep;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* removed most warning when compiling with vc++ 6sp6.
@
text
@#include <cppunit/config/SourcePrefix.h>
#include "FailureException.h"
#include "HelperMacrosTest.h"
#include "HelperSuite.h"
#include "MockTestCase.h"
#include "SubclassedTestCase.h"
#include <cppunit/TestResult.h>
#include <memory>

/* Note:
 - no unit test for CPPUNIT_TEST_SUITE_REGISTRATION...
 */

class FailTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( FailTestFixture );
  CPPUNIT_TEST_FAIL( testFail );
  CPPUNIT_TEST_SUITE_END();
public:
  void testFail()
  {
    CPPUNIT_ASSERT_MESSAGE( "Failure", false );
  }
};


class FailToFailTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( FailToFailTestFixture );
  CPPUNIT_TEST_FAIL( testFailToFail );
  CPPUNIT_TEST_SUITE_END();
public:
  void testFailToFail()
  {
  }
};


class ExceptionTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( ExceptionTestFixture );
  CPPUNIT_TEST_EXCEPTION( testException, FailureException );
  CPPUNIT_TEST_SUITE_END();
public:
  void testException()
  {
    throw FailureException();
  }
};


class ExceptionNotCaughtTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( ExceptionNotCaughtTestFixture );
  CPPUNIT_TEST_EXCEPTION( testExceptionNotCaught, FailureException );
  CPPUNIT_TEST_SUITE_END();
public:
  void testExceptionNotCaught()
  {
  }
};


class CustomsTestTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( CustomsTestTestFixture );
  CPPUNIT_TEST_SUITE_ADD_CUSTOM_TESTS( addCustomTests );
  CPPUNIT_TEST_SUITE_END();
public:
  static void addCustomTests( TestSuiteBuilderContextType &context )
  {
    MockTestCase *test1 = new MockTestCase( context.getTestNameFor( "myCustomTest1" ) );
    test1->makeRunTestThrow();
    MockTestCase *test2 = new MockTestCase( context.getTestNameFor( "myCustomTest2" ) );
    context.addTest( test1 );
    context.addTest( test2 );
  }
};


#undef TEST_ADD_N_MOCK
#define TEST_ADD_N_MOCK( totalCount )                                              \
  {                                                                 \
    for ( int count = (totalCount); count > 0; --count )            \
      CPPUNIT_TEST_SUITE_ADD_TEST(                                  \
         new MockTestCase( context.getTestNameFor( "dummyName" ) ) ); \
  }



class AddTestTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( AddTestTestFixture );
  TEST_ADD_N_MOCK( 7 );
  CPPUNIT_TEST_SUITE_END();
public:
};



CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( HelperMacrosTest, 
                                       helperSuiteName() );


HelperMacrosTest::HelperMacrosTest()
{
}


HelperMacrosTest::~HelperMacrosTest()
{
}


void 
HelperMacrosTest::setUp()
{
  m_testListener = new MockTestListener( "mock-testlistener" );
  m_result = new CPPUNIT_NS::TestResult();
  m_result->addListener( m_testListener );
}


void 
HelperMacrosTest::tearDown()
{
  delete m_result;
  delete m_testListener;
}


void 
HelperMacrosTest::testNoSubclassing()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( BaseTestCase::suite() );
  CPPUNIT_ASSERT_EQUAL( 1, suite->countTestCases() );
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectNoFailure();

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testSubclassing()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( SubclassedTestCase::suite() );
  CPPUNIT_ASSERT_EQUAL( 2, suite->countTestCases() );
  m_testListener->setExpectedStartTestCall( 2 );
  m_testListener->setExpectedAddFailureCall( 1 );

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testFail()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( FailTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectNoFailure();

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testFailToFail()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( FailToFailTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectedAddFailureCall( 1 );

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testException()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( ExceptionTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectNoFailure();
  
  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testExceptionNotCaught()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( ExceptionNotCaughtTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectedAddFailureCall( 1 );

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testCustomTests()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( CustomsTestTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 2 );
  m_testListener->setExpectedAddFailureCall( 1 );

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testAddTest()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( AddTestTestFixture::suite() );
  m_testListener->setExpectedStartTestCall( 7 );
  m_testListener->setExpectedAddFailureCall( 0 );

  suite->run( m_result );
  m_testListener->verify();
}
@


1.9
log
@* include/cppunit/Portability.h: added CPPUNIT_STATIC_CAST.

* include/cppunit/extensions/TestFixtureFactory.h: extracted from
  HelperMacros.h. Added template class ConcretTestFixtureFactory.

* include/cppunit/extensions/TestSuiteBuilderContext.h:
* src/cppunit/TestSuiteBuilderContext.cpp: added. Context used
  to add test case to the fixture suite. Prevent future
  compatibility break for custom test API.

* include/cppunit/extensions/HelperMacros.h: mostly rewritten. No
  longer use TestSuiteBuilder. Added support for abstract test fixture
  through macro CPPUNIT_TEST_SUITE_END_ABSTRACT. Made custom test API
  easier to use.

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: updated against
  HelperMacros.h changes.
@
text
@d1 1
@


1.8
log
@* CodingGuideLines.txt: added. CppUnit's coding guidelines for portability.

* include/cppunit/portability/CppUnitStack.h: added. wrapper for std::stack.

* include/cppunit/portability/CppUnitSet.h: added. wrapper for std::set.

* include/cppunit/ui/text/TestRunner.h: fixed namespace definition for
  deprecated TestRunner.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: removed old deprecated functions that did
  not use SourceLine. Moved assertEquals() and assertDoubleEquals() into
  CppUnit namespace.

* src/cppunit/TestFactoryRegistry.cpp: use CppUnitMap instead of std::map.

* src/DllPlugInTester/CommandLineParser.h: use CppUnitDeque instead
  std::deque.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp: removed all usage of CppUnitTest namespace.
  Everything is now in global space.

* examples/*/*.h:
* examples/*/*.cpp: replaced usage of CppUnit:: with CPPUNIT_NS::.

* examples/ClockerPlugIn/ClockerModel.h: use CppUnit STL wrapper instead
  of STL container.
@
text
@a62 16
class CustomTestTestFixture : public CPPUNIT_NS::TestFixture
{
  CPPUNIT_TEST_SUITE( CustomTestTestFixture );
  CPPUNIT_TEST_CUSTOM( makeCustomTest );
  CPPUNIT_TEST_SUITE_END();
public:
  static CPPUNIT_NS::Test *makeCustomTest( const ThisTestFixtureFactory &factory,
                                           const CPPUNIT_NS::TestNamer &namer )
  {
    MockTestCase *test = new MockTestCase( namer.getTestNameFor( "myCustomTest" ) );
    test->makeRunTestThrow();
    return test;
  }
};


d66 1
a66 1
  CPPUNIT_TEST_CUSTOMS( addCustomTests );
d69 1
a69 3
  static void addCustomTests( CPPUNIT_NS::TestSuite *suite,
                              const ThisTestFixtureFactory &factory,
                              const CPPUNIT_NS::TestNamer &namer )
d71 1
a71 1
    MockTestCase *test1 = new MockTestCase( namer.getTestNameFor( "myCustomTest1" ) );
d73 3
a75 3
    MockTestCase *test2 = new MockTestCase( namer.getTestNameFor( "myCustomTest2" ) );
    suite->addTest( test1 );
    suite->addTest( test2 );
d82 4
a85 3
  {                                                                                \
    for ( int count = (totalCount); count > 0; --count )                           \
      CPPUNIT_TEST_ADD( new MockTestCase( namer.getTestNameFor( "dummyName" ) ) ); \
a196 12
  m_testListener->setExpectedStartTestCall( 1 );
  m_testListener->setExpectedAddFailureCall( 1 );

  suite->run( m_result );
  m_testListener->verify();
}


void 
HelperMacrosTest::testCustomTest()
{
  std::auto_ptr<CPPUNIT_NS::TestSuite> suite( CustomTestTestFixture::suite() );
@


1.7
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d118 1
a118 1
                                       CppUnitTest::helperSuiteName() );
@


1.6
log
@* install-unix: added some hints extracted from bug #544684 on how to compile
  for Solaris/Forte C++ compiler.

* TODO: cleaned-up and added new things.

* include/cppunit/extensions/HelperMacros.h: CPPUNIT_TEST_SUITE now declares
  a class named ThisTestFixtureFactory which is a wrapper for the fixture
  factory. This removes the need to cast the fixture to the correct type when
  using the factory. Updated other macros implementation to use this new
  factory. Modified CPPUNIT_TEST_CUSTOM(S) macros to use this new factory
  class. Added macro CPPUNIT_TEST_ADD to help create new macros like
  CPPUNIT_TEST_xxx.

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: added unit tests for
  CPPUNIT_TEST_CUSTOM, CPPUNIT_TEST_CUSTOMS and CPPUNIT_TEST_ADD.
@
text
@d13 1
a13 1
class FailTestFixture : public CppUnit::TestFixture
d26 1
a26 1
class FailToFailTestFixture : public CppUnit::TestFixture
d38 1
a38 1
class ExceptionTestFixture : public CppUnit::TestFixture
d51 1
a51 1
class ExceptionNotCaughtTestFixture : public CppUnit::TestFixture
d63 1
a63 1
class CustomTestTestFixture : public CppUnit::TestFixture
d69 2
a70 2
  static CppUnit::Test *makeCustomTest( const ThisTestFixtureFactory &factory,
                                        const CppUnit::TestNamer &namer )
d79 1
a79 1
class CustomsTestTestFixture : public CppUnit::TestFixture
d85 1
a85 1
  static void addCustomTests( CppUnit::TestSuite *suite,
d87 1
a87 1
                              const CppUnit::TestNamer &namer )
d107 1
a107 1
class AddTestTestFixture : public CppUnit::TestFixture
d135 1
a135 1
  m_result = new CppUnit::TestResult();
d151 1
a151 1
  std::auto_ptr<CppUnit::TestSuite> suite( BaseTestCase::suite() );
d164 1
a164 1
  std::auto_ptr<CppUnit::TestSuite> suite( SubclassedTestCase::suite() );
d177 1
a177 1
  std::auto_ptr<CppUnit::TestSuite> suite( FailTestFixture::suite() );
d189 1
a189 1
  std::auto_ptr<CppUnit::TestSuite> suite( FailToFailTestFixture::suite() );
d201 1
a201 1
  std::auto_ptr<CppUnit::TestSuite> suite( ExceptionTestFixture::suite() );
d213 1
a213 1
  std::auto_ptr<CppUnit::TestSuite> suite( ExceptionNotCaughtTestFixture::suite() );
d225 1
a225 1
  std::auto_ptr<CppUnit::TestSuite> suite( CustomTestTestFixture::suite() );
d237 1
a237 1
  std::auto_ptr<CppUnit::TestSuite> suite( CustomsTestTestFixture::suite() );
d249 1
a249 1
  std::auto_ptr<CppUnit::TestSuite> suite( AddTestTestFixture::suite() );
@


1.5
log
@* makefile.am: added src/CppUnitLibraries.dsw, new contribution, and
src/qttestrunner.

* TODO: updated (doc).

* contrib/msvc/AddingUnitTestMethod.dsm: added, submitted by
bloodchen@@hotmail.com.

* constrib/msvc/readme.txt: updated.

* include/cppunit/TestAsserter.h:
* include/cppunit/SourceLine.h: updated doc.

* include/cppunit/TestCaller.h: reindented. updated doc.

* include/cppunit/extensions/HelperMacros.h: relaxed constraint on fixture.
Fixture base class may be TestFixture instead of TestCase.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.h: TestCase inherits TestFixture for setUp() and
tearDown() definition. Moved documentation to TestFixture.

* include/cppunit/TestFixture.h: updated documentation.

* include/cppunit/TestRegistry.h:
* src/cppunit/TestRegistry.cpp: Removed. Replaced by TestFactoryRegistry.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: made printing progress using a
TextTestProgressListener optional.

* examples\cppunittest\ExceptionTest.h:
* examples\cppunittest\HelperMacrosTest.h:
* examples\cppunittest\HelperMacrosTest.cpp:
* examples\cppunittest\NotEqualException.h:
* examples\cppunittest\OrthodoxTest.h:
* examples\cppunittest\RepeatedTest.h:
* examples\cppunittest\TestAssertTest.h:
* examples\cppunittest\TestCallerTest.h:
* examples\cppunittest\TestDecoratorTest.h:
* examples\cppunittest\TestFailureTest.h:
* examples\cppunittest\TestResultCollectorTest.h:
* examples\cppunittest\TestResultTest.h:
* examples\cppunittest\TestSetUpTest.h:
* examples\cppunittest\TestSuiteTest.h:
* examples\cppunittest\XmlOutputterTest.h:
* examples\cppunittest\XmlOutputterTest.cpp:
* examples\cppunittest\XmlUniformizerTest.h:
* examples\cppunittest\XmlUniformizerTest.cpp: changed base class for fixture
from TestCase to TestFixture.

* examples\hierarchy\BoardGameTest.h:
* examples\hierarchy\ChessTest.h:
* examples\hierarchy\main.cpp: updated to use HelperMacros for correct
fixture instantiation (the ChessBoard::testReset test case was using
BoardGame fixture instance instead of ChessBoard).
@
text
@d4 1
d13 1
a13 1
class FailTestCase : public CppUnit::TestCase
d15 1
a15 1
  CPPUNIT_TEST_SUITE( FailTestCase );
d26 1
a26 1
class FailToFailTestCase : public CppUnit::TestCase
d28 1
a28 1
  CPPUNIT_TEST_SUITE( FailToFailTestCase );
d38 1
a38 1
class ExceptionTestCase : public CppUnit::TestCase
d40 1
a40 1
  CPPUNIT_TEST_SUITE( ExceptionTestCase );
d51 1
a51 1
class ExceptionNotCaughtTestCase : public CppUnit::TestCase
d53 1
a53 1
  CPPUNIT_TEST_SUITE( ExceptionNotCaughtTestCase );
d63 53
d177 1
a177 1
  std::auto_ptr<CppUnit::TestSuite> suite( FailTestCase::suite() );
d189 1
a189 1
  std::auto_ptr<CppUnit::TestSuite> suite( FailToFailTestCase::suite() );
d201 1
a201 1
  std::auto_ptr<CppUnit::TestSuite> suite( ExceptionTestCase::suite() );
d213 13
a225 1
  std::auto_ptr<CppUnit::TestSuite> suite( ExceptionNotCaughtTestCase::suite() );
d228 24
@


1.4
log
@* NEW: updated and restructured.

* include/cppunit/CompilerOutputter.h:
* src/cppunit/CompilerOutputter.cpp:
updated against TestResultChange. Changed TestResult to TestResultCollector.

* include/cppunit/extensions/HelperMacros.h: minor documentation fix.

* include/cppunit/Outputter.h: added. Abstract base class for all Outputter.

* include/cppunit/Portability.h: made the fix on OStringStream suggested by
Bob Summerwill to remove level 4 warning with VC++.

* include/cppunit/TestAssert.h: added macro CPPUNIT_ASSERT_EQUAL_MESSAGE.

* src/cppunit/TestFailure.cpp:
* include/cppunit/TestFailure.h: added method clone() to duplicate a failure. Made
all method virtual.

* include/cppunit/TestListener.h: changed signature of addFailure() to
addFailure( const TestFailure &failure ). Failure is now only a temporary object.

* include/cppunit/Outputter.h: added. Abstract base class for all outputter. Used
by TextTestRunner.

* include/cppunit/SynchronizedObject.h:
* src/cppunit/SynchronizedObject.cpp: added. Class extracted from TestResult.
Base class for objects that can be accessed from different threads.

* include/cppunit/TestResult.h: TestFailure.h is no longer included.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: extracted all methods related to keeping track
of the result to the new TestResultCollector class which is a TestListener.

* include/cppunit/TestResultCollector.h:
* src/cppunit/TestResultCollector.cpp: added. TestListener which kept track
of the result of the test run. All failure/error, and tests are tracked.

* include/cppunit/TestSucessListener.h:
* src/cppunit/TestSucessListener.cpp: added. TestListener extracted from
TestResult. Is responsible for wasSucessful().

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: reindented.

* include/cppunit/TextOutputter.h:
* src/cppunit/TextOutputter.cpp: added. Copied from the deprecated
TextTestResult and modified to act as an Ouputter.

* include/cppunit/TextTestProgressListener.h:
* src/cppunit/TextTestProgressListener.cpp: Copied from the deprecated
TextTestResult and modified to print the dot while the test are running.

* include/cppunit/TextTestResult.h:
* src/cppunit/TextTestResult.cpp: updated against TestResult change.
No compatiblity break. Deprecated.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to work with the new TestResult.
Use TextTestProgressListener and TextOutputter instead of TextTestResult.
Any outputter with interface Outputter can be used to print the test result
(CompilerOutputter, XmlOutputter, TextOutputter...)

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: updated against TestResultChange.
Changed TestResult to TestResultCollector.

* src/msvc6/TestRunnerDlg.h:
* src/msvc6/TestRunnerDlg.cpp: fixed the 'fullrowselect' feature of the list view.
The dialog is a TestListener itself, it no longer use the GUITestResult class.

* src/msvc6/TestRunner.rc: moved the "autorun test button" in such a way that it
did not overlap the progress bar anymore.

* src/msvc6/MfcSynchronizationObject.h: added. Generic SynchronizedObject
lock for MFC.

* src/msvc6/GUITestResult.h :
* src/msvc6/GUITestResult.cpp : removed.

* src/qttestrunner/TestRunnerModel.h:
* src/qttestrunner/TestRunnerModel.cpp: changed addFailure() signature to reflect
change on TestListener.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use the new Outputter
abstraction and TextTestRunner facilities.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.cpp: removed. Replaced by MockTestCase.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.h:

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/MockTestListener.h:
* examples/cppunittest/MockTestListener.cpp: the class now behave like a mock
object.

* examples/cppunittest/MockTestCase.h:
* examples/cppunittest/MockTestCase.cpp: added. Mock TestCase object.

* examples/cppunittest/OrthodoxTest.h:
* examples/cppunittest/OrthodoxTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/SynchronizedTestResult.h: Updated against TestResult
change.

* examples/cppunittest/TestCallerTest.h:
* examples/cppunittest/TestCallerTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: Updated against TestResult change.
Use MockTestListener and MockTestCase instead of FailingTestCase and TestResult.

* examples/cppunittest/TestDecoratorTest.h:
* examples/cppunittest/TestDecoratorTest.cpp: Updated against TestResult change.
Use MockTestCase instead of FailingTestCase.

* examples/cppunittest/TestListenerTest.h:
* examples/cppunittest/TestListenerTest.cpp: removed. Those unit tests have been
rewrote and moved to TestResultTest.

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: Updated to test the new interface.
Tests from TestListenerTest have been moved here.

* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp: added. Tests for the class
that been extracted from TestResult.

* examples/cppunittest/TestSetUpTest.h:
* examples/cppunittest/TestSetUpTest.cpp: renamed SetUp inner class to MockSetUp.
Changed interface to be more akin to a Mock object.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: Updated against TestResult change,
and rewrote to use MockTestCase instead of FailingTestCase.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: Updated against TestResult change.
Added some utility methods to make the update easier.
@
text
@d67 1
a67 2
HelperMacrosTest::HelperMacrosTest() : 
    CppUnit::TestCase()
@


1.3
log
@* include/cppunit/extensions/TestFactoryRegistry.h
* src/cppunit/TestFactoryRegistry.cpp : fixed memory leaks that
occured when a TestFactoryRegistry was registered into another
TestFactoryRegistry.

* include/cppunit/extensions/AutoRegisterSuite.h : updated doc.

* include/cppunit/extensions/HelperMacros.h : added macro
CPPUNIT_TEST_SUITE_NAMED_REGISTRATION to register a suite into
a named suite. Updated doc.

* examples/cppunittest/CoreSuite.h:
* examples/cppunittest/ExtensionSuite.h:
* examples/cppunittest/HelperSuite.h: added, declaration of suite for
use with CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/makefile.am : added HelperSuite.h, CoreSuite.h,
ExtensionSuite.h, CppUnitTestSuite.h and CppUnitTestSuite.cpp.

* examples/cppunittest/CppUnitTestSuite.*: added.

* examples/cppunittest/ExceptionTest.cpp:
* examples/cppunittest/TestAssertTest.cpp:
* examples/cppunittest/TestCaseTest.cpp:
* examples/cppunittest/TestFailureTest.cpp:
* examples/cppunittest/TestListenerTest.cpp:
* examples/cppunittest/TestResultTest.cpp:
* examples/cppunittest/TestSuiteTest.cpp: moved into named suite
"Core" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/OrthodoxTest.cpp:
* examples/cppunittest/RepeatedTest.cpp:
* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/TestSetUpTest.cpp: moved into named suite
"Extension" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/HelperMacrosTest.cpp:
* examples/cppunittest/TestCallerTest.cpp: moved into named suite
"Helper" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/CppUnitTest.dsp :
* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : added
Makefile.am, HelperSuite.h, CoreSuite.h, ExtensionSuite.h,
CppUnitTestSuite.h and CppUnitTestSuite.cpp.
@
text
@d81 1
d83 1
d91 1
d100 2
d104 1
a104 1
  checkTestResult( 0,0,1 );
d113 2
d117 1
a117 1
  checkTestResult( 1,0,2 );
d125 3
d129 1
a129 1
  checkTestResult( 0,0,1 );
d137 3
d141 1
a141 1
  checkTestResult( 1,0,1 );
d149 3
d153 1
a153 1
  checkTestResult( 0,0,1 );
d161 3
d165 1
a165 12
  checkTestResult( 1,0,1 );
}


void 
HelperMacrosTest::checkTestResult( int expectedFailures, 
                                   int expectedErrors, 
                                   int expectedTestsRun )
{
  CPPUNIT_ASSERT_EQUAL( expectedFailures, m_result->testFailures() );
  CPPUNIT_ASSERT_EQUAL( expectedErrors, m_result->testErrors() );
  CPPUNIT_ASSERT_EQUAL( expectedTestsRun, m_result->runTests() );
@


1.2
log
@* NEWS : updated.

* doc/other_documentation.dox : added all the authors to the list of
authors.

* examples/cppunittest/HelperMacrosTest.*: added unit tests for
CPPUNIT_TEST_FAIL & CPPUNIT_TEST_EXCEPTION.

* examples/cppunittest/TestAssertTest.*: added unit tests for
CPPUNIT_FAIL. Corrected spelling error. Relaxed constraint on message
produced by CPPUNIT_ASSERT_MESSAGE. Refactored some tests.

* include/cppunit/extensions/HelperMacros.h : added macro
CPPUNIT_TEST_EXCEPTION to create a test case for the specified method
that must throw an exception of the specified type.

* include/cppunit/extensions/TestSuiteBuilder.h : made makeTestName() public.
Added addTestCallerForException() to add a test case expecting an exception of
the specified type to be caught.

* include/cppunit/TestAssert.h : added macro CPPUNIT_FAIL as a
shortcut for CPPUNIT_ASSERT_MESSAGE( message, false ).
@
text
@a0 2
#include <cppunit/TestResult.h>
#include <memory>
d3 1
d5 2
d63 2
a64 1
CPPUNIT_TEST_SUITE_REGISTRATION( HelperMacrosTest );
@


1.1
log
@* examples/cppunittest/TestResultTest.*: renamed TestListenerTest.*

* examples/cppunittest/*: added unit tests for:
HelperMacros, TestAssert, TestCaller, TestCase, TestFailure,
TestResult, TestSuite, TestDecoratorTest, TestSetUp, RepeatedTestTest,
Orthodox, Exception.
@
text
@d1 3
a5 2
#include <cppunit/TestResult.h>
#include <memory>
d11 50
d109 36
@

