head	1.6;
access;
symbols
	REL_1_12_1:1.6
	REL_1_11_6:1.6
	REL_1_11_4:1.6
	REL_1_11_0:1.5
	TG_CPPUNIT_NO_STREAM_AFTER:1.5
	TG_CPPUNIT_NO_STREAM_BEFORE:1.5
	REL_1_10_2:1.5
	REL_1_10_0:1.5
	REL_1_9_14:1.5
	REL_1_9_12:1.5
	BRANCH_1_9_12:1.5.0.2
	TG_BRANCH_1_9_12:1.5
	TG_BEFORE_HPUX_PLUGIN:1.5
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1;
locks; strict;
comment	@// @;


1.6
date	2005.10.13.20.13.15;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.14.19.48.31;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.13.10.33.49;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.06.16.17.55.58;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.14.20.21.00;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.23.18.38.38;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* removed most warning when compiling with vc++ 6sp6.
@
text
@#include <cppunit/config/SourcePrefix.h>
#include <cppunit/tools/XmlElement.h>
#include "ToolsSuite.h"
#include "XmlElementTest.h"
#include "XmlUniformiser.h"


CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( XmlElementTest, 
                                       toolsSuiteName() );


XmlElementTest::XmlElementTest()
{
}


XmlElementTest::~XmlElementTest()
{
}


void 
XmlElementTest::setUp()
{
}


void 
XmlElementTest::tearDown()
{
}


void 
XmlElementTest::testStringContentConstructor()
{
  CPPUNIT_NS::XmlElement element( "aName", "someContent" );
  CPPUNIT_ASSERT_EQUAL( std::string("aName"), element.name() );
  CPPUNIT_ASSERT_EQUAL( std::string("someContent"), element.content() );
}


void 
XmlElementTest::testNumericContentConstructor()
{
  CPPUNIT_NS::XmlElement element( "numericName", 123456789 );
  CPPUNIT_ASSERT_EQUAL( std::string("numericName"), element.name() );
  CPPUNIT_ASSERT_EQUAL( std::string("123456789"), element.content() );
}


void 
XmlElementTest::testSetName()
{
  CPPUNIT_NS::XmlElement element( "aName" );
  element.setName( "anotherName" );
  CPPUNIT_ASSERT_EQUAL( std::string("anotherName"), element.name() );
}


void 
XmlElementTest::testSetStringContent()
{
  CPPUNIT_NS::XmlElement element( "aName", "someContent" );
  element.setContent( "other" );
  CPPUNIT_ASSERT_EQUAL( std::string("other"), element.content() );
}


void 
XmlElementTest::testSetNumericContent()
{
  CPPUNIT_NS::XmlElement element( "aName", "someContent" );
  element.setContent( 87654321 );
  CPPUNIT_ASSERT_EQUAL( std::string("87654321"), element.content() );
}


void 
XmlElementTest::testElementCount()
{
  CPPUNIT_NS::XmlElement node( "element", "content" );
  CPPUNIT_ASSERT_EQUAL( 0, node.elementCount() );

  node.addElement( new CPPUNIT_NS::XmlElement( "child1" ) );
  node.addElement( new CPPUNIT_NS::XmlElement( "child2" ) );
  CPPUNIT_ASSERT_EQUAL( 2, node.elementCount() );
}


void 
XmlElementTest::testElementAtNegativeIndexThrow()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.elementAt( -1 );
}


void 
XmlElementTest::testElementAtTooLargeIndexThrow()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.elementAt( 0 );
}


void 
XmlElementTest::testElementAt()
{
  CPPUNIT_NS::XmlElement node( "element" );
  CPPUNIT_NS::XmlElement *element1 = new CPPUNIT_NS::XmlElement( "element1" );
  CPPUNIT_NS::XmlElement *element2 = new CPPUNIT_NS::XmlElement( "element2" );
  node.addElement( element1 );
  node.addElement( element2 );

  CPPUNIT_ASSERT( element1 == node.elementAt(0) );
  CPPUNIT_ASSERT( element2 == node.elementAt(1) );
}


void 
XmlElementTest::testElementForThrow()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.addElement( new CPPUNIT_NS::XmlElement( "element1" ) );
  node.elementFor( "name2" );
}


void 
XmlElementTest::testElementFor()
{
  CPPUNIT_NS::XmlElement node( "element" );
  CPPUNIT_NS::XmlElement *element1 = new CPPUNIT_NS::XmlElement( "element1" );
  CPPUNIT_NS::XmlElement *element2 = new CPPUNIT_NS::XmlElement( "element2" );
  node.addElement( element1 );
  node.addElement( element2 );

  CPPUNIT_ASSERT( element2 == node.elementFor( "element2" ) );
  CPPUNIT_ASSERT( element1 == node.elementFor( "element1" ) );
}


void 
XmlElementTest::testEmptyNodeToString()
{
  CPPUNIT_NS::XmlElement node( "element" );
  std::string expectedXml = "<element></element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementWithAttributesToString()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.addAttribute( "id", 17 );
  node.addAttribute( "date-format", "iso-8901" );
  std::string expectedXml = "<element id=\"17\" "
                            "date-format=\"iso-8901\">"
                            "</element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testEscapedAttributeValueToString()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.addAttribute( "escaped", "&<>\"'" );
  std::string expectedXml = "<element escaped=\""
                            "&amp;&lt;&gt;&quot;&apos;"
                            "\"></element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementToStringEscapeContent()
{
  CPPUNIT_NS::XmlElement node( "element", "ChessTest<class Chess>" );
  std::string expectedXml = "<element>"
                            "ChessTest&lt;class Chess&gt;"
                            "</element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementWithChildrenToString()
{
  CPPUNIT_NS::XmlElement node( "element" );
  node.addElement( new CPPUNIT_NS::XmlElement( "child1" ) );
  node.addElement( new CPPUNIT_NS::XmlElement( "child2" ) );
  std::string expectedXml = "<element><child1></child1>"
                            "<child2></child2></element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementWithContentToString()
{
  CPPUNIT_NS::XmlElement node( "element", "content\nline2" );
  std::string expectedXml = "<element>content\nline2</element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementWithNumericContentToString()
{
  CPPUNIT_NS::XmlElement node( "element", 123456789 );
  std::string expectedXml = "<element>123456789</element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}


void 
XmlElementTest::testElementWithContentAndChildToString()
{
  CPPUNIT_NS::XmlElement node( "element", "content" );
  node.addElement( new CPPUNIT_NS::XmlElement( "child1" ) );
  std::string expectedXml = "<element><child1></child1>content</element>";
  CPPUNITTEST_ASSERT_XML_EQUAL( expectedXml, node.toString() );
}
@


1.5
log
@* CodingGuideLines.txt: added. CppUnit's coding guidelines for portability.

* include/cppunit/portability/CppUnitStack.h: added. wrapper for std::stack.

* include/cppunit/portability/CppUnitSet.h: added. wrapper for std::set.

* include/cppunit/ui/text/TestRunner.h: fixed namespace definition for
  deprecated TestRunner.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: removed old deprecated functions that did
  not use SourceLine. Moved assertEquals() and assertDoubleEquals() into
  CppUnit namespace.

* src/cppunit/TestFactoryRegistry.cpp: use CppUnitMap instead of std::map.

* src/DllPlugInTester/CommandLineParser.h: use CppUnitDeque instead
  std::deque.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp: removed all usage of CppUnitTest namespace.
  Everything is now in global space.

* examples/*/*.h:
* examples/*/*.cpp: replaced usage of CppUnit:: with CPPUNIT_NS::.

* examples/ClockerPlugIn/ClockerModel.h: use CppUnit STL wrapper instead
  of STL container.
@
text
@d1 1
@


1.4
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d8 1
a8 1
                                       CppUnitTest::toolsSuiteName() );
@


1.3
log
@* release 1.9.8

* include/cppunit/plugin/TestPlugIn.h: updated documentation.

* include/cppunit/tools/XmlDocument.h: updated documentation.

* include/cppunit/tools/StringTools.h:
* src/cppunit/StringTools.cpp: added split() and wrap() functions.

* include/cppunit/CompilerOutputter.h:
* src/cppunit/CompilerOutputter.cpp: extracted wrap() and
  splitMessageIntoLines() to StringTools.

* include/cppunit/XmlOutputterHook.h:
* src/cppunit/XmlOutputterHook.cpp: removed rooNode parameter from
  beginDocument() and endDocument(). It can be retreive from document.
  Renamed 'node' occurences to 'element'.

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: updated against
  XmlOutputterHook changes. Renamed 'node' occurences to 'element'.

* examples/ClockerPlugIn/ClockerXmlHook.h:
* examples/ClockerPlugIn/ClockerXmlHook.cpp: updated against
  XmlOutputterHook changes.

* examples/cppunittest/XmlElementTest.h:
* examples/cppunittest/XmlElementTest.cpp: Renamed 'node' occurences
  to 'element'.

* examples/cppunittest/XmlOutputterTest.cpp: updated against
  XmlOutputterHook changes.

* examples/cppunittest/StringToolsTest.h:
* examples/cppunittest/StringToolsTest.cpp: added. Unit tests for
  StringTools. Turn out that VC++ dismiss empty lines in tools output,
  which is the reason why empty lines where not printed in
  CompilerOutputter.
@
text
@d36 1
a36 1
  CppUnit::XmlElement element( "aName", "someContent" );
d45 1
a45 1
  CppUnit::XmlElement element( "numericName", 123456789 );
d54 1
a54 1
  CppUnit::XmlElement element( "aName" );
d63 1
a63 1
  CppUnit::XmlElement element( "aName", "someContent" );
d72 1
a72 1
  CppUnit::XmlElement element( "aName", "someContent" );
d81 1
a81 1
  CppUnit::XmlElement node( "element", "content" );
d84 2
a85 2
  node.addElement( new CppUnit::XmlElement( "child1" ) );
  node.addElement( new CppUnit::XmlElement( "child2" ) );
d93 1
a93 1
  CppUnit::XmlElement node( "element" );
d101 1
a101 1
  CppUnit::XmlElement node( "element" );
d109 3
a111 3
  CppUnit::XmlElement node( "element" );
  CppUnit::XmlElement *element1 = new CppUnit::XmlElement( "element1" );
  CppUnit::XmlElement *element2 = new CppUnit::XmlElement( "element2" );
d123 2
a124 2
  CppUnit::XmlElement node( "element" );
  node.addElement( new CppUnit::XmlElement( "element1" ) );
d132 3
a134 3
  CppUnit::XmlElement node( "element" );
  CppUnit::XmlElement *element1 = new CppUnit::XmlElement( "element1" );
  CppUnit::XmlElement *element2 = new CppUnit::XmlElement( "element2" );
d146 1
a146 1
  CppUnit::XmlElement node( "element" );
d155 1
a155 1
  CppUnit::XmlElement node( "element" );
d168 1
a168 1
  CppUnit::XmlElement node( "element" );
d180 1
a180 1
  CppUnit::XmlElement node( "element", "ChessTest<class Chess>" );
d191 3
a193 3
  CppUnit::XmlElement node( "element" );
  node.addElement( new CppUnit::XmlElement( "child1" ) );
  node.addElement( new CppUnit::XmlElement( "child2" ) );
d203 1
a203 1
  CppUnit::XmlElement node( "element", "content\nline2" );
d212 1
a212 1
  CppUnit::XmlElement node( "element", 123456789 );
d221 2
a222 2
  CppUnit::XmlElement node( "element", "content" );
  node.addElement( new CppUnit::XmlElement( "child1" ) );
@


1.2
log
@* include/cppunit/plugin/PlugInManager.h:
* src/cppunit/PlugInManager.cpp: added two methods to use the plug-in
  interface for Xml Outputter hooks.

* include/cppunit/plugin/TestPlugIn.h: added two methods to the plug-in
  interface for Xml Outputter hooks.

* include/cppunit/plugin/TestPlugInAdapter.h:
* src/cppunit/plugin/TestPlugInAdapter.cpp: renamed TestPlugInDefaultImpl.
  Added empty implementation for Xml outputter hook methods.

* include/cppunit/tools/StringTools.h:
* src/cppunit/tools/StringTools.cpp: added. Functions to manipulate string
  (conversion, wrapping...)

* include/cppunit/tools/XmlElement.h:
* src/cppunit/XmlElement.cpp: renamed addNode() to addElement(). Added
  methods to walk and modify XmlElement (for hook). Added documentation.
  Use StringTools.

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: added hook calls & management.

* include/cppunit/XmlOutputterHook.h:
* src/cppunit/XmlOutputterHook.cpp: added. Hook to customize XML output.

* src/DllPlugInTester/DllPlugInTester.cpp: call plug-in XmlOutputterHook
  when writing XML output. Modified so that memory is freed before
  unloading the test plug-in (caused crash when freeing the XmlDocument).

* examples/ReadMe.txt:
* examples/ClockerPlugIn/ReadMe.txt: added details about the plug-in
  (usage, xml content...)

* examples/ClockerPlugIn/ClockerModel.h:
* examples/ClockerPlugIn/ClockerModel.cpp: extracted from ClockerListener.
  Represents the test hierarchy and tracked time for each test.

* examples/ClockerPlugIn/ClockerListener.h:
* examples/ClockerPlugIn/ClockerListener.cpp: extracted test hierarchy
  tracking to ClockerModel. Replaced the 'flat' view option with a 'text'
  option to print the timed test tree to stdout.

* examples/ClockerPlugIn/ClockerPlugIn.cpp: updated to hook the XML
  output and use the new classes.

* examples/ClockerPlugIn/ClockerXmlHook.h:
* examples/ClockerPlugIn/ClockerXmlHook.cpp: added. XmlOutputterHook to
  includes the timed test hierarchy and test timing in the XML output.

* examples/cppunittest/XmlElementTest.h:
* examples/cppunittest/XmlElementTest.cpp: added new test cases.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: added tests for
  XmlOutputterHook.
@
text
@d79 1
a79 1
XmlElementTest::testNodeCount()
d153 1
a153 1
XmlElementTest::testNodeWithAttributesToString()
d178 1
a178 1
XmlElementTest::testNodeToStringEscapeContent()
d189 1
a189 1
XmlElementTest::testNodeWithChildrenToString()
d201 1
a201 1
XmlElementTest::testNodeWithContentToString()
d210 1
a210 1
XmlElementTest::testNodeWithNumericContentToString()
d219 1
a219 1
XmlElementTest::testNodeWithContentAndChildToString()
@


1.1
log
@* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: extracted class XmlOutputter::Node to
XmlElement. Extracted xml 'prolog' generation to XmlDocument.

* include/cppunit/tools/XmlElement.h:
* src/cppunit/tools/XmlElement.cpp: added, extracted from XmlOutputter::Node.

* include/cppunit/tools/XmlDocument.h:
* src/cppunit/tools/XmlDocument.cpp: added, extracted from XmlOutputter. Handle
XML document prolog (encoding & style-sheet) and manage the root element.

* src/DllPlugInTester/DllPlugInTester.cpp: bug fix, flag --xsl was ignored.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: updated for XmlOuputter changes.
extracted tests for XmlOutputter::Node to XmlElementTest

* examples/cppunittest/XmlElementTest.h:
* examples/cppunittest/XmlElementTest.cpp: added, tests extracted from
XmlOutputterTest.
@
text
@d34 110
d192 2
a193 2
  node.addNode( new CppUnit::XmlElement( "child1" ) );
  node.addNode( new CppUnit::XmlElement( "child2" ) );
d222 1
a222 1
  node.addNode( new CppUnit::XmlElement( "child1" ) );
@

