head	1.5;
access;
symbols
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.4
	REL_1_9_6:1.3
	REL_1_9_4:1.3
	REL_1_9_0:1.3
	REL_1_8_0:1.3
	REL_1_7_8:1.3
	REL_1_7_3:1.3
	REL_1_7_1:1.3
	REL_1_6_2:1.2
	BRANCH_1_6:1.2.0.2
	REL_1_6_1:1.2
	REL_1_6_0:1.2;
locks; strict;
comment	@// @;


1.5
date	2002.06.13.18.17.42;	author blep;	state dead;
branches;
next	1.4;

1.4
date	2002.06.13.15.31.01;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2001.10.05.22.27.14;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.12.07.44.16;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.12.07.04.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* include/cppunit/NotEqualException.h:
* src/cppunit/NotEqualException.cpp: removed.

* include/cppunit/Exception.h:
* src/cppunit/Exception.cpp: removed 'type' related stuffs.

* include/cppunit/TextTestResult.h:
* src/cppunit/TextTestResult.cpp: delegate printing to TextOutputter.

* examples/simple/ExampleTestCase.h:
* examples/simple/ExampleTestCase.cpp: reindented.

* src/qttestrunner/build:
* src/qttestrunner/qttestrunner.pro:
* src/qttestrunner/TestBrowserDlgImpl.h:
* src/qttestrunner/TestRunnerModel.h: applied Thomas Neidhart's patch,
  'Some minor fixes to compile QTTestrunner under Linux.'.
@
text
@#include "CoreSuite.h"
#include "NotEqualExceptionTest.h"
#include <cppunit/NotEqualException.h>


CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( NotEqualExceptionTest,
                                       CppUnitTest::coreSuiteName() );


NotEqualExceptionTest::NotEqualExceptionTest()
{
}


NotEqualExceptionTest::~NotEqualExceptionTest()
{
}


void 
NotEqualExceptionTest::setUp()
{
}


void 
NotEqualExceptionTest::tearDown()
{
}



void 
NotEqualExceptionTest::testConstructor()
{
  std::string expectedValue( "expectedValue" );
  std::string actualValue( "actualValue" );
  std::string message( "message" );
  CppUnit::NotEqualException e( expectedValue, 
                                actualValue, 
                                CppUnit::SourceLine( "f.cpp", 123), 
                                message );

  CPPUNIT_ASSERT_EQUAL( expectedValue, e.expectedValue() );
  CPPUNIT_ASSERT_EQUAL( actualValue, e.actualValue() );
  CPPUNIT_ASSERT_EQUAL( message, e.additionalMessage() );
  CPPUNIT_ASSERT( CppUnit::SourceLine( "f.cpp", 123) == e.sourceLine() );

  CppUnit::Message expectedMessage( "equality assertion failed",
                                    "Expected: " + expectedValue,
                                    "Actual  : " + actualValue,
                                    message );
  CppUnit::Message actualMessage( e.message() );
  CPPUNIT_ASSERT( expectedMessage == actualMessage );
}


void 
NotEqualExceptionTest::testClone()
{
  CppUnit::NotEqualException e( "expectedValue", 
                                "actualValue", 
                                CppUnit::SourceLine("file.cpp", 2),
                                "add-message" );
  std::auto_ptr<CppUnit::NotEqualException> 
      other( (CppUnit::NotEqualException *)e.clone() );
  CPPUNIT_ASSERT_EQUAL( std::string( e.what() ),
                        std::string( other->what() ) );
}


void 
NotEqualExceptionTest::testIsInstanceOf()
{
  CppUnit::NotEqualException e( "expectedValue", "actualValue" );
  CPPUNIT_ASSERT( e.isInstanceOf( CppUnit::NotEqualException::type() ) );
  CPPUNIT_ASSERT( e.isInstanceOf( CppUnit::Exception::type() ) );
}


void 
NotEqualExceptionTest::testAssignment()
{
  CppUnit::NotEqualException e( "expectedValue", 
                                "actualValue", 
                                CppUnit::SourceLine("file.cpp", 2),
                                "add-message" );
  CppUnit::NotEqualException other( "", "" );
  other = e;
  CPPUNIT_ASSERT_EQUAL( std::string( e.what() ),
                        std::string( other.what() ) );
}
@


1.4
log
@* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: added functions that take a Message as a
  parameter. Existing function have a short description indicating
  an assertion failure.

* include/cppunit/CompilerOuputter.h:
* src/cppunit/CompilerOuputter.cpp: removed printNotEqualMessage() and
  printDefaultMessage(). Updated to use Message.

* include/cppunit/Message.h:
* src/cppunit/Message.cpp: added. Represents a message associated to an
  Exception.

* include/cppunit/Exception.h:
* src/cppunit/Exception.cpp: the message associated to the exception is now
  stored as a Message instead of a string.

* include/cppunit/NotEqualException.cpp: constructs a Message instead of a
  string.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: updated to use Asserter functions that
  take a message when pertinent (CPPUNIT_FAIL...).

* include/cppunit/TestCaller.h:
* src/cppunit/TestCaller.cpp: exception not caught failure has a better
  short description.

* src/cppunit/TestCase.cpp: better short description when setUp() or
  tearDown() fail.

* src/msvc6/testrunner/TestRunnerDlg.cpp: replace '\n' in failure message
  with space.

* examples/cppunittest/ExceptionTest.cpp:
* examples/cppunittest/NotEqualExceptionTest.cpp:
* examples/cppunittest/TestCallerTest.cpp:
* examples/cppunittest/TestFailureTest.cpp:
* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp:
* examples/cppunittest/TestResultTest.cpp:
* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: updated to use Exception/Message.

* examples/cppunittest/MessageTest.h:
* examples/cppunittest/MessageTest.cpp: added. Unit test for Message.
@
text
@@


1.3
log
@* include/cppunit/Asserter.h :
* src/cppunit/Asserter.cpp : added. Helper to create assertion macros.

* src/cppunit/cppunit.dsp :
* src/cppunit/Makefile.am :
* include/cppunit/Makefile.am : added Asserter.h and Asserter.cpp.

* include/cppunit/Exception.h :
* src/cppunit/Exception.cpp : added constructor that take a
SourceLine argument. Deprecated static constant and old constructor.
Fixed some constness issues.

* examples/cppunittest/ExceptionTest.cpp : Refactored.

* NEWS : partially updated (need to be more detailed)

* include/cppunit/NotEqualException.h :
* src/cppunit/NotEqualException.cpp : added constructor that take a
SourceLine argument. Deprecated old constructor. Added a third element
to compose message.

* examples/cppunittest/NotEqualExceptionTest.cpp : moved to "Core"
suite. Added test for SourceLine() and additionalMessage().
Refactored.

* include/cppunit/SourceLine.h :
* src/cppunit/SourceLine.cpp : added. Result of applying
IntroduceParameterObject refactoring on filename & line number...

* include/cppunit/TestAssert.h :
* src/cppunit/TestAssert.cpp : deprecated old assert functions.
added functions assertEquals() and assertDoubleEquals() which use
SourceLine.

* src/cppunit/TestCase.cpp : Modified for SourceLine.

* include/cppunit/TestFailure.h :
* src/cppunit/TestFailure.cpp : added failedTestName(), and
sourceLine().

* src/msvc6/testrunner/TestRunnerDlg.cpp : modified to use SourceLine.

* include/cppunit/TextTestResult.h :
* src/cppunit/TextTestResult.cpp : corrected include order and
switched to angled brackets. Refactored. Don't print failure location
if not available. Not equal failure dump additional message if
available.

* src/cppunit/TextTestRunner.cpp : run() now returns a boolean to
indicate if the run was sucessful.

* src/cppunit/XmlTestResultOutputter.cpp : replaced itoa() with
OStringStream. Refactored.

* examples/cppunittest/XmlUniformiser.h :
* examples/cppunittest/XmlUniformiser.cpp :
CPPUNITTEST_ASSERT_XML_EQUAL capture failure location. Refactored
checkXmlEqual().

* examples/cppunittest/XmlUniformiserTest.h :
* examples/cppunittest/XmlUniformiserTest.cpp : added test for
CPPUNITTEST_ASSERT_XML_EQUAL.

* include/cppunit/XmlTestResultOutputter.h :
* src/cppunit/XmlTestResultOutputter.cpp : updated to use SourceLine.
@
text
@d49 6
a54 3
  std::string expectedMessage( "Expected: expectedValue, but was: actualValue.message" );
  std::string actualMessage( e.what() );
  CPPUNIT_ASSERT_EQUAL( expectedMessage, actualMessage );
@


1.2
log
@* examples/cppunittest/OrthodoxTest.*: operator ! use explicit construction.
@
text
@d1 1
d6 2
a7 1
CPPUNIT_TEST_SUITE_REGISTRATION( NotEqualExceptionTest );
d38 5
a42 1
  CppUnit::NotEqualException e( expectedValue, actualValue );
d46 2
d49 1
a49 1
  std::string expectedMessage( "Expected: expectedValue, but was: actualValue" );
d58 4
a61 1
  CppUnit::NotEqualException e( "expectedValue", "actualValue" );
d81 4
a84 1
  CppUnit::NotEqualException e( "expectedValue", "actualValue" );
@


1.1
log
@* examples/cppunittest/NotEqualExceptionTest.*: added unit tests for
NotEqualException.
@
text
@d4 1
@

