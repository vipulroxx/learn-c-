head	1.10;
access;
symbols
	REL_1_12_1:1.10
	REL_1_11_6:1.10
	REL_1_11_4:1.10
	REL_1_11_0:1.10
	TG_CPPUNIT_NO_STREAM_AFTER:1.9
	TG_CPPUNIT_NO_STREAM_BEFORE:1.9
	REL_1_10_2:1.9
	REL_1_10_0:1.9
	REL_1_9_14:1.9
	REL_1_9_12:1.9
	BRANCH_1_9_12:1.9.0.2
	TG_BRANCH_1_9_12:1.9
	TG_BEFORE_HPUX_PLUGIN:1.9
	TG_BEFORE_SUN4_PORT:1.9
	REL_1_9_10:1.9
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.8
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.8
	REL_1_9_6:1.8
	REL_1_9_4:1.8
	REL_1_9_0:1.8
	REL_1_8_0:1.8
	REL_1_7_8:1.7
	REL_1_7_3:1.7
	REL_1_7_1:1.7
	REL_1_6_2:1.7
	BRANCH_1_6:1.7.0.2
	REL_1_6_1:1.7
	REL_1_6_0:1.7
	REL_1_5_5:1.6
	REL_1_5_4:1.3
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2005.02.23.07.34.40;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2002.07.10.18.50.02;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.27.17.56.44;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.02.22.29.52;	author smr99;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.06.20.04.02;	author bastiaan;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.06.17.20.00;	author bastiaan;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.19.20.39.44;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.13.16.44.48;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.11.18.54.24;	author e-s;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.29;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.29;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* examples/hierarchy/BoardGameTest.h:
* examples/hierarchy/ChessTest.h: fixed compilation issue, prefixed access
  to class member with 'this' (inheriting from template parameter
  dependent class).
@
text
@#ifndef __CHESSTEST_H__
#define __CHESSTEST_H__

#include "BoardGameTest.h"

template<class GAMECLASS> 
class ChessTest : public BoardGameTest<GAMECLASS> 
{
  CPPUNIT_TEST_SUB_SUITE( ChessTest, BoardGameTest<GAMECLASS> );
  CPPUNIT_TEST( testNumberOfPieces );
  CPPUNIT_TEST_SUITE_END();
public:
  ChessTest() 
  {
  }
  
  void testNumberOfPieces()
  { 
    CPPUNIT_ASSERT( this->m_game->getNumberOfPieces () == 32 );
  }
};



#endif
@


1.9
log
@* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/Orthodox.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h:
* include/cppunit/TestCaller.h:
* examples/hierarchy/BoardGameTest.h:
* examples/hierarchy/ChessTest.h: replaced usage of 'typename' in template
  declaration with 'class'.

* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to use the generic TestRunner.
  Removed methods runTestByName() and runTest(). Inherits
  CppUnit::TestRunner.

* include/cppunit/extensions/TestSuiteBuilder.h: removed templatized method
  addTestCallerForException(). It is no longer used since release 1.9.8.

* examples/cppunittest/MockTestCase.h
* examples/cppunittest/MockTestCase.cpp: removed the usage of 'mutable'
  keyword.
@
text
@d19 1
a19 1
    CPPUNIT_ASSERT( m_game->getNumberOfPieces () == 32 );
@


1.8
log
@* makefile.am: added src/CppUnitLibraries.dsw, new contribution, and
src/qttestrunner.

* TODO: updated (doc).

* contrib/msvc/AddingUnitTestMethod.dsm: added, submitted by
bloodchen@@hotmail.com.

* constrib/msvc/readme.txt: updated.

* include/cppunit/TestAsserter.h:
* include/cppunit/SourceLine.h: updated doc.

* include/cppunit/TestCaller.h: reindented. updated doc.

* include/cppunit/extensions/HelperMacros.h: relaxed constraint on fixture.
Fixture base class may be TestFixture instead of TestCase.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.h: TestCase inherits TestFixture for setUp() and
tearDown() definition. Moved documentation to TestFixture.

* include/cppunit/TestFixture.h: updated documentation.

* include/cppunit/TestRegistry.h:
* src/cppunit/TestRegistry.cpp: Removed. Replaced by TestFactoryRegistry.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: made printing progress using a
TextTestProgressListener optional.

* examples\cppunittest\ExceptionTest.h:
* examples\cppunittest\HelperMacrosTest.h:
* examples\cppunittest\HelperMacrosTest.cpp:
* examples\cppunittest\NotEqualException.h:
* examples\cppunittest\OrthodoxTest.h:
* examples\cppunittest\RepeatedTest.h:
* examples\cppunittest\TestAssertTest.h:
* examples\cppunittest\TestCallerTest.h:
* examples\cppunittest\TestDecoratorTest.h:
* examples\cppunittest\TestFailureTest.h:
* examples\cppunittest\TestResultCollectorTest.h:
* examples\cppunittest\TestResultTest.h:
* examples\cppunittest\TestSetUpTest.h:
* examples\cppunittest\TestSuiteTest.h:
* examples\cppunittest\XmlOutputterTest.h:
* examples\cppunittest\XmlOutputterTest.cpp:
* examples\cppunittest\XmlUniformizerTest.h:
* examples\cppunittest\XmlUniformizerTest.cpp: changed base class for fixture
from TestCase to TestFixture.

* examples\hierarchy\BoardGameTest.h:
* examples\hierarchy\ChessTest.h:
* examples\hierarchy\main.cpp: updated to use HelperMacros for correct
fixture instantiation (the ChessBoard::testReset test case was using
BoardGame fixture instance instead of ChessBoard).
@
text
@d6 1
a6 1
template<typename GAMECLASS> 
@


1.7
log
@Change to templatized TestAssert::assertEquals() and the new CPPUNIT_ASSERT* macros
@
text
@d7 14
a20 22
class ChessTest : public BoardGameTest<GAMECLASS> {
  public:
    ChessTest (std::string name) : BoardGameTest<GAMECLASS> (name) 
    {
    }
    
    void registerTests(CppUnit::TestSuite *suite) 
    {
      BoardGameTest<GAMECLASS>::registerTests(suite);
      suite->addTest (
        new CppUnit::TestCaller<ChessTest<GAMECLASS> > ("testNumberOfPieces", 
          &ChessTest<GAMECLASS>::testNumberOfPieces, *this));
    }

    ChessTest() 
    {
    }
    
    void testNumberOfPieces () 
    { 
      CPPUNIT_ASSERT (m_game->getNumberOfPieces () == 32); 
    }
@


1.6
log
@Added constructors to TestCaller which accept an already constucted Fixture.
@
text
@d27 1
a27 1
      assert (m_game->getNumberOfPieces () == 32); 
@


1.5
log
@use 'typename' in templates, instead of 'class'.
give complete types in registerTests().
@
text
@d18 1
a18 1
          &ChessTest<GAMECLASS>::testNumberOfPieces));
@


1.4
log
@Added MSVC++ workspace and project files.
@
text
@d6 1
a6 1
template<class GAMECLASS> 
d17 1
a17 1
        new CppUnit::TestCaller<ChessTest> ("testNumberOfPieces", 
@


1.3
log
@Merged patch #403542 by Tim Jansen <timj@@systembureau.com>.
Fixes bug #220207: "const" problem with countTestCases.
Fixes 'TestSuite::deleteContent() clear vector'
Fixes 'Fix: TestCaller registered Fixture' (see patch #403541).
Fixes bug #415219: example did not test anything.
@
text
@d9 1
a9 1
    ChessTest (string name) : BoardGameTest<GAMECLASS> (name) 
@


1.2
log
@Makefile for all examples.
@
text
@d13 3
a15 2
    ChessTest (CppUnit::TestSuite *suite) : BoardGameTest<GAMECLASS> (suite) 
    { 
d17 6
a22 1
        new CppUnit::TestCaller<ChessTest> ("testNumberOfPieces", testNumberOfPieces));
d27 1
a27 1
      assert (m_game->numberOfPieces () == 32); 
@


1.1
log
@Initial revision
@
text
@d13 1
a13 1
    ChessTest (TestSuite *suite) : BoardGameTest<GAMECLASS> (suite) 
d16 1
a16 1
        new TestCaller<ChessTest> ("testNumberOfPieces", testNumberOfPieces));
@


1.1.1.1
log
@initial check in.
@
text
@@
