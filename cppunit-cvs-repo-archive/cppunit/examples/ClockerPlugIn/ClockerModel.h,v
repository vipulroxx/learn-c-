head	1.2;
access;
symbols
	REL_1_12_1:1.2
	REL_1_11_6:1.2
	REL_1_11_4:1.2
	REL_1_11_0:1.2
	TG_CPPUNIT_NO_STREAM_AFTER:1.2
	TG_CPPUNIT_NO_STREAM_BEFORE:1.2
	REL_1_10_2:1.2
	REL_1_10_0:1.2
	REL_1_9_14:1.2
	REL_1_9_12:1.2
	BRANCH_1_9_12:1.2.0.2
	TG_BRANCH_1_9_12:1.2
	TG_BEFORE_HPUX_PLUGIN:1.2
	TG_BEFORE_SUN4_PORT:1.2
	REL_1_9_10:1.2;
locks; strict;
comment	@ * @;


1.2
date	2002.07.14.19.48.31;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.14.20.21.00;	author blep;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* CodingGuideLines.txt: added. CppUnit's coding guidelines for portability.

* include/cppunit/portability/CppUnitStack.h: added. wrapper for std::stack.

* include/cppunit/portability/CppUnitSet.h: added. wrapper for std::set.

* include/cppunit/ui/text/TestRunner.h: fixed namespace definition for
  deprecated TestRunner.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: removed old deprecated functions that did
  not use SourceLine. Moved assertEquals() and assertDoubleEquals() into
  CppUnit namespace.

* src/cppunit/TestFactoryRegistry.cpp: use CppUnitMap instead of std::map.

* src/DllPlugInTester/CommandLineParser.h: use CppUnitDeque instead
  std::deque.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp: removed all usage of CppUnitTest namespace.
  Everything is now in global space.

* examples/*/*.h:
* examples/*/*.cpp: replaced usage of CppUnit:: with CPPUNIT_NS::.

* examples/ClockerPlugIn/ClockerModel.h: use CppUnit STL wrapper instead
  of STL container.
@
text
@// //////////////////////////////////////////////////////////////////////////
// Header file ClockerModel.h for class ClockerModel
// (c)Copyright 2000, Baptiste Lepilleur.
// Created: 2002/06/14
// //////////////////////////////////////////////////////////////////////////
#ifndef CLOCKERMODEL_H
#define CLOCKERMODEL_H

#include <cppunit/TestPath.h>
#include <cppunit/portability/CppUnitVector.h>
#include <cppunit/portability/CppUnitMap.h>
#include <cppunit/portability/CppUnitStack.h>
#include <string>

#ifdef CLOCKER_USE_WINNTTIMER
#include "WinNtTimer.h"
typedef WinNtTimer Timer;
#else
#include "Timer.h"
#endif


/// Model that represents test timing.
class ClockerModel
{
public:
  /*! Constructs a ClockerModel object.
   */
  ClockerModel();

  /// Destructor.
  virtual ~ClockerModel();

  void setExpectedTestCount( int count );

  void enterTest( CPPUNIT_NS::Test *test,
                  bool isSuite );

  void exitTest( CPPUNIT_NS::Test *test,
                 bool isSuite );

  double totalElapsedTime() const;

  double averageTestCaseTime() const;

  double testTimeFor( CPPUNIT_NS::Test *test ) const;

  double testTimeFor( int testIndex ) const;

  static std::string timeStringFor( double time );

  bool isSuite( int testIndex ) const;

  const CPPUNIT_NS::TestPath &testPathFor( int testIndex ) const;

  // -1 is none
  int indexOf( CPPUNIT_NS::Test *test ) const;

  int childCountFor( int testIndex ) const;

  int childAtFor( int testIndex, 
                  int chidIndex ) const;

private:
  struct TestInfo
  {
    CPPUNIT_NS::TestPath m_path;
    Timer m_timer;
    bool m_isSuite;
    CppUnitVector<int> m_childIndexes;
  };

  /// Prevents the use of the copy constructor.
  ClockerModel( const ClockerModel &other );

  /// Prevents the use of the copy operator.
  void operator =( const ClockerModel &other );

private:
  CPPUNIT_NS::TestPath m_currentPath;
  
  int m_testCaseCount;
  double m_totalTestCaseTime;

  typedef CppUnitMap<CPPUNIT_NS::Test *, int> TestToIndexes;
  
  TestToIndexes m_testToIndexes;
  CppUnitStack<int> m_testIndexes;
  CppUnitVector<TestInfo> m_tests;
};




#endif  // CLOCKERMODEL_H
@


1.1
log
@* include/cppunit/plugin/PlugInManager.h:
* src/cppunit/PlugInManager.cpp: added two methods to use the plug-in
  interface for Xml Outputter hooks.

* include/cppunit/plugin/TestPlugIn.h: added two methods to the plug-in
  interface for Xml Outputter hooks.

* include/cppunit/plugin/TestPlugInAdapter.h:
* src/cppunit/plugin/TestPlugInAdapter.cpp: renamed TestPlugInDefaultImpl.
  Added empty implementation for Xml outputter hook methods.

* include/cppunit/tools/StringTools.h:
* src/cppunit/tools/StringTools.cpp: added. Functions to manipulate string
  (conversion, wrapping...)

* include/cppunit/tools/XmlElement.h:
* src/cppunit/XmlElement.cpp: renamed addNode() to addElement(). Added
  methods to walk and modify XmlElement (for hook). Added documentation.
  Use StringTools.

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: added hook calls & management.

* include/cppunit/XmlOutputterHook.h:
* src/cppunit/XmlOutputterHook.cpp: added. Hook to customize XML output.

* src/DllPlugInTester/DllPlugInTester.cpp: call plug-in XmlOutputterHook
  when writing XML output. Modified so that memory is freed before
  unloading the test plug-in (caused crash when freeing the XmlDocument).

* examples/ReadMe.txt:
* examples/ClockerPlugIn/ReadMe.txt: added details about the plug-in
  (usage, xml content...)

* examples/ClockerPlugIn/ClockerModel.h:
* examples/ClockerPlugIn/ClockerModel.cpp: extracted from ClockerListener.
  Represents the test hierarchy and tracked time for each test.

* examples/ClockerPlugIn/ClockerListener.h:
* examples/ClockerPlugIn/ClockerListener.cpp: extracted test hierarchy
  tracking to ClockerModel. Replaced the 'flat' view option with a 'text'
  option to print the timed test tree to stdout.

* examples/ClockerPlugIn/ClockerPlugIn.cpp: updated to hook the XML
  output and use the new classes.

* examples/ClockerPlugIn/ClockerXmlHook.h:
* examples/ClockerPlugIn/ClockerXmlHook.cpp: added. XmlOutputterHook to
  includes the timed test hierarchy and test timing in the XML output.

* examples/cppunittest/XmlElementTest.h:
* examples/cppunittest/XmlElementTest.cpp: added new test cases.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: added tests for
  XmlOutputterHook.
@
text
@d10 3
a12 2
#include <map>
#include <stack>
a13 1
#include <vector>
d36 1
a36 1
  void enterTest( CppUnit::Test *test,
d39 1
a39 1
  void exitTest( CppUnit::Test *test,
d46 1
a46 1
  double testTimeFor( CppUnit::Test *test ) const;
d54 1
a54 1
  const CppUnit::TestPath &testPathFor( int testIndex ) const;
d57 1
a57 1
  int indexOf( CppUnit::Test *test ) const;
d67 1
a67 1
    CppUnit::TestPath m_path;
d70 1
a70 1
    std::vector<int> m_childIndexes;
d80 1
a80 1
  CppUnit::TestPath m_currentPath;
d85 1
a85 1
  typedef std::map<CppUnit::Test *, int> TestToIndexes;
d88 2
a89 2
  std::stack<int> m_testIndexes;
  std::vector<TestInfo> m_tests;
@

