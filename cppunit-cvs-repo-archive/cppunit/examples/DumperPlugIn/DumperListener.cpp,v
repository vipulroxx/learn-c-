head	1.4;
access;
symbols
	REL_1_12_1:1.4
	REL_1_11_6:1.4
	REL_1_11_4:1.4
	REL_1_11_0:1.4
	TG_CPPUNIT_NO_STREAM_AFTER:1.4
	TG_CPPUNIT_NO_STREAM_BEFORE:1.2
	REL_1_10_2:1.2
	REL_1_10_0:1.2
	REL_1_9_14:1.2
	REL_1_9_12:1.2
	BRANCH_1_9_12:1.2.0.2
	TG_BRANCH_1_9_12:1.2
	TG_BEFORE_HPUX_PLUGIN:1.2
	TG_BEFORE_SUN4_PORT:1.2
	REL_1_9_10:1.2
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1
	REL_1_9_6:1.1;
locks; strict;
comment	@// @;


1.4
date	2004.06.25.11.11.42;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.25.10.41.26;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.14.19.48.31;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.20.21.51.32;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* include/cppunit/Portability.h: moved OStringStream alias definition to
  Portability/Stream.h. User need to define EVC4 to indicate that
  config-evc4.h should be used. (how to we detect this automatically ?).
  Notes that this means it might be needed to add #include <string> to some
  headers since its no longer included by Portability.h.

* include/cppunit/Portability/Stream.h: define alias OStringStream, stdCOut(),
  and OFileStream. If CPPUNIT_NO_STREAM is defined (evc4 config), then provides
  our own implementation (based on sprintf and fwrite).

* include/cppunit/config/config-evc4.h: config file for embedded visual c++ 4.
  Still need to detect for this platform in Portability.h (currently relying on
  EVC4 being defined...)

* *.[cpp/h]: most source files have been impacted with the following change:
  #include <iostream> -> #include <cppunit/Portability/Stream.h>
  std::ostream -> CPPUNIT_NS::OStream
  std::ofstream -> CPPUNIT_NS::OFileStream
  std::cout -> CPPUNIT_NS::stdCOut()
  std::endl -> "\n"
  Also, code using std::cin as been defined out if CPPUNIT_NO_STREAM was defined.
  The exact list of impact files can be obtain in CVS using tags:
  TG_CPPUNIT_NO_STREAM_BEFORE & TG_CPPUNIT_NO_STREAM_AFTER.
@
text
@// //////////////////////////////////////////////////////////////////////////
// Implementation file DumperListener.cpp for class DumperListener
// (c)Copyright 2000, Baptiste Lepilleur.
// Created: 2002/04/19
// //////////////////////////////////////////////////////////////////////////
#include <cppunit/Test.h>
#include <cppunit/portability/Stream.h>
#include "DumperListener.h"

DumperListener::DumperListener( bool flatten )
    : m_flatten( flatten )
    , m_suiteCount( 0 )
    , m_testCount( 0 )
    , m_suiteWithTestCount( 0 )
{
}


DumperListener::~DumperListener()
{
}


void 
DumperListener::startTest( CPPUNIT_NS::Test *test )
{
  printPath( test, false );
  ++m_testCount;
}


void 
DumperListener::endTest( CPPUNIT_NS::Test *test )
{
  m_path.up();
  if ( !m_suiteHasTest.empty() )
  {
    m_suiteHasTest.pop();
    m_suiteHasTest.push( true );
  }
}


void 
DumperListener::startSuite( CPPUNIT_NS::Test *suite )
{
  printPath( suite, true );
  ++m_suiteCount;
  m_suiteHasTest.push( false );
}


void 
DumperListener::endSuite( CPPUNIT_NS::Test *suite )
{
  m_path.up();
  if ( m_suiteHasTest.top() )
    ++m_suiteWithTestCount;
  m_suiteHasTest.pop();
}


void 
DumperListener::endTestRun( CPPUNIT_NS::Test *test, 
                            CPPUNIT_NS::TestResult *eventManager )
{
  double average = 0;
  if ( m_suiteWithTestCount > 0 )
    average = double(m_testCount) / m_suiteWithTestCount;

  CPPUNIT_NS::stdCOut() 
            << "Statistics: "  <<  m_testCount  <<  " test cases, "
            << m_suiteCount << " suites, "
            << average << " test cases / suite with test cases"
            << "\n";
}


void 
DumperListener::printPath( CPPUNIT_NS::Test *test, 
                           bool isSuite )
{
  m_path.add( test );

  if ( m_flatten )
    printFlattenedPath( isSuite );
  else
    printIndentedPathChild();
}


void 
DumperListener::printFlattenedPath( bool isSuite )
{
  std::string path = m_path.toString();
  if ( isSuite )
    path += "/";
  CPPUNIT_NS::stdCOut()  <<  path  <<  "\n";
}


void 
DumperListener::printIndentedPathChild()
{
  std::string indent = makeIndentString( m_path.getTestCount() -1 );
  CPPUNIT_NS::stdCOut()  <<  indent  <<  m_path.getChildTest()->getName()  <<  "\n";
}


std::string 
DumperListener::makeIndentString( int indentLevel )
{
  std::string indent;
  for ( int parentIndent =0; parentIndent < indentLevel-1; ++parentIndent )
    indent += "|  ";
  
  if ( indentLevel > 0 )
    indent += "+--";

  return indent;
}
@


1.3
log
@* include/cppunit/Portability.h: moved OStringStream alias definition to
  Portability/Stream.h. User need to define EVC4 to indicate that
  config-evc4.h should be used. (how to we detect this automatically ?).
  Notes that this means it might be needed to add #include <string> to some
  headers since its no longer included by Portability.h.

* include/cppunit/Portability/Stream.h: define alias OStringStream, stdCOut(),
  and OFileStream. If CPPUNIT_NO_STREAM is defined (evc4 config), then provides
  our own implementation (based on sprintf and fwrite).

* include/cppunit/config/config-evc4.h: config file for embedded visual c++ 4.
  Still need to detect for this platform in Portability.h (currently relying on
  EVC4 being defined...)

* *.[cpp/h]: most source files have been impacted with the following change:
  #include <iostream> -> #include <cppunit/Portability/Stream.h>
  std::ostream -> CPPUNIT_NS::OStream
  std::ofstream -> CPPUNIT_NS::OFileStream
  std::cout -> CPPUNIT_NS::stdCOut()
  std::endl -> "\n"
  Also, code using std::cin as been defined out if CPPUNIT_NO_STREAM was defined.
  The exact list of impact files can be obtain in CVS using tags:
  TG_CPPUNIT_NO_STREAM_BEFORE & TG_CPPUNIT_NO_STREAM_AFTER.
@
text
@d7 1
a7 1
#include <cppunit/Portability/Stream.h>
@


1.2
log
@* CodingGuideLines.txt: added. CppUnit's coding guidelines for portability.

* include/cppunit/portability/CppUnitStack.h: added. wrapper for std::stack.

* include/cppunit/portability/CppUnitSet.h: added. wrapper for std::set.

* include/cppunit/ui/text/TestRunner.h: fixed namespace definition for
  deprecated TestRunner.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: removed old deprecated functions that did
  not use SourceLine. Moved assertEquals() and assertDoubleEquals() into
  CppUnit namespace.

* src/cppunit/TestFactoryRegistry.cpp: use CppUnitMap instead of std::map.

* src/DllPlugInTester/CommandLineParser.h: use CppUnitDeque instead
  std::deque.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp: removed all usage of CppUnitTest namespace.
  Everything is now in global space.

* examples/*/*.h:
* examples/*/*.cpp: replaced usage of CppUnit:: with CPPUNIT_NS::.

* examples/ClockerPlugIn/ClockerModel.h: use CppUnit STL wrapper instead
  of STL container.
@
text
@d7 1
a7 1
#include <iostream>
d71 2
a72 1
  std::cout << "Statistics: "  <<  m_testCount  <<  " test cases, "
d75 1
a75 1
            << std::endl;
d98 1
a98 1
  std::cout  <<  path  <<  std::endl;
d106 1
a106 1
  std::cout  <<  indent  <<  m_path.getChildTest()->getName()  <<  std::endl;
@


1.1
log
@* THANKS: updated

* src/cppunit/DynamicLibraryManager.cpp: bugfix: did not pass
  library name to exception.

* include/cppunit/TestPath.h:
* src/cppunit/TestPath.cpp: changed into value object.

* src/cppunit/BeosDynamicLibraryManager.cpp: integrated patch from
  Shibu Yoshiki for BeOS ('cuppa' project team).

* src/DllPlugInTester/CommandLineParser.h:
* src/DllPlugInTester/CommandLineParser.cpp: added. Command line
  parsing.

* src/DllPlugInTester/DllPlugInTester.cpp: full command line support
  with parameters for plug-ins.

* src/DllPlugInTester/makefile.am:
* examples/simple/makefile.am:
* examples/cppunittest/makefile.am: integrated Jeffrey Morgan patch,
  Unix side should be working again.

* examples/ReadMe.txt: added. Brief description of each example.

* examples/cppunittest/CppUnitTestPlugIn.cpp:
* examples/cppunittest/CppUnitTestPlugIn.dsp: added. New project to
  build CppUnit's test suite as a test plug-in.

* examples/cppunittest/CppUnitTestSuite.cpp: updated. Use new
  helper macros to create the test suite hierarchy.

* examples/simple/simple_plugin.opt: added. Contains debug tab
  settings.

* examples/ClockerPlugIn/ClockerListener.cpp:
* examples/ClockerPlugIn/ClockerListener.h:
* examples/ClockerPlugIn/Timer.cpp:
* examples/ClockerPlugIn/Timer.h:
* examples/ClockerPlugIn/WinNtTimer.cpp:
* examples/ClockerPlugIn/WinNtTimer.h:
* examples/ClockerPlugIn/ClockerPlugIn.cpp:
* examples/ClockerPlugIn/ClockerPlugIn.dsp: added. test listener
  plug-in that times tests.

* examples/DumperPlugIn/DumperListener.cpp:
* examples/DumperPlugIn/DumperListener.h:
* examples/DumperPlugIn/DumperPlugIn.cpp:
* examples/DumperPlugIn/DumperPlugIn.dsp: added. test listener
  plug-in that dump the test tree.
@
text
@d25 1
a25 1
DumperListener::startTest( CppUnit::Test *test )
d33 1
a33 1
DumperListener::endTest( CppUnit::Test *test )
d45 1
a45 1
DumperListener::startSuite( CppUnit::Test *suite )
d54 1
a54 1
DumperListener::endSuite( CppUnit::Test *suite )
d64 2
a65 2
DumperListener::endTestRun( CppUnit::Test *test, 
                            CppUnit::TestResult *eventManager )
d79 1
a79 1
DumperListener::printPath( CppUnit::Test *test, 
@

