head	1.4;
access;
symbols
	REL_1_12_1:1.4
	REL_1_11_6:1.4
	REL_1_11_4:1.4
	REL_1_11_0:1.3
	TG_CPPUNIT_NO_STREAM_AFTER:1.3
	TG_CPPUNIT_NO_STREAM_BEFORE:1.3
	REL_1_10_2:1.3
	REL_1_10_0:1.3
	REL_1_9_14:1.3
	REL_1_9_12:1.3
	BRANCH_1_9_12:1.3.0.2
	TG_BRANCH_1_9_12:1.3
	TG_BEFORE_HPUX_PLUGIN:1.2
	TG_BEFORE_SUN4_PORT:1.1
	REL_1_9_10:1.1
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1
	REL_1_9_6:1.1;
locks; strict;
comment	@ * @;


1.4
date	2005.10.13.21.25.39;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2003.05.07.21.13.38;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2003.03.11.21.25.17;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.21.10.57.52;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* removed most warning when compiling with vc++ 6sp6.
* added assert equal usage
@
text
@// Money.h
#ifndef MONEY_H
#define MONEY_H

#include <string>
#include <stdexcept>
#include <cppunit/portability/Stream.h>    // or <iostream> if portability is not an issue

class IncompatibleMoneyError : public std::runtime_error
{
public:
   IncompatibleMoneyError() : std::runtime_error( "Incompatible moneys" )
  {
  }
};


class Money
{
public:
  Money( double amount, std::string currency )
    : m_amount( amount )
    , m_currency( currency )
  {
  }

  double getAmount() const
  {
    return m_amount;
  }

  std::string getCurrency() const
  {
    return m_currency;
  }

  bool operator ==( const Money &other ) const
  {
    return m_amount == other.m_amount  &&  
           m_currency == other.m_currency;
  }

  bool operator !=( const Money &other ) const
  {
    return !(*this == other);
  }

  Money &operator +=( const Money &other )
  {
    if ( m_currency != other.m_currency )
      throw IncompatibleMoneyError();

    m_amount += other.m_amount;
    return *this;
  }

private:
  double m_amount;
  std::string m_currency;
};


// The function below could be prototyped as:
// inline std::ostream &operator <<( std::ostream &os, const Money &value )
// If you know that you will never compile on a platform without std::ostream
// (such as embedded vc++ 4.0; though even that platform you can use STLPort)
inline CPPUNIT_NS::OStream &operator <<( CPPUNIT_NS::OStream &os, const Money &value )
{
    return os << "Money< value =" << value.getAmount() << "; currency = " << value.getCurrency() << ">";
}


#endif
@


1.3
log
@* added new lines
@
text
@d7 1
d62 11
@


1.2
log
@* src/examples/cppunittest/TrackedTestCase.cpp:
* src/examples/cppunittest/CppUnitTestMain.cpp:
* src/examples/money/Money.h: partially applied patch #699794. Fixed
compilation issues with Borland C++ 6.
@
text
@d61 1
a61 1
#endif@


1.1
log
@* src/DllPlugInTester/makefile.am: removed ld.so from LDADD flags.

* src/DllPlugInTester/CommandLineParser.h:
* src/DllPlugInTester/CommandLineParser.cpp: rewrote, fixed problem
  with double quotes in command line...

* src/DllPlugInTester/CommandLineParserTest.h:
* src/DllPlugInTester/CommandLineParserTest.cpp:
* src/DllPlugInTester/DllPlugInTesterTest.cpp: added, unit tests for
  CommandLineParser.

* src/msvc6/TestPlugIn/*: removed.
@
text
@d11 1
a11 1
  IncompatibleMoneyError() : runtime_error( "Incompatible moneys" )
@

