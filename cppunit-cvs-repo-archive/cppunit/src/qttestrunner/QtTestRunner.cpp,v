head	1.1;
access;
symbols
	REL_1_12_1:1.1
	REL_1_11_6:1.1
	REL_1_11_4:1.1
	REL_1_11_0:1.1
	TG_CPPUNIT_NO_STREAM_AFTER:1.1
	TG_CPPUNIT_NO_STREAM_BEFORE:1.1
	REL_1_10_2:1.1
	REL_1_10_0:1.1
	REL_1_9_14:1.1
	REL_1_9_12:1.1
	BRANCH_1_9_12:1.1.0.2
	TG_BRANCH_1_9_12:1.1
	TG_BEFORE_HPUX_PLUGIN:1.1
	TG_BEFORE_SUN4_PORT:1.1
	REL_1_9_10:1.1;
locks; strict;
comment	@// @;


1.1
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@// //////////////////////////////////////////////////////////////////////////
// Implementation file QtTestRunner.cpp for class QtTestRunner
// (c)Copyright 2000, Baptiste Lepilleur.
// Created: 2001/09/19
// //////////////////////////////////////////////////////////////////////////

#include <qapplication.h>
#include <cppunit/TestSuite.h>
#include <cppunit/ui/qt/QtTestRunner.h>
#include "TestRunnerDlgImpl.h"
#include "TestRunnerModel.h"


CPPUNIT_NS_BEGIN

QtTestRunner::QtTestRunner() :
  _suite( new CPPUNIT_NS::TestSuite( "All Tests" ) ),
  _tests( new Tests() )
{
}


QtTestRunner::~QtTestRunner()
{
  delete _suite;

  Tests::iterator it = _tests->begin();
  while ( it != _tests->end() )
    delete *it++;

  delete _tests;
}


Test *
QtTestRunner::getRootTest()
{
  if ( _tests->size() != 1 )
  {
    Tests::iterator it = _tests->begin();
    while ( it != _tests->end() )
      _suite->addTest( *it++ );
    _tests->clear();
    return _suite;
  }
  return (*_tests)[0];
}


void 
QtTestRunner::run( bool autoRun )
{
  TestRunnerDlg *dlg = new TestRunnerDlg( qApp->mainWidget(), 
                                          "QtTestRunner", 
                                          TRUE );
  dlg->setModel( new TestRunnerModel( getRootTest() ),
                 autoRun );
  dlg->exec();
  delete dlg;
}


void 
QtTestRunner::addTest( CPPUNIT_NS::Test *test )
{
  _tests->push_back( test );
}


CPPUNIT_NS_END
@
