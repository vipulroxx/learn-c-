head	1.7;
access;
symbols
	REL_1_12_1:1.6
	REL_1_11_6:1.5
	REL_1_11_4:1.5
	REL_1_11_0:1.5
	TG_CPPUNIT_NO_STREAM_AFTER:1.4
	TG_CPPUNIT_NO_STREAM_BEFORE:1.4
	REL_1_10_2:1.4
	REL_1_10_0:1.4
	REL_1_9_14:1.4
	REL_1_9_12:1.4
	BRANCH_1_9_12:1.4.0.2
	TG_BRANCH_1_9_12:1.4
	TG_BEFORE_HPUX_PLUGIN:1.4
	TG_BEFORE_SUN4_PORT:1.4
	REL_1_9_10:1.4
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.4
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.4
	REL_1_9_6:1.3
	REL_1_9_4:1.3
	REL_1_9_0:1.3
	REL_1_8_0:1.2
	REL_1_7_8:1.2
	REL_1_7_3:1.1
	REL_1_7_1:1.1
	REL_1_6_2:1.1
	BRANCH_1_6:1.1.0.2
	REL_1_6_1:1.1
	REL_1_6_0:1.1;
locks; strict;
comment	@// @;


1.7
date	2008.12.16.06.26.35;	author andydent;	state Exp;
branches;
next	1.6;

1.6
date	2006.06.29.19.53.40;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.09.10.07.53.18;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.22.17.27.26;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.13.15.12.54;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.03.25.07.15.06;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.09.14.19.27.58;	author blep;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Added updated project and instructions for building under Visual Studio.Net 2008
@
text
@// MsDevCallerListCtrl.cpp : implementation file
//

#include "stdafx.h"
#include <atlbase.h>

#include "MsDevCallerListCtrl.h"
#include <msvc6/testrunner/TestRunner.h>

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



// VC6 IDE Handler
// //////////////////////////////////////////////////////////////////
#if _MSC_VER == 1200    // VC++ 6

#include <msvc6/DSPlugin/TestRunnerDSPluginVC6.h>


namespace VC6IdeHandler {
   static bool initialize()
   {
      return SUCCEEDED( CoInitialize(NULL) );
   }

   static void uninitialize( bool initialized )
   {
      if ( initialized )
         CoUninitialize();
   }

   static void goToLineInSourceCode( CString fileName, int line )
   {

      CComPtr< ITestRunnerDSPlugin> pIDSPlugin;
      HRESULT hr = CoCreateInstance( CLSID_DSAddIn, 
                                     NULL, 
                                     CLSCTX_LOCAL_SERVER, 
                                     IID_ITestRunnerDSPlugin, 
                                     reinterpret_cast< void**>(&pIDSPlugin) );
      if ( SUCCEEDED( hr ) )
      {
         pIDSPlugin->goToLineInSourceCode( CComBSTR( fileName ), 
                                           line );
      }
   }
} // namespace VC6IdeHandler

namespace IDEHandler = VC6IdeHandler;


// VC7 IDE Handler
// //////////////////////////////////////////////////////////////////

#elif _MSC_VER >= 1300     // VC++ 7 or more

#include <initguid.h>
#include <assert.h>

#pragma warning( disable : 4278 )
#pragma warning( disable : 4146 )
#if (_MSC_VER < 1500)
#import "libid:80cc9f66-e7d8-4ddd-85b6-d9e6cd0e93e2" version("7.0") lcid("0") raw_interfaces_only named_guids
#else
#import "libid:80cc9f66-e7d8-4ddd-85b6-d9e6cd0e93e2" version("9.0") lcid("0") raw_interfaces_only named_guids
#endif
#pragma warning( default : 4146 )
#pragma warning( default : 4278 )



namespace VC7IdeHandler {
   static bool initialize()
   {
      return true;
   }

   static void uninitialize( bool initialized )
   {
   }

   static void goToLineInSourceCode( CString fileName, int line )
   {
      USES_CONVERSION;

      CComPtr< IRunningObjectTable > pIRunningObjectTable;
      HRESULT hr = ::GetRunningObjectTable( 0, &pIRunningObjectTable );

      CComPtr< IEnumMoniker > pIEnumMoniker;
      hr = pIRunningObjectTable->EnumRunning( &pIEnumMoniker );

      CComPtr< EnvDTE::_DTE > pIEnvDTE;
      while ( true )
      {
         ULONG celtFetched;
         CComPtr< IMoniker > pIMoniker;
         if ( S_OK != pIEnumMoniker->Next( 1, &pIMoniker, &celtFetched ) )
            break;

         CComPtr< IBindCtx > pIBindCtx; 
         hr = ::CreateBindCtx( NULL, &pIBindCtx ); 

         LPOLESTR pszDisplayName;
         pIMoniker->GetDisplayName( pIBindCtx, NULL, &pszDisplayName );

         TRACE( "Moniker %s\n", W2A( pszDisplayName ) );

         CString strDisplayName( pszDisplayName );
         CComPtr< IMalloc > pIMalloc;
         ::CoGetMalloc( 1, &pIMalloc );
         pIMalloc->Free( pszDisplayName );

         if ( strDisplayName.Right( 4 ) == _T(".sln") 
              || strDisplayName.Find( _T("VisualStudio.DTE") ) >= 0 )
         {
            CComPtr< IUnknown > pIUnknown;
            pIRunningObjectTable->GetObject( pIMoniker, &pIUnknown );
            pIUnknown->QueryInterface( &pIEnvDTE );
            if( pIEnvDTE.p )
               break;
         }
      }

      if ( pIEnvDTE.p )
      {
         CComPtr< EnvDTE::Documents > pIDocuments;
         HRESULT result = pIEnvDTE->get_Documents( &pIDocuments );
         if ( !SUCCEEDED( result ) )
            return;
         
         assert( pIDocuments.p );
         
         CComPtr< EnvDTE::Document > pIDocument;
         CComBSTR bstrFileName( fileName );
         CComVariant type=_T("Text");
         CComVariant read=_T("False");
         result = pIDocuments->Open( bstrFileName, 
                                     type.bstrVal,
                                     read.bVal, 
                                     &pIDocument );
         if ( !SUCCEEDED( result ) )
            return;
         
         assert( pIDocument.p );
         
         CComPtr< IDispatch > pIDispatch;
         result = pIDocument->get_Selection( &pIDispatch );
         if ( !SUCCEEDED( result ) )
            return;
         
         CComPtr< EnvDTE::TextSelection > pITextSelection;
         pIDispatch->QueryInterface( &pITextSelection );
         
         assert( pITextSelection.p );
         
         result = pITextSelection->GotoLine( line, TRUE );
         if ( !SUCCEEDED( result ) )
            return;
      }
   }

} // namespace VC7IdeHandler


namespace IDEHandler = VC7IdeHandler;


#else
#error Unsupported VC++ version.
#endif





/////////////////////////////////////////////////////////////////////////////
// MsDevCallerListCtrl



MsDevCallerListCtrl::MsDevCallerListCtrl()
    : m_lineNumberSubItem( 3 )
    , m_fileNameSubItem( 4 )
{
   m_initialized = IDEHandler::initialize();
}

MsDevCallerListCtrl::~MsDevCallerListCtrl()
{
   IDEHandler::uninitialize( m_initialized );
}


void 
MsDevCallerListCtrl::setLineNumberSubItem( int subItemIndex )
{
  m_lineNumberSubItem = subItemIndex;
}


void 
MsDevCallerListCtrl::setFileNameSubItem( int fileNameItemIndex )
{
  m_fileNameSubItem = fileNameItemIndex;
}


BEGIN_MESSAGE_MAP(MsDevCallerListCtrl, CListCtrl)
	//{{AFX_MSG_MAP(MsDevCallerListCtrl)
	ON_NOTIFY_REFLECT(NM_DBLCLK, OnDblclk)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// MsDevCallerListCtrl message handlers

void MsDevCallerListCtrl::OnDblclk(NMHDR* pNMHDR, LRESULT* pResult) 
{
   // get index of selected item
   POSITION pos = GetFirstSelectedItemPosition();
   int hotItem = GetNextSelectedItem(pos);

   CString lineNumber = GetItemText( hotItem, m_lineNumberSubItem);
   CString fileName = GetItemText( hotItem, m_fileNameSubItem);

   IDEHandler::goToLineInSourceCode( fileName, _ttoi( lineNumber) );

   *pResult = 0;
}@


1.6
log
@* src/msvc6/testrunner/MsDevCallerListCtrl.cpp: applied correction
 provided to fix bug #1498175 (double click on failure does not
 goto failure).
@
text
@d67 1
d69 3
@


1.5
log
@* src/msvc6/testrunner/MsDevCallerListCtrl.cpp:
* src/msvc6/testrunner/MsDevCallerListCtrl.h: integrated go to source line
  features on double click contributed by Max Quatember and
  Andreas Pfaffenbichler.
@
text
@d220 3
a222 3
   CPoint pt;
   GetCursorPos( &pt);
   ScreenToClient( &pt);
a223 7
   // some dirty hack to get some selection
   // should get the border-width + 1, but WINDOWINFO
   // is not supported in Win95
   pt.x = 5;

   UINT flags = 0;
   int hotItem = HitTest( pt, &flags);
@


1.4
log
@* src/msvc6/testrunner/MsDevCallerListCtrl.h:
* src/msvc6/testrunner/MsDevCallerListCtrl.cpp:
* src/msvc6/testrunner/Resource.h:
* src/msvc6/testrunner/TestRunner.rc:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/TestRunnerModel.h:
* src/msvc6/testpluginrunner/TestPlugInRunner.rc:
* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.cpp:
* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.h:
* src/msvc6/testpluginrunner/TestPlugInRunnerModel.cpp: integrated patch from
Marco Welti (Welti@@GretagMacbeth.ch) with a few clean up.
Display the name of the test being run during above the progress bar. Allow the
VC++ add-ins to works with TestPlugInRunner (COM init). DLL name can be specified
on the command line after flag '-testsuite'. Display wait cursor, clear and reload
history when reloading DLL.

* THANKS: added Marco Welti to the list.
@
text
@a8 1
#include <msvc6/DSPlugin/TestRunnerDSPluginVC6.h>
d16 161
d186 1
a186 1
  m_comInitialized = SUCCEEDED( CoInitialize(NULL) );
d191 1
a191 2
	if ( m_comInitialized )
    CoUninitialize();
d220 13
a232 28
  HRESULT hr = S_OK;
  int hotItem = 0;

  CComPtr< ITestRunnerDSPlugin> pIDSPlugin;
 
  hr = CoCreateInstance( CLSID_DSAddIn, NULL, CLSCTX_LOCAL_SERVER, IID_ITestRunnerDSPlugin, 
                          reinterpret_cast< void**>(&pIDSPlugin));
  
  if ( SUCCEEDED( hr))
  {
    CPoint pt;
    UINT flags = 0;
    CString lineNumber, fileName;

    GetCursorPos( &pt);
    ScreenToClient( &pt);

    // some dirty hack to get some selection
    // should get the border-width + 1, but WINDOWINFO
    // is not supported in Win95
    pt.x = 5;

    hotItem = HitTest( pt, &flags);

    lineNumber = GetItemText( hotItem, m_lineNumberSubItem);
    fileName = GetItemText( hotItem, m_fileNameSubItem);
    
    pIDSPlugin->goToLineInSourceCode( CComBSTR( fileName), _ttoi( lineNumber));
d234 1
a234 1
  }
d236 1
a236 1
  *pResult = 0;
@


1.3
log
@* NEWS: updated

* doc/other_documentation.dox: addded new module for test plug-in.

* include/msvc6/DSPlugin/TestRunnerDSPlugin.h:
* include/msvc6/DSPlugin/TestRunnerDSPlugin_i.c: added. Those file are
  generated by project src/msvc/DSPlugin. They are provided to allow
  compilation of TestRunner without compiling DSPlugIn which does not
  build on VC++ 7.

* examples/examples.dsw: removed DSPlugIn for workspace (fail to build
  with VC++ 7). Added DllPlugInTester.dsp to workspace.

* examples/msvc6/TestPlugIn/TestPlugIn.dsp: added post-build unit testing
  using the new DllPlugInTester.

* examples/msvc6/EasyTestPlugIn/*: a new project that
  demonstrates the use of CPPUNIT_TESTPLUGIN_IMPL to create a test plug-in.

* src/cppunit/cppunit.dsw:
* src/TestPlugInRunner.dsw:
* src/TestRunner.dsw: removed. Should use src/CppUnitLibraries.dsw instead.

* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: removed findTestName() method. Replaced
  by Test::findTest().

* src/msvc6/DSPlugIn/DSPlugIn.dsp:
* src/msvc6/DSPlugIn/DSAddIn.h: changed include for add-in. MIDL generates
  files in sub-directory ToAddToDistribution. Generated file should be
  copied to include/msvc6/DSPlugin when modified. This remove the dependecy
  of MfcTestRunner on DSPlugIn.

* src/msvc6/testrunner/ListCtrlFormatter.h:
* src/msvc6/testrunner/ListCtrlFormatter.cpp: added GetNextColumnIndex().

* src/msvc6/testrunner/src/TestRunnerDlg.h:
* src/msvc6/testrunner/src/TestRunnerDlg.cpp: set column number in
  MsDevCallerListCtrl when initializing the list.

* src/msvc6/testrunner/src/MsDevCallerListCtrl.h:
* src/msvc6/testrunner/src/MsDevCallerListCtrl.cpp: column indexes for
  file and line number are no longer static. Added methods to set those
  indexes. Changed DSPlugIn header name.

* include/msvc6/testrunner/TestPlugInInterface.h: fixed inclusion of
  windows header for WINAPI. Added macro CPPUNIT_TESTPLUGIN_IMPL to
  automatically implements a test plug-in.

* src/msvc6/DllPlugInTester/*: added new project. A application to test DLL
  and report using CompilerOutputter. Target for post-build testing and
  debugging of DLL.
@
text
@d26 1
d31 2
@


1.2
log
@* INSTALL-WIN32.txt: updated for MFC Unicode TestRunner.

* src/msvc6/testrunner/TestRunner.dsp: added Unicode configurations.

* src/msvc6/testrunner/ListCtrlSetter.cpp:
* src/msvc6/testrunner/ListCtrlSetter.h: replaced usage of std::string by
CString for easier ansi/unicode switch.

* src/msvc6/testrunner/MsDevCallerListCtrl.cpp:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/TestRunnerModel.cpp:
* src/msvc6/testrunner/TestRunnerModel.h:
* src/msvc6/testrunner/TreeHierarchyDlg.cpp: made changes to compile with
either ANSI and UNICODE support.

* examples/msvc6/HostApp/HostApp.cpp:
* examples/msvc6/HostApp/HostApp.h:
* examples/msvc6/HostApp/HostAppDoc.cpp:
* examples/msvc6/HostApp/HostAppDoc.h: moved TestRunner execution to
HostApp::RunUnitTests() and removed the MainFrame application window.

* examples/msvc6/HostApp/HostApp.dsp: added Unicode configurations.
@
text
@d9 1
a9 1
#include <msvc6/DSPlugin/TestRunnerDSPlugin.h>
d20 1
a20 2
const int MsDevCallerListCtrl::s_lineNumberSubItem = 3;
const int MsDevCallerListCtrl::s_fileNameSubItem = 4;
d23 2
d33 14
d82 2
a83 2
    lineNumber = GetItemText( hotItem, s_lineNumberSubItem);
    fileName = GetItemText( hotItem, s_fileNameSubItem);
d89 1
a89 1
	*pResult = 0;
@


1.1
log
@* src/msvc6/testrunner/TestRunner.dsp: fixed release configuration.

* src/msvc6/testrunner/TestRunner.dsw: added DSPlugIn.dsp. TestRunner
depends on DSPlugIn.

* src/msvc6/testrunner/TestRunner.cpp:
* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/MsDevCallerListCtrl.cpp:
* src/msvc6/testrunner/MsDevCallerListCtrl.h:
* src/msvc6/DSPlugIn/*: integrated patch from
Patrick Berny (PPBerny@@web.de). An add-ins for VC++. Double-cliking
a failed test in the TestRunner, VC++ will open the source file and
go to the failure location.

* src/cppunit/Exception.cpp:
* include/cppunit/Exception.h: compile fix, call to overrided
operator = of parent class failed. Using typedef to the parent
class fix that.

* src/cppunit/cppunit.dsp: added TestFixture.h

* src/cppunit/TestFactoryRegistry.cpp: removed <utility> which isn't
needed any more.

* include/cppunit/TestCase.h:
* include/cppunit/TestSuite.h:
* include/cppunit/extensions/TestFactoryRegistry.h: added
include <Portability.h> before any other includes to remove warning
with VC++.

* include/cppunit/Portability.h: moved platform specific includes at
the beginning of the header. fixed CPPUNIT_HAVE_CPP_SOURCE_ANNOTATION
declaration.

* include/cppunit/config-msvc6.h: removed pragma once (useless, should
be put in each header to have an effect).
@
text
@d70 1
a70 1
    pIDSPlugin->goToLineInSourceCode( CComBSTR( fileName), atoi( lineNumber));
@

