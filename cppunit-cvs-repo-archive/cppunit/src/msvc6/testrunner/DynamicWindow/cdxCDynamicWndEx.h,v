head	1.1;
access;
symbols
	REL_1_12_1:1.1
	REL_1_11_6:1.1
	REL_1_11_4:1.1
	REL_1_11_0:1.1
	TG_CPPUNIT_NO_STREAM_AFTER:1.1
	TG_CPPUNIT_NO_STREAM_BEFORE:1.1
	REL_1_10_2:1.1
	REL_1_10_0:1.1
	REL_1_9_14:1.1
	REL_1_9_12:1.1
	BRANCH_1_9_12:1.1.0.2
	TG_BRANCH_1_9_12:1.1
	TG_BEFORE_HPUX_PLUGIN:1.1
	TG_BEFORE_SUN4_PORT:1.1
	REL_1_9_10:1.1;
locks; strict;
comment	@ * @;


1.1
date	2002.06.13.23.25.55;	author blep;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* src/cppunit/CompilerOutputter.cpp: fixed bug #549762 (line wrap).

* src/msvc6/testrunner/DynamicWindow/*: added. Dynamic Window library
  from Hans Bühler (hans.buehler@@topmail.de) to resize window.

* src/msvc6/testrunner/TestRunnerModel.h:
* src/msvc6/testrunner/TestRunnerModel.cpp: removed dialog bounds from
  settings. Added public registry keys for cppunit, main dialog, and
  browse dialog.

* src/msvc6/testrunner/TreeHierarchyDlg.h:
* src/msvc6/testrunner/TreeHierarchyDlg.cpp: dialog is now resizable.
  Window placement is stored and restored.

* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp: replaced dialog resizing code
  by usage of Hans Bühler's Dynamic Window library. Dialog placement
  is stored/restored by that library. ProgressBar is now a child window.
  Added edit field to see the details of the failure. List on show
  the short description of the failure.

* src/msvc6/testrunner/ProgressBar.h:
* src/msvc6/testrunner/ProgressBar.cpp: is now a CWnd.

* src/msvc6/testrunner/TestRunner.rc: named all static fill ID for resizing.
  Added an invisble static field for progress bar placement.
@
text
@// cdxCDynamicWndEx.h: interface for the cdxCDynamicWndEx class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_CDXCDYNAMICWNDEX_H__96C8C1D4_6524_11D3_8030_000000000000__INCLUDED_)
#define AFX_CDXCDYNAMICWNDEX_H__96C8C1D4_6524_11D3_8030_000000000000__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#include "cdxCDynamicWnd.h"

/*
 * cdxCDynamicWndEx
 * ================
 * A class extended to offer some useful additions.
 */

class cdxCDynamicWndEx : public cdxCDynamicWnd
{
public:
	enum RestoreFlags
	{
		rflg_none			=	0,			// only load window position
		rflg_state			=	0x01,		// make window iconic/zoomed if been before
		rflg_visibility	=	0x02,		// hide/show window as been before
		rflg_all				=	rflg_state|rflg_visibility
	};

	enum ExFlags
	{
		flAutoPos	=	0x0100
	};

private:
	CString	m_strAutoPos;

public:
	cdxCDynamicWndEx(Freedom fd, UINT nFlags) : cdxCDynamicWnd(fd,nFlags) {}
	virtual ~cdxCDynamicWndEx() {}

	//
	// utilities
	//

	bool StretchWindow(const CSize & szDelta);
	bool StretchWindow(int iAddPcnt);
	bool RestoreWindowPosition(LPCTSTR lpszProfile, const CString &entryPrefix = "", UINT restoreFlags = rflg_all);
	bool StoreWindowPosition(LPCTSTR lpszProfile, const CString &entryPrefix = "");

	//
	// feature one: auto-positioning :)
	// 

	void ActivateAutoPos(UINT nID) { m_strAutoPos.Format(_T("ID=0x%08lx"),nID); }
	void ActivateAutoPos(const CString & strID) { m_strAutoPos = strID; }
	void NoAutoPos() { m_strAutoPos.Empty(); }

	//
	// we need these
	//

protected:
	virtual void OnInitialized();
	virtual void OnDestroying();

public:
	static LPCTSTR	M_lpszAutoPosProfileSection;
};

#endif // !defined(AFX_CDXCDYNAMICWNDEX_H__96C8C1D4_6524_11D3_8030_000000000000__INCLUDED_)
@
