head	1.1;
access;
symbols
	REL_1_12_1:1.1
	REL_1_11_6:1.1
	REL_1_11_4:1.1
	REL_1_11_0:1.1
	TG_CPPUNIT_NO_STREAM_AFTER:1.1
	TG_CPPUNIT_NO_STREAM_BEFORE:1.1
	REL_1_10_2:1.1
	REL_1_10_0:1.1
	REL_1_9_14:1.1
	REL_1_9_12:1.1
	BRANCH_1_9_12:1.1.0.2
	TG_BRANCH_1_9_12:1.1
	TG_BEFORE_HPUX_PLUGIN:1.1
	TG_BEFORE_SUN4_PORT:1.1
	REL_1_9_10:1.1;
locks; strict;
comment	@// @;


1.1
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@// //////////////////////////////////////////////////////////////////////////
// Implementation file MfcTestRunner.cpp for class MfcTestRunner
// (c)Copyright 2000, Baptiste Lepilleur.
// Created: 2001/04/26
// //////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include <cppunit/ui/mfc/MfcTestRunner.h>
#include <cppunit/TestSuite.h>
#include "TestRunnerModel.h"
#include "TestRunnerDlg.h"



CPPUNIT_NS_BEGIN


MfcTestRunner::MfcTestRunner()
  : m_suite( new CPPUNIT_NS::TestSuite() )
{
}


MfcTestRunner::~MfcTestRunner() 
{
  delete m_suite;

  for ( Tests::iterator it = m_tests.begin(); it != m_tests.end(); ++it )
    delete *it;
}


void 
MfcTestRunner::run() 
{ 
  bool comInit = SUCCEEDED( CoInitialize( NULL) );

  TestRunnerModel model( getRootTest() );
  TestRunnerDlg dlg( &model ); 
  dlg.DoModal (); 

  if ( comInit)
    CoUninitialize();
}


void            
MfcTestRunner::addTest( CPPUNIT_NS::Test *test ) 
{ 
  m_tests.push_back( test );
}


void            
MfcTestRunner::addTests( const CppUnitVector<CPPUNIT_NS::Test *> &tests )
{ 
  for ( Tests::const_iterator it=tests.begin();
        it != tests.end();
        ++it )
  {
    addTest( *it );
  }
}


CPPUNIT_NS::Test *   
MfcTestRunner::getRootTest()
{
  if ( m_tests.size() != 1 )
  {
    for ( Tests::iterator it = m_tests.begin(); it != m_tests.end(); ++it )
      m_suite->addTest( *it );
    m_tests.clear();
    return m_suite;
  }
  return m_tests[0];
}

CPPUNIT_NS_END
@
