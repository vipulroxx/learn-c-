head	1.4;
access;
symbols
	REL_1_12_1:1.4
	REL_1_11_6:1.4
	REL_1_11_4:1.4
	REL_1_11_0:1.4
	TG_CPPUNIT_NO_STREAM_AFTER:1.4
	TG_CPPUNIT_NO_STREAM_BEFORE:1.4
	REL_1_10_2:1.4
	REL_1_10_0:1.3
	REL_1_9_14:1.3
	REL_1_9_12:1.3
	BRANCH_1_9_12:1.3.0.2
	TG_BRANCH_1_9_12:1.3
	TG_BEFORE_HPUX_PLUGIN:1.3
	TG_BEFORE_SUN4_PORT:1.3
	REL_1_9_10:1.3
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.2
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.2
	REL_1_9_6:1.2
	REL_1_9_4:1.2
	REL_1_9_0:1.1
	REL_1_8_0:1.1
	REL_1_7_8:1.1
	REL_1_7_3:1.1
	REL_1_7_1:1.1
	REL_1_6_2:1.1
	BRANCH_1_6:1.1.0.2
	REL_1_6_1:1.1
	REL_1_6_0:1.1;
locks; strict;
comment	@// @;


1.4
date	2004.06.18.11.25.34;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.19.14.38.07;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.27.21.23.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testpluginrunner/TestPlugIn.cpp:
* src/msvc6/testpluginrunner/TestPlugInRunnerApp.cpp:
* src/msvc6/testpluginrunner/TestPlugInRunnerModel.cpp:
* src/msvc6/testpluginrunner/TestPlugInRunnerModel.h: bug #952912,
  memory leaks when loading/reloading plug-ins.
@
text
@// //////////////////////////////////////////////////////////////////////////
// Implementation file TestPlugIn.cpp for class TestPlugIn
// (c)Copyright 2000, Baptiste Lepilleur.
// Created: 2001/06/23
// //////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "TestPlugIn.h"
#include <cppunit/TestCase.h>
#include <cppunit/plugin/DynamicLibraryManagerException.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include "TestPlugInException.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif



TestPlugIn::TestPlugIn( const std::string fileName ) :
    m_fileName( fileName )
{
  m_copyFileName = m_fileName + "-hotrunner";
}


TestPlugIn::~TestPlugIn()
{
  deleteDllCopy();
}


void 
TestPlugIn::deleteDllCopy()
{
  m_manager.unload( m_copyFileName );
  ::DeleteFile( m_copyFileName.c_str() );
}


class NullTest : public CPPUNIT_NS::TestCase
{
public:
  NullTest( std::string name ) : TestCase( name ) 
  {
  }

  ~NullTest() 
  {
  }

  void runTests()
  {
    CPPUNIT_ASSERT_MESSAGE( "Failed to load" + getName(), FALSE );
  }
};


CPPUNIT_NS::Test *
TestPlugIn::makeTest()
{
  reloadDll();
  return CPPUNIT_NS::TestFactoryRegistry::getRegistry().makeTest();
}


void 
TestPlugIn::reloadDll()
{
  m_manager.unload( m_copyFileName );
  makeDllCopy();
  loadDll();
}


void 
TestPlugIn::makeDllCopy()
{
  if ( ::CopyFile( m_fileName.c_str(), m_copyFileName.c_str(), FALSE ) == FALSE )
  {
    throw TestPlugInException( "Failed to copy DLL" + m_fileName +
        " to " + m_copyFileName, TestPlugInException::failedToCopyDll );
  }
}


void 
TestPlugIn::loadDll()
{
  try
  {
    m_manager.load( m_copyFileName );
  }
  catch ( CPPUNIT_NS::DynamicLibraryManagerException &e )
  {
    throw TestPlugInException( e.what(), 
                               TestPlugInException::failedToLoadDll );
  }
}
@


1.3
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d14 7
d38 1
@


1.2
log
@* release 1.9.4
@
text
@d35 1
a35 1
class NullTest : public CppUnit::TestCase
d53 1
a53 1
CppUnit::Test *
d57 1
a57 1
  return CppUnit::TestFactoryRegistry::getRegistry().makeTest();
d88 1
a88 1
  catch ( CppUnit::DynamicLibraryManagerException &e )
@


1.1
log
@* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp:
moved dll copy from post-build to custom build setting, so that the
dll is copied even if the CppUnitTestApp was not modified.

* examples/msvc6/TestPlugIn/: a new example of test plug in.

* src/msvc6/TestRunner/ListCtrlFormatter.*
* src/msvc6/TestRunner/ListCtrlSetter.*:
added, helper to manipulate list control.

* src/msvc6/TestRunner/TestRunnerDlg.*: change to make the error list
more compact. text moved to string resources. icons added for typ
test tfailure type.

* src/msvc6/TestRunner/MostRecentTests.*: added, classes that will
replace the current implementation of MRU test which make it hard
to subclass the dialog.

* src/msvc6/TestRunner/res/errortype.bmp: added, bitmap with error
types (failure and error).

* src/msvc6/TestPlugInRunner/: A test runner to run test plug in.
Test plug in are DLL that publish a specified plug in interface.
Those DLL are loaded and reloaded by the TestPlugInRunner to run
tests. This remove the need to wrap DLL with a executable to test
them.

* src/cppunit/cppunit.dsp:
removed config.h from project
added Portability.h and config-msvc6.h

* include/cppunit/config-msvc6.h:
undef CPPUNIT_FUNC_STRING_COMPARE_STRING_FIRST
@
text
@d10 2
d16 1
a16 3
    m_fileName( fileName ),
    m_dllHandle( NULL ),
    m_interfaceFunction( NULL )
a23 1
  releaseDll();
a28 10
TestPlugIn::releaseDll()
{
  if ( m_dllHandle != NULL )
    ::FreeLibrary( m_dllHandle );
  m_dllHandle = NULL;
  m_interfaceFunction = NULL;
}


void 
d57 1
a57 11
  TestPlugInInterface *theInterface = (*m_interfaceFunction)();

  try
  {
    return theInterface->makeTest();
  }
  catch ( ... )
  {
    throw TestPlugInException( "Failed to make test using GetTestPlugInInterface", 
                               TestPlugInException::failedToMakeTest );
  }
d64 1
a64 1
  releaseDll();
a66 1
  getDllInterface();
d84 7
a90 3
  m_dllHandle = ::LoadLibrary( m_copyFileName.c_str() );
  if ( m_dllHandle == NULL )
    throw TestPlugInException( "Failed to load DLL " + m_copyFileName, 
d92 1
a92 12
}


void
TestPlugIn::getDllInterface()
{
  m_interfaceFunction = (GetTestPlugInInterfaceFunction )
      ::GetProcAddress( m_dllHandle, "GetTestPlugInInterface" );
  if ( m_interfaceFunction == NULL )
    throw TestPlugInException( "Failed to locate function GetTestPlugInInterface "
                               " in DLL " + m_fileName, 
                               TestPlugInException::failedToGetInterfaceFunction );
@

