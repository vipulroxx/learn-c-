head	1.3;
access;
symbols
	REL_1_12_1:1.3
	REL_1_11_6:1.3
	REL_1_11_4:1.3
	REL_1_11_0:1.3
	TG_CPPUNIT_NO_STREAM_AFTER:1.3
	TG_CPPUNIT_NO_STREAM_BEFORE:1.3
	REL_1_10_2:1.3
	REL_1_10_0:1.3
	REL_1_9_14:1.3
	REL_1_9_12:1.3
	BRANCH_1_9_12:1.3.0.2
	TG_BRANCH_1_9_12:1.3
	TG_BEFORE_HPUX_PLUGIN:1.3
	TG_BEFORE_SUN4_PORT:1.2
	REL_1_9_10:1.2;
locks; strict;
comment	@ * @;


1.3
date	2002.09.16.18.36.52;	author esche;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.29.19.27.07;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.16.22.59.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@added newline at end of file (needed for some compilers to work)
@
text
@#ifndef CPPUNIT_PROTECTORCHAIN_H
#define CPPUNIT_PROTECTORCHAIN_H

#include <cppunit/Protector.h>
#include <cppunit/portability/CppUnitDeque.h>

#if CPPUNIT_NEED_DLL_DECL
#pragma warning( push )
#pragma warning( disable: 4251 )  // X needs to have dll-interface to be used by clients of class Z
#endif


CPPUNIT_NS_BEGIN

/*! \brief Protector chain (Implementation).
 * Implementation detail.
 * \internal Protector that protect a Functor using a chain of nested Protector.
 */
class CPPUNIT_API ProtectorChain : public Protector
{
public:
  ~ProtectorChain();

  void push( Protector *protector );

  void pop();

  int count() const;

  bool protect( const Functor &functor,
                const ProtectorContext &context );

private:
  class ProtectFunctor;

private:
  typedef CppUnitDeque<Protector *> Protectors;
  Protectors m_protectors;

  typedef CppUnitDeque<Functor *> Functors;
};


CPPUNIT_NS_END

#if CPPUNIT_NEED_DLL_DECL
#pragma warning( pop )
#endif

#endif // CPPUNIT_PROTECTORCHAIN_H

@


1.2
log
@* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/Protector.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/plugin/DynamicLibraryManager.h:
* include/cppunit/plugin/PlugInManager.h:
* include/cppunit/plugin/PlugInParameters.h:
* include/cppunit/TestPlugIn.h:
* src/cppunit/DefaultProtector.h:
* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorContext.h:
* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: fixed a dew documentation bugs.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: moved documentation to header.
@
text
@d50 2
a51 1
#endif // CPPUNIT_PROTECTORCHAIN_H@


1.1
log
@* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added. Base class for protectors.

* src/cppunit/DefaultProtector.h:
* src/cppunit/DefaultProtector.cpp: added. Implementation of the default
  protector used to catch std::exception and any other exception.

* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorChain.cpp: added. Implementation of a chain of
  protector, allowing catching custom exception and implementation of
  expected exception.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: updated to use protector.
@
text
@d15 4
a18 1

@

