head	1.6;
access;
symbols
	REL_1_12_1:1.6
	REL_1_11_6:1.6
	REL_1_11_4:1.6
	REL_1_11_0:1.5
	TG_CPPUNIT_NO_STREAM_AFTER:1.5
	TG_CPPUNIT_NO_STREAM_BEFORE:1.5
	REL_1_10_2:1.5
	REL_1_10_0:1.5
	REL_1_9_14:1.5
	REL_1_9_12:1.5
	BRANCH_1_9_12:1.5.0.2
	TG_BRANCH_1_9_12:1.5
	TG_BEFORE_HPUX_PLUGIN:1.5
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.4
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.4
	REL_1_9_6:1.4
	REL_1_9_4:1.4
	REL_1_9_0:1.3
	REL_1_8_0:1.2;
locks; strict;
comment	@// @;


1.6
date	2005.10.13.20.13.16;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.04.17.22.27.28;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.04.12.19.28.47;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.04.10.15.21.25;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.03.28.15.50.09;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* removed most warning when compiling with vc++ 6sp6.
@
text
@#include <cppunit/config/SourcePrefix.h>
#include <cppunit/TestRunner.h>
#include <cppunit/TestPath.h>
#include <cppunit/TestResult.h>


CPPUNIT_NS_BEGIN


TestRunner::WrappingSuite::WrappingSuite( const std::string &name ) 
    : TestSuite( name )
{
}


int 
TestRunner::WrappingSuite::getChildTestCount() const
{
  if ( hasOnlyOneTest() )
    return getUniqueChildTest()->getChildTestCount();
  return TestSuite::getChildTestCount();
}


std::string 
TestRunner::WrappingSuite::getName() const
{
  if ( hasOnlyOneTest() )
    return getUniqueChildTest()->getName();
  return TestSuite::getName();
}


Test *
TestRunner::WrappingSuite::doGetChildTestAt( int index ) const
{
  if ( hasOnlyOneTest() )
    return getUniqueChildTest()->getChildTestAt( index );
  return TestSuite::doGetChildTestAt( index );
}


void 
TestRunner::WrappingSuite::run( TestResult *result )
{
  if ( hasOnlyOneTest() )
    getUniqueChildTest()->run( result );
  else
    TestSuite::run( result );
}


bool 
TestRunner::WrappingSuite::hasOnlyOneTest() const
{
  return TestSuite::getChildTestCount() == 1;
}


Test *
TestRunner::WrappingSuite::getUniqueChildTest() const
{
  return TestSuite::doGetChildTestAt( 0 );
}





TestRunner::TestRunner()
    : m_suite( new WrappingSuite() )
{
}


TestRunner::~TestRunner()
{
  delete m_suite;
}


void 
TestRunner::addTest( Test *test )
{
  m_suite->addTest( test ); 
}


void 
TestRunner::run( TestResult &controller,
                 const std::string &testPath )
{
  TestPath path = m_suite->resolveTestPath( testPath );
  Test *testToRun = path.getChildTest();

  controller.runTest( testToRun );
}


CPPUNIT_NS_END

@


1.5
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d1 1
@


1.4
log
@* bumped version to 1.9.3

* FAQ: added question about 4786 warning on VC++.

* NEWS: updated.

* contrib/msvc/readme.txt: moved to contrib/readme.txt.

* contrib/xml-xsl/report.xsl: added XML style sheet contributed by
'cuppa' project team (http://sourceforge.jp/projects/cuppa/)

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: added tests for
  startTestRun()/endTestRun().

* examples/simple/*: added. A simple example.

* include/cppunit/BriefTestProgressListener.h:
* src/cppunit/BriefTestProgressListener.cpp: added. Verbose progess listener
  that print the test name before running the test.

* include/cppunit/TestListener.h: added startTestRun()/endTestRun().

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: added runTest(), to be called to run
  a test by test runner.

* src/cppunit/TextTestRunner.cpp:
* src/cppunit/TestRunner.cpp: updated to use TestResult::runTest().

* include/cppunit/plugin/PlugInManager.h:
* src/cppunit/PlugInManager.cpp: added. Managers for all loaded plug-ins.

* include/cppunit/plugin/TestPlugInDefaultImpl.h:
* src/cppunit/TestPlugInDefaultImpl.cpp: renamed TestPlugInAdapter. All
  implementations are empty.

* include/cppunit/plugin/TestPlugInSuite.h: removed.
* src/cppunit/TestPlugInSuite.cpp: removed. Replaced by PlugInManager.

* include/cppunit/plugin/TestPlugIn.h: rewrote the plug-in interface to
  provide more versatility. updated macros to match new interface.

* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestFactoryRegistry.cpp: Added unregisterFactory().
  Added convenience method addRegistry(). Rewrote registry life cycle
  management. AutoRegisterSuite can now detect that the registry has been
  destroy and not call to it to unregister its test factory.

* include/cppunit/extensions/AutoRegisterTest.h: on destruction, the registered
  factory is unregistered from the registry.

* include/cppunit/extensions/HelperMacros.h: added macros
  CPPUNIT_REGISTRY_ADD_TO_DEFAULT and CPPUNIT_REGISTRY_ADD to help
  build test suite hierarchy.

* src/cppunit/msvc/DllPlugInTester/*: moved to src/cppunit/DllPlugInTester/.

* src/cppunit/DllPlugInTester/DllPlugInTester.cpp: removed UNICODE stuffs. Use
  the PlugInManager instead of PlugInTestSuite. Simplified: only one test on
  command line, but many DLL can be specified. Added configurations to link
  against cppunit dll, those are now the default configuration (static linking
  don't make much sense for plug-in).
@
text
@d6 2
a7 2
namespace CppUnit
{
d99 1
a99 1
} //  namespace CppUnit
@


1.3
log
@* Makefile.am: added examples/qt to tar ball release.

* TODO: heavily updated.

* contrib/msvc/CppUnit*.wwtpl: changed base class for unit test to TestFixture.

* include/cppunit/Test.h: removed toString() method. Not used by the framework
  and source of confusions with getName().
  Added getChildTestCount() and getChildTestAt(), introducing the composite pattern
  at top level. Added utility methods findTest() and findTestPath().

* src/cppunit/Test.cpp: added. Implementation of new utility methods.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: inherits TestLeaf. Removed toString(), run(void) and
  defaultResult(). Removed default constructor.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestSuite.cpp: fixed some includes that used "" instead of <>.

* include/cppunit/TestComposite.h:
* src/cppunit/TestComposite.cpp: added. Common implementation of Test for composite
  tests (TestSuite).

* include/cppunit/TestFailure.h:
* src/cppunit/TestFailure.cpp: removed toString().

* include/cppunit/TestLeaf.h:
* src/cppunit/TestLeaf.cpp: added. Common implementation of Test for single test
  (TestCase).

* include/cppunit/TestListener.h: added TimingListener example to documentation.

* include/cppunit/TestPath.h:
* src/cppunit/TestPath.cpp: added. List of test traversed to access a test in the
  test hierarchy.

* include/cppunit/TestRunner.h: added. Generic TestRunner.

* src/cppunit/TestRunner.cpp: moved to TextTestRunner.cpp. Added new implementation
  of includecppunit/TestRunner.h.

* include/cppunit/TestSuite.h:
* src/cppunit/TestSuite.cpp: inherits TestComposite and implements new Test
  interface. Removed toString().

* src/cppunit/TextTestRunner.cpp: moved from TestRunner.cpp. Implementation of
  include/cppunit/ui/text/TestRunner.h.

* include/cppunit/extensions/RepeatedTest.h:
* src/cppunit/RepeatedTest.cpp: removed toString().

* include/cppunit/extensions/TestDecorator.h: inherits TestLeaf.
  Removed toString()

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp:
* examples/cppunittest/XmlOutputterTest.cpp:
* examples/cppunittest/XmlOutputterTest.h: XML outputter now escape node content.
  Add unit test for that bug (#540944). Added style sheet support. Modified
  XML structure: failure message as its own element.

* src/msvc/testrunner/TestRunnerModel.h:
* src/msvc/testrunner/TestRunnerModel.cpp: used Test::findTest() to find a test
  by name instead of using RTTI. Added toAnsiString() for convertion when
  compiling as UNICODE.

* src/msvc/testrunner/TreeHierarchyDlg.h:
* src/msvc/testrunner/TreeHierarchyDlg.cpp: used new composite interface of Test
  to explorer the test hierarchy instead of RTTI.

* examples/cppunittest/TestPathTest.h:
* examples/cppunittest/TestPathTest.cpp: added, unit tests for TestPath.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: added test for TestLeaf.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: added test for TestComposite and
  new Test interface.
@
text
@d3 1
d95 1
a95 1
  testToRun->run( &controller );
@


1.2
log
@* include/cppunitui/: moved to include/cppunit/ui (fix unix install problem).

* doc/cookbook.dox:
* examples/cppunittest/CppUnitTestMain.cpp:
* examples/msvc/CppUnitTestApp/HostApp.cpp:
* examples/msvc/HostApp/HostApp.cpp:
* examples/qt/Main.Cpp:
* examples/src/cppunit/TestRunner.cpp:
* examples/src/msvc6/TestRunner/TestRunner.cpp:
* examples/src/qttestrunner/TestRunner.cpp: updated to use <cppunit/ui/...>
instead of <cppunitui/...> in include directives.

* doc/CppUnit-win.dox: generated documentation give the include path at the
bottom of the page for each class.

* NEWS: added compatibility break for 1.7.10 users.
@
text
@d1 3
a3 25
#include <cppunit/TestSuite.h>
#include <cppunit/TextTestResult.h>
#include <cppunit/TextOutputter.h>
#include <cppunit/TextTestProgressListener.h>
#include <cppunit/TestResult.h>
#include <cppunit/ui/text/TestRunner.h>
#include <iostream>


namespace CppUnit {
namespace TextUi {

/*! Constructs a new text runner.
 * \param outputter used to print text result. Owned by the runner.
 */
TestRunner::TestRunner( Outputter *outputter ) 
    : m_outputter( outputter )
    , m_suite( new TestSuite( "All Tests" ) )
    , m_result( new TestResultCollector() )
    , m_eventManager( new TestResult() )
{
  if ( !m_outputter )
    m_outputter = new TextOutputter( m_result, std::cout );
  m_eventManager->addListener( m_result );
}
d5 2
d8 2
a9 1
TestRunner::~TestRunner()
a10 4
  delete m_eventManager;
  delete m_outputter;
  delete m_result;
  delete m_suite;
d14 2
a15 6
/*! Adds the specified test.
 *
 * \param test Test to add.
 */
void 
TestRunner::addTest( Test *test )
d17 3
a19 2
  if ( test != NULL )
    m_suite->addTest( test );
d23 6
a28 24
/*! Runs the named test case.
 *
 * \param testName Name of the test case to run. If an empty is given, then
 *                 all added test are run. The name must be the name of
 *                 of an added test.
 * \param doWait if \c true then the user must press the RETURN key 
 *               before the run() method exit.
 * \param doPrintResult if \c true (default) then the test result are printed
 *                      on the standard output.
 * \param doPrintProgress if \c true (default) then TextTestProgressListener is
 *                        used to show the progress.
 * \return \c true is the test was successful, \c false if the test
 *         failed or was not found.
 */
bool
TestRunner::run( std::string testName,
                     bool doWait,
                     bool doPrintResult,
                     bool doPrintProgress )
{
  runTestByName( testName, doPrintProgress );
  printResult( doPrintResult );
  wait( doWait );
  return m_result->wasSuccessful();
d32 6
a37 13
bool
TestRunner::runTestByName( std::string testName,
                               bool doPrintProgress )
{
  if ( testName.empty() )
    return runTest( m_suite, doPrintProgress );

  Test *test = findTestByName( testName );
  if ( test != NULL )
    return runTest( test, doPrintProgress );

  std::cout << "Test " << testName << " not found." << std::endl;
  return false;
d42 1
a42 1
TestRunner::wait( bool doWait )
d44 4
a47 5
  if ( doWait ) 
  {
    std::cout << "<RETURN> to continue" << std::endl;
    std::cin.get ();
  }
d51 2
a52 2
void 
TestRunner::printResult( bool doPrintResult )
d54 1
a54 3
  std::cout << std::endl;
  if ( doPrintResult )
    m_outputter->write();
d58 2
a59 2
Test * 
TestRunner::findTestByName( std::string name ) const
d61 1
a61 9
  for ( std::vector<Test *>::const_iterator it = m_suite->getTests().begin(); 
        it != m_suite->getTests().end(); 
        ++it )
  {
    Test *test = *it;
    if ( test->getName() == name )
      return test;
  }
  return NULL;
a64 7
bool
TestRunner::runTest( Test *test,
                         bool doPrintProgress )
{
  TextTestProgressListener progress;
  if ( doPrintProgress )
    m_eventManager->addListener( &progress );
a65 1
  test->run( m_eventManager );
d67 4
a70 3
  if ( doPrintProgress )
    m_eventManager->removeListener( &progress );
  return m_result->wasSuccessful();
d74 1
a74 5
/*! Returns the result of the test run.
 * Use this after calling run() to access the result of the test run.
 */
TestResultCollector &
TestRunner::result() const
d76 1
a76 1
  return *m_result;
d80 2
a81 6
/*! Returns the event manager.
 * The instance of TestResult results returned is the one that is used to run the
 * test. Use this to register additional TestListener before running the tests.
 */
TestResult &
TestRunner::eventManager() const
d83 1
a83 1
  return *m_eventManager;
a86 6
/*! Specifies an alternate outputter.
 *
 * Notes that the outputter will be use after the test run only if \a printResult was
 * \c true.
 * \see CompilerOutputter, XmlOutputter, TextOutputter.
 */
d88 2
a89 1
TestRunner::setOutputter( Outputter *outputter )
d91 4
a94 2
  delete m_outputter;
  m_outputter = outputter;
d98 2
a99 2
} // namespace TextUi
}  //  namespace CppUnit
@


1.1
log
@* doc/cookbook.html: removed. Replaced by cookbook.doc.

* doc/cookbook.dox: added, conversion of cookbook.html to Doxygen format.

* doc/other_documentation.dox: added groups definition.

* doc/Makefile.am: replaced cookbook.html by cookbook.dox

* doc/Doxyfile.in: added predefined CPPUNIT_HAVE_CPP_SOURCE_ANNOTATION.
Replaced cookbook.html by cookbook.dox.

* include/cppunitui/mfc/TestRunner.h: added, extracted from
include/msvc6/testrunner/TestRunner.h. Moved class TestRunner to namespace
CppUnit::MfcUi.

* include/msvc6/testrunner/TestRunner.h: deprecated. A simple typedef to
CppUnit::MfcUi::TestRunner.

* include/textui/TestRuner.h: added, extracted from
include/cppunit/TextTestRunner.h.

* src/cppunit/TextTestRunner.cpp: renamed TestRunner.cpp. Moved into
namespace CppUnit::TextUi.

* src/msvc6/testruner/TestRunner.cpp: moved into namespace CppUnit::MfcUi.

* src/cppunit/CompilerOutputter.cpp: removed printing "- " before
NotEqualException addional message, for consistency between different
TestRunner (Mfc,Text...)

* include/cppunit/Asserter.h:
* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/Outputter.h:
* include/cppunit/SourceLine.h:
* include/cppunit/TestAssert.h:
* include/cppunit/TestCaller.h:
* include/cppunit/TestFailure.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: doc update. organization
in groups.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.cpp:
* examples/msvc6/HostApp/HostApp.cpp: updated to use
CppUnit::MfcUi::TestRunner.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use
CppUnit::TextUi::TestRunner.
@
text
@d6 1
a6 1
#include <cppunitui/text/TestRunner.h>
@

