head	1.21;
access;
symbols
	REL_1_12_1:1.21
	REL_1_11_6:1.21
	REL_1_11_4:1.21
	REL_1_11_0:1.21
	TG_CPPUNIT_NO_STREAM_AFTER:1.21
	TG_CPPUNIT_NO_STREAM_BEFORE:1.21
	REL_1_10_2:1.21
	REL_1_10_0:1.21
	REL_1_9_14:1.21
	REL_1_9_12:1.21
	BRANCH_1_9_12:1.21.0.2
	TG_BRANCH_1_9_12:1.21
	TG_BEFORE_HPUX_PLUGIN:1.21
	TG_BEFORE_SUN4_PORT:1.20
	REL_1_9_10:1.20
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.17
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.17
	REL_1_9_6:1.16
	REL_1_9_4:1.16
	REL_1_9_0:1.16
	REL_1_8_0:1.15
	REL_1_7_8:1.15
	REL_1_7_3:1.14
	REL_1_7_1:1.13
	REL_1_6_2:1.13
	BRANCH_1_6:1.13.0.2
	REL_1_6_1:1.13
	REL_1_6_0:1.13
	REL_1_5_5:1.2;
locks; strict;
comment	@// @;


1.21
date	2002.09.16.18.22.50;	author esche;	state Exp;
branches;
next	1.20;

1.20
date	2002.08.29.19.27.07;	author blep;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.16.22.59.22;	author blep;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.17;

1.17
date	2002.06.13.15.31.01;	author blep;	state Exp;
branches;
next	1.16;

1.16
date	2002.04.12.19.28.47;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2002.03.25.22.35.34;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2002.02.28.10.57.20;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2001.09.16.19.27.02;	author smr99;	state Exp;
branches;
next	1.12;

1.12
date	2001.08.07.15.48.10;	author smr99;	state Exp;
branches;
next	1.11;

1.11
date	2001.07.15.18.42.32;	author smr99;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.15.04.18.06;	author smr99;	state Exp;
branches;
next	1.9;

1.9
date	2001.07.07.19.12.41;	author smr99;	state Exp;
branches;
next	1.8;

1.8
date	2001.07.06.01.31.25;	author smr99;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.17.16.59.07;	author bastiaan;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.11.19.59.15;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.02.22.29.52;	author smr99;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.02.19.53.06;	author smr99;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.30.21.49.01;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.29.14.09.16;	author bastiaan;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.28.18.23.32;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.21
log
@<typeinfo> not available if CPPUNIT_USE_TYPEINFO_NAME not defined
@
text
@#include <cppunit/Portability.h>
#include <cppunit/Exception.h>
#include <cppunit/Protector.h>
#include <cppunit/TestCase.h>
#include <cppunit/TestResult.h>
#include <stdexcept>

#if CPPUNIT_USE_TYPEINFO_NAME
#  include <typeinfo>
#endif

CPPUNIT_NS_BEGIN

/*! \brief Functor to call test case method (Implementation).
 *
 * Implementation detail.
 */
class TestCaseMethodFunctor : public Functor
{
public:
  typedef void (TestCase::*Method)();

  TestCaseMethodFunctor( TestCase *target,
                         Method method )
     : m_target( target )
     , m_method( method )
  {
  }

  bool operator()() const
  {
    (m_target->*m_method)();
    return true;
  }

private:
  TestCase *m_target;
  Method m_method;
};


/** Constructs a test case.
 *  \param name the name of the TestCase.
 **/
TestCase::TestCase( const std::string &name )
    : m_name(name)
{
}


/// Run the test and catch any exceptions that are triggered by it 
void 
TestCase::run( TestResult *result )
{
  result->startTest(this);
/*
  try {
    setUp();

    try {
      runTest();
    }
    catch ( Exception &e ) {
      Exception *copy = e.clone();
      result->addFailure( this, copy );
    }
    catch ( std::exception &e ) {
      result->addError( this, new Exception( Message( "uncaught std::exception", 
                                                      e.what() ) ) );
    }
    catch (...) {
      Exception *e = new Exception( Message( "uncaught unknown exception" ) );
      result->addError( this, e );
    }

    try {
      tearDown();
    }
    catch (...) {
      result->addError( this, new Exception( Message( "tearDown() failed" ) ) );
    }
  }
  catch (...) {
    result->addError( this, new Exception( Message( "setUp() failed" ) ) );
  }
*/
  if ( result->protect( TestCaseMethodFunctor( this, &TestCase::setUp ),
                        this,
                       "setUp() failed" ) )
  {
    result->protect( TestCaseMethodFunctor( this, &TestCase::runTest ),
                     this );
  }

  result->protect( TestCaseMethodFunctor( this, &TestCase::tearDown ),
                   this,
                   "tearDown() failed" );

  result->endTest( this );
}


/// All the work for runTest is deferred to subclasses 
void 
TestCase::runTest()
{
}


/** Constructs a test case for a suite.
 * \deprecated This constructor was used by fixture when TestFixture did not exist.
 *             Have your fixture inherits TestFixture instead of TestCase.
 * \internal
 *  This TestCase was intended for use by the TestCaller and should not
 *  be used by a test case for which run() is called.
 **/
TestCase::TestCase()
    : m_name( "" )
{
}


/// Destructs a test case
TestCase::~TestCase()
{
}


/// Returns the name of the test case
std::string 
TestCase::getName() const
{ 
  return m_name; 
}
  

CPPUNIT_NS_END
@


1.20
log
@* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/Protector.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/plugin/DynamicLibraryManager.h:
* include/cppunit/plugin/PlugInManager.h:
* include/cppunit/plugin/PlugInParameters.h:
* include/cppunit/TestPlugIn.h:
* src/cppunit/DefaultProtector.h:
* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorContext.h:
* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: fixed a dew documentation bugs.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: moved documentation to header.
@
text
@a5 1
#include <typeinfo>
d8 3
@


1.19
log
@* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added. Base class for protectors.

* src/cppunit/DefaultProtector.h:
* src/cppunit/DefaultProtector.cpp: added. Implementation of the default
  protector used to catch std::exception and any other exception.

* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorChain.cpp: added. Implementation of a chain of
  protector, allowing catching custom exception and implementation of
  expected exception.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: updated to use protector.
@
text
@d12 4
@


1.18
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d2 4
a8 3
#include <cppunit/TestCase.h>
#include <cppunit/Exception.h>
#include <cppunit/TestResult.h>
d10 19
d30 4
a33 1
CPPUNIT_NS_BEGIN
d50 1
a50 1

d80 13
a92 1
  
@


1.17
log
@* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: added functions that take a Message as a
  parameter. Existing function have a short description indicating
  an assertion failure.

* include/cppunit/CompilerOuputter.h:
* src/cppunit/CompilerOuputter.cpp: removed printNotEqualMessage() and
  printDefaultMessage(). Updated to use Message.

* include/cppunit/Message.h:
* src/cppunit/Message.cpp: added. Represents a message associated to an
  Exception.

* include/cppunit/Exception.h:
* src/cppunit/Exception.cpp: the message associated to the exception is now
  stored as a Message instead of a string.

* include/cppunit/NotEqualException.cpp: constructs a Message instead of a
  string.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: updated to use Asserter functions that
  take a message when pertinent (CPPUNIT_FAIL...).

* include/cppunit/TestCaller.h:
* src/cppunit/TestCaller.cpp: exception not caught failure has a better
  short description.

* src/cppunit/TestCase.cpp: better short description when setUp() or
  tearDown() fail.

* src/msvc6/testrunner/TestRunnerDlg.cpp: replace '\n' in failure message
  with space.

* examples/cppunittest/ExceptionTest.cpp:
* examples/cppunittest/NotEqualExceptionTest.cpp:
* examples/cppunittest/TestCallerTest.cpp:
* examples/cppunittest/TestFailureTest.cpp:
* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp:
* examples/cppunittest/TestResultTest.cpp:
* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: updated to use Exception/Message.

* examples/cppunittest/MessageTest.h:
* examples/cppunittest/MessageTest.cpp: added. Unit test for Message.
@
text
@d10 1
a10 1
namespace CppUnit {
d96 1
a96 1
} // namespace CppUnit
@


1.16
log
@* Makefile.am: added examples/qt to tar ball release.

* TODO: heavily updated.

* contrib/msvc/CppUnit*.wwtpl: changed base class for unit test to TestFixture.

* include/cppunit/Test.h: removed toString() method. Not used by the framework
  and source of confusions with getName().
  Added getChildTestCount() and getChildTestAt(), introducing the composite pattern
  at top level. Added utility methods findTest() and findTestPath().

* src/cppunit/Test.cpp: added. Implementation of new utility methods.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: inherits TestLeaf. Removed toString(), run(void) and
  defaultResult(). Removed default constructor.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestSuite.cpp: fixed some includes that used "" instead of <>.

* include/cppunit/TestComposite.h:
* src/cppunit/TestComposite.cpp: added. Common implementation of Test for composite
  tests (TestSuite).

* include/cppunit/TestFailure.h:
* src/cppunit/TestFailure.cpp: removed toString().

* include/cppunit/TestLeaf.h:
* src/cppunit/TestLeaf.cpp: added. Common implementation of Test for single test
  (TestCase).

* include/cppunit/TestListener.h: added TimingListener example to documentation.

* include/cppunit/TestPath.h:
* src/cppunit/TestPath.cpp: added. List of test traversed to access a test in the
  test hierarchy.

* include/cppunit/TestRunner.h: added. Generic TestRunner.

* src/cppunit/TestRunner.cpp: moved to TextTestRunner.cpp. Added new implementation
  of includecppunit/TestRunner.h.

* include/cppunit/TestSuite.h:
* src/cppunit/TestSuite.cpp: inherits TestComposite and implements new Test
  interface. Removed toString().

* src/cppunit/TextTestRunner.cpp: moved from TestRunner.cpp. Implementation of
  include/cppunit/ui/text/TestRunner.h.

* include/cppunit/extensions/RepeatedTest.h:
* src/cppunit/RepeatedTest.cpp: removed toString().

* include/cppunit/extensions/TestDecorator.h: inherits TestLeaf.
  Removed toString()

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp:
* examples/cppunittest/XmlOutputterTest.cpp:
* examples/cppunittest/XmlOutputterTest.h: XML outputter now escape node content.
  Add unit test for that bug (#540944). Added style sheet support. Modified
  XML structure: failure message as its own element.

* src/msvc/testrunner/TestRunnerModel.h:
* src/msvc/testrunner/TestRunnerModel.cpp: used Test::findTest() to find a test
  by name instead of using RTTI. Added toAnsiString() for convertion when
  compiling as UNICODE.

* src/msvc/testrunner/TreeHierarchyDlg.h:
* src/msvc/testrunner/TreeHierarchyDlg.cpp: used new composite interface of Test
  to explorer the test hierarchy instead of RTTI.

* examples/cppunittest/TestPathTest.h:
* examples/cppunittest/TestPathTest.cpp: added, unit tests for TestPath.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: added test for TestLeaf.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: added test for TestComposite and
  new Test interface.
@
text
@d39 2
a40 1
      result->addError( this, new Exception( e.what() ) );
d43 1
a43 1
      Exception *e = new Exception( "caught unknown exception" );
d51 1
a51 1
      result->addError( this, new Exception( "tearDown() failed" ) );
d55 1
a55 1
          result->addError( this, new Exception( "setUp() failed" ) );
@


1.15
log
@* include/cppunit/makefile.am: removed TestRegistry.h

* include/cppunit/TestRegistry.h: removed. Obsolete, replaced by
TestFactoryRegistry.

* src/cppunit/makefile.am: removed TestRegistry.cpp. Added cppunit_dll.dsp.

* include/cppunit/CompilerOutputter.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/SynchronizedObject.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TextOutputter.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestResult.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/TestFactory.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: minor doc update.

* include/cppunit/TestFixture.h: added DLL export.

* include/cppunit/msvc6/TestPlugInInterface.h: updated doc. Added automatic
exportation of TestPlugIn publishing function.

* src/cppunit/TestCase.cpp:
* include/cppunit/TestCase.h: inherits setUp() and tearDown() from
class TestFixture.
@
text
@d5 3
a7 3
#include "cppunit/TestCase.h"
#include "cppunit/Exception.h"
#include "cppunit/TestResult.h"
d12 8
a19 6
/// Create a default TestResult
CppUnit::TestResult* 
TestCase::defaultResult()
{ 
  return new TestResult; 
} 
d29 1
a29 1
	  setUp();
d31 21
a51 21
	  try {
	    runTest();
	  }
	  catch ( Exception &e ) {
	    Exception *copy = e.clone();
	    result->addFailure( this, copy );
	  }
	  catch ( std::exception &e ) {
	    result->addError( this, new Exception( e.what() ) );
	  }
	  catch (...) {
	    Exception *e = new Exception( "caught unknown exception" );
	    result->addError( this, e );
	  }

	  try {
	    tearDown();
	  }
	  catch (...) {
	    result->addError( this, new Exception( "tearDown() failed" ) );
	  }
d54 1
a54 1
	  result->addError( this, new Exception( "setUp() failed" ) );
a60 11
/// A default run method 
TestResult *
TestCase::run()
{
  TestResult *result = defaultResult();

  run (result);
  return result;
}


a67 9
/** Constructs a test case.
 *  \param name the name of the TestCase.
 **/
TestCase::TestCase( std::string name )
    : m_name(name)
{
}


d69 4
a72 1
 *  This TestCase is intended for use by the TestCaller and should not
a86 8
/// Returns a count of all the tests executed
int 
TestCase::countTestCases() const
{ 
  return 1; 
}


a91 17
}


/// Returns the name of the test case instance
std::string 
TestCase::toString() const
{ 
  std::string className;

#if CPPUNIT_USE_TYPEINFO_NAME
  const std::type_info& thisClass = typeid( *this );
  className = thisClass.name();
#else
  className = "TestCase";
#endif

  return className + "." + getName(); 
@


1.14
log
@* NEW: updated and restructured.

* include/cppunit/CompilerOutputter.h:
* src/cppunit/CompilerOutputter.cpp:
updated against TestResultChange. Changed TestResult to TestResultCollector.

* include/cppunit/extensions/HelperMacros.h: minor documentation fix.

* include/cppunit/Outputter.h: added. Abstract base class for all Outputter.

* include/cppunit/Portability.h: made the fix on OStringStream suggested by
Bob Summerwill to remove level 4 warning with VC++.

* include/cppunit/TestAssert.h: added macro CPPUNIT_ASSERT_EQUAL_MESSAGE.

* src/cppunit/TestFailure.cpp:
* include/cppunit/TestFailure.h: added method clone() to duplicate a failure. Made
all method virtual.

* include/cppunit/TestListener.h: changed signature of addFailure() to
addFailure( const TestFailure &failure ). Failure is now only a temporary object.

* include/cppunit/Outputter.h: added. Abstract base class for all outputter. Used
by TextTestRunner.

* include/cppunit/SynchronizedObject.h:
* src/cppunit/SynchronizedObject.cpp: added. Class extracted from TestResult.
Base class for objects that can be accessed from different threads.

* include/cppunit/TestResult.h: TestFailure.h is no longer included.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: extracted all methods related to keeping track
of the result to the new TestResultCollector class which is a TestListener.

* include/cppunit/TestResultCollector.h:
* src/cppunit/TestResultCollector.cpp: added. TestListener which kept track
of the result of the test run. All failure/error, and tests are tracked.

* include/cppunit/TestSucessListener.h:
* src/cppunit/TestSucessListener.cpp: added. TestListener extracted from
TestResult. Is responsible for wasSucessful().

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: reindented.

* include/cppunit/TextOutputter.h:
* src/cppunit/TextOutputter.cpp: added. Copied from the deprecated
TextTestResult and modified to act as an Ouputter.

* include/cppunit/TextTestProgressListener.h:
* src/cppunit/TextTestProgressListener.cpp: Copied from the deprecated
TextTestResult and modified to print the dot while the test are running.

* include/cppunit/TextTestResult.h:
* src/cppunit/TextTestResult.cpp: updated against TestResult change.
No compatiblity break. Deprecated.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to work with the new TestResult.
Use TextTestProgressListener and TextOutputter instead of TextTestResult.
Any outputter with interface Outputter can be used to print the test result
(CompilerOutputter, XmlOutputter, TextOutputter...)

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: updated against TestResultChange.
Changed TestResult to TestResultCollector.

* src/msvc6/TestRunnerDlg.h:
* src/msvc6/TestRunnerDlg.cpp: fixed the 'fullrowselect' feature of the list view.
The dialog is a TestListener itself, it no longer use the GUITestResult class.

* src/msvc6/TestRunner.rc: moved the "autorun test button" in such a way that it
did not overlap the progress bar anymore.

* src/msvc6/MfcSynchronizationObject.h: added. Generic SynchronizedObject
lock for MFC.

* src/msvc6/GUITestResult.h :
* src/msvc6/GUITestResult.cpp : removed.

* src/qttestrunner/TestRunnerModel.h:
* src/qttestrunner/TestRunnerModel.cpp: changed addFailure() signature to reflect
change on TestListener.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use the new Outputter
abstraction and TextTestRunner facilities.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.cpp: removed. Replaced by MockTestCase.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.h:

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/MockTestListener.h:
* examples/cppunittest/MockTestListener.cpp: the class now behave like a mock
object.

* examples/cppunittest/MockTestCase.h:
* examples/cppunittest/MockTestCase.cpp: added. Mock TestCase object.

* examples/cppunittest/OrthodoxTest.h:
* examples/cppunittest/OrthodoxTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/SynchronizedTestResult.h: Updated against TestResult
change.

* examples/cppunittest/TestCallerTest.h:
* examples/cppunittest/TestCallerTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: Updated against TestResult change.
Use MockTestListener and MockTestCase instead of FailingTestCase and TestResult.

* examples/cppunittest/TestDecoratorTest.h:
* examples/cppunittest/TestDecoratorTest.cpp: Updated against TestResult change.
Use MockTestCase instead of FailingTestCase.

* examples/cppunittest/TestListenerTest.h:
* examples/cppunittest/TestListenerTest.cpp: removed. Those unit tests have been
rewrote and moved to TestResultTest.

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: Updated to test the new interface.
Tests from TestListenerTest have been moved here.

* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp: added. Tests for the class
that been extracted from TestResult.

* examples/cppunittest/TestSetUpTest.h:
* examples/cppunittest/TestSetUpTest.cpp: renamed SetUp inner class to MockSetUp.
Changed interface to be more akin to a Mock object.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: Updated against TestResult change,
and rewrote to use MockTestCase instead of FailingTestCase.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: Updated against TestResult change.
Added some utility methods to make the update easier.
@
text
@a117 14
/// A hook for fixture set up
void 
TestCase::setUp()
{
}


/// A hook for fixture tear down
void 
TestCase::tearDown()
{
}


@


1.13
log
@Revert TestFixture-related changes from 2001-07-15.
@
text
@d13 5
a17 2
CppUnit::TestResult* TestCase::defaultResult ()
{ return new TestResult; } 
d22 1
a22 1
TestCase::run (TestResult *result)
d24 4
a27 1
    result->startTest (this);
d29 4
a32 7
    try {
	setUp ();
  
	try {
	    runTest ();
	}
	catch (Exception& e) {
d34 14
a47 14
	    result->addFailure (this, copy);
	}
	catch (std::exception& e) {
	    result->addError (this, new Exception (e.what ()));
	}
	catch (...) {
	    Exception *e = new Exception ("caught unknown exception");
	    result->addError (this, e);
	}

	try {
	    tearDown ();
	}
	catch ( ... ) {
d49 7
a55 7
	}
    }
    catch ( ... ) {
	result->addError( this, new Exception( "setUp() failed" ) );
    }
    
    result->endTest (this);
d60 2
a61 1
TestResult *TestCase::run ()
d63 1
a63 1
  TestResult *result = defaultResult ();
d67 1
a68 1
}
d71 2
a72 1
void TestCase::runTest ()
d76 1
d80 2
a81 2
TestCase::TestCase (std::string name) 
  : m_name (name) 
d85 1
d90 2
a91 2
TestCase::TestCase () 
  : m_name ("") 
d97 3
a99 2
TestCase::~TestCase ()
{}
d103 5
a107 2
int TestCase::countTestCases () const
{ return 1; }
d112 1
a112 1
  TestCase::getName () const
d119 4
a122 2
void TestCase::setUp ()
{}
d126 4
a129 2
void TestCase::tearDown ()
{}
d134 1
a134 1
  TestCase::toString () const
d139 1
a139 1
  const std::type_info& thisClass = typeid (*this);
d145 1
a145 1
  return className + "." + getName (); 
d148 1
@


1.12
log
@Fixes to allow building with SGI MIPSpro 7.30 compiler.
The testsuite file examples/cppunittest/SubclassedTestCase.cpp
causes the compiler to dump core, so that and HelperMacrosTest
were not tested.  The rest of the test suite passes.
@
text
@d107 10
@


1.11
log
@TextFixture introduced.  First steps at using it.
@
text
@a3 1
#include <cmath>
@


1.10
log
@Added documentation.
@
text
@a107 10
/// A hook for fixture set up
void TestCase::setUp ()
{}
  

/// A hook for fixture tear down
void TestCase::tearDown ()
{}


@


1.9
log
@Removed last uses of estring.
@
text
@d10 1
d17 1
d22 1
a22 1
  result->startTest (this);
d24 2
a25 3
  try
  {
    setUp ();
d27 21
a47 17
    try {
      runTest ();
    }
    catch (Exception& e) {
      Exception *copy = e.clone();
      result->addFailure (this, copy);
    }
    catch (std::exception& e) {
      result->addError (this, new Exception (e.what ()));
    }
    catch (...) {
      Exception *e = new Exception ("caught unknown exception");
      result->addError (this, e);
    }

    try {
      tearDown ();
d50 1
a50 1
      result->addError( this, new Exception( "tearDown() failed" ) );
d52 2
a53 7
  }
  catch ( ... ) {
    result->addError( this, new Exception( "setUp() failed" ) );
  }

  result->endTest (this);

@


1.8
log
@Change from CPPUNIT_USE_TYPEINFO to CPPUNIT_USE_TYPEINFO_NAME
@
text
@a8 1
#include "estring.h"
@


1.7
log
@replaced #include of <config.h> with <cppunit/Portability.h>
@
text
@d125 1
a125 1
#if CPPUNIT_USE_TYPEINFO
d130 1
a130 1
#endif // CPPUNIT_USE_TYPEINFO
@


1.6
log
@* include/cppunit/NotEqualException.cpp: addded, exception to be used
with assertEquals().

* src/cppunit/RepeatedTest.cpp: added to reduce header dependency
(TestResult.h was missing).

* src/cppunit/TestAssert.cpp: added to put non template functions
there.

* src/cppunit/TestCase.cpp: added std:: prefix to
catch (exception& e). Integrated a modified version of Tim Jansen
patch (#403745) for TestCase to make the unit test (TestCaseTest)
pass. If the setUp() fail then neither the runTest() nor
the tearDown() method is called.
@
text
@d1 1
a5 1
#include "cppunit/config.h"
@


1.5
log
@Change to templatized TestAssert::assertEquals() and the new CPPUNIT_ASSERT* macros
@
text
@d22 4
d27 14
a40 3
  setUp ();
  
  try {
d42 6
a47 7
    runTest ();
    
  }
  catch (Exception& e) {
    Exception *copy = new Exception (e);
    result->addFailure (this, copy);
    
d49 2
a50 3
  catch (exception& e) {
    result->addError (this, new Exception (e.what ()));
    
a51 7
  catch (...) {
    Exception *e = new Exception ("unknown exception");
    result->addError (this, e);

  }

  tearDown ();
@


1.4
log
@Replace CU_ by CPPUNIT_.
@
text
@d5 1
d119 1
a119 1
#ifdef CPPUNIT_USE_TYPEINFO
@


1.3
log
@(toString): put type_info in std namespace and inside CU_USE_TYPEINFO ifdef.
@
text
@d118 1
a118 1
#ifdef CU_USE_TYPEINFO
d123 1
a123 1
#endif // CU_USE_TYPEINFO
@


1.2
log
@Merged Baptiste Lepilleurs CppUnitW 1.2.
Some differences:
TypeInfo stuff (in TestSuite) compiled in only if USE_TYPEINFO is set.
TestSuite.getTests now returns a const ref instead of taking a ref as param.
Removed auto_ptr stuff from TestFactoryRegistry: auto_ptr cannot be used in
containers.
@
text
@d116 10
a125 2
  const type_info& thisClass = typeid (*this); 
  return std::string (thisClass.name ()) + "." + getName (); 
@


1.1
log
@Moved files in subdir cppunit to src/cppunit.
@
text
@a15 36

/// Check for a failed general assertion 
void TestCase::assertImplementation (bool          condition,
  std::string   conditionExpression,
  long          lineNumber,
  std::string   fileName)
{ 
  if (!condition) 
    throw Exception (conditionExpression, lineNumber, fileName); 
}


/// Check for a failed equality assertion 
void TestCase::assertEquals (long        expected, 
  long        actual,
  long        lineNumber,
  std::string fileName)
{ 
  if (expected != actual) 
    assertImplementation (false, notEqualsMessage(expected, actual), lineNumber, fileName); 
}


/// Check for a failed equality assertion
void TestCase::assertEquals (double        expected, 
  double        actual, 
  double        delta,
  long          lineNumber,
  std::string   fileName)
{ 
  if (fabs (expected - actual) > delta) 
    assertImplementation (false, notEqualsMessage(expected, actual), lineNumber, fileName); 

}


a60 1

a65 16

/// Build a message about a failed equality check 
std::string TestCase::notEqualsMessage (long expected, long actual)
{ 
  return "expected: " + estring (expected) + " but was: " + estring (actual); 
}


/// Build a message about a failed equality check 
std::string TestCase::notEqualsMessage (double expected, double actual)
{ 
  return "expected: " + estring (expected) + " but was: " + estring (actual); 
}



d68 1
a68 1
 */
@

