head	1.4;
access;
symbols
	REL_1_12_1:1.4
	REL_1_11_6:1.4
	REL_1_11_4:1.4
	REL_1_11_0:1.4
	TG_CPPUNIT_NO_STREAM_AFTER:1.4
	TG_CPPUNIT_NO_STREAM_BEFORE:1.4
	REL_1_10_2:1.4
	REL_1_10_0:1.4
	REL_1_9_14:1.4
	REL_1_9_12:1.4
	BRANCH_1_9_12:1.4.0.2
	TG_BRANCH_1_9_12:1.4
	TG_BEFORE_HPUX_PLUGIN:1.4
	TG_BEFORE_SUN4_PORT:1.3
	REL_1_9_10:1.3;
locks; strict;
comment	@// @;


1.4
date	2002.09.16.17.31.50;	author esche;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.27.21.51.18;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.03.15.47.52;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.16.22.59.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@missing semicolon when CPPUNIT_USE_TYPEINFO_NAME not used
@
text
@#include <cppunit/Exception.h>
#include <cppunit/extensions/TypeInfoHelper.h>
#include "DefaultProtector.h"


CPPUNIT_NS_BEGIN


bool 
DefaultProtector::protect( const Functor &functor,
                           const ProtectorContext &context )
{
  try
  {
    return functor();
  }
  catch ( Exception &failure )
  {
    reportFailure( context, failure );
  }
  catch ( std::exception &e )
  {
    std::string shortDescription( "uncaught exception of type " );
#if CPPUNIT_USE_TYPEINFO_NAME
    shortDescription += TypeInfoHelper::getClassName( typeid(e) );
#else
    shortDescription += "std::exception (or derived).";
#endif
    Message message( shortDescription, e.what() );
    reportError( context, message );
  }
  catch ( ... )
  {
    reportError( context,
                 Message( "uncaught exception of unknown type") );
  }
  
  return false;
}


CPPUNIT_NS_END
@


1.3
log
@* CodingGuideLines.txt: updated for OS/390 C++ limitation.

* examples/cppunittests/MockFunctor.h: added. Mock Functor to help
  testing.

* examples/cppunittests/MockProtector.h: qdded. Mock Protector to help
  testing.

* examples/cppunittests/TestResultTest.h
* examples/cppunittests/TestResultTest.cpp: added tests for
  pushProtector(), popProtector() and protect().

* include/cppunit/TestAssert.h: removed default message value from
  assertEquals(). Caused compilation error on OS/390.

* include/cppunit/plugin/PlugInParameters.h:
* src/cppunit/PlugInParameters.cpp: renamed commandLine() to
  getCommandLine().

* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp: bug fix, disabled Browse
  button while running tests.
@
text
@d27 1
a27 1
    shortDescription += "std::exception (or derived)."
@


1.2
log
@* include/cppunit/Exception.h:
* src/cppunit/Exception.h: added setMessage().

* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added class ProtectorGuard. Change the
  reportXXX() method to support Exception passing and SourceLine.

* include/cppunit/TestCaller.h: removed 'expect exception' features.
  It is now handled by ExceptionTestCaseDecorator and TestCaller no
  longer need default template argument support.

* include/cppunit/TestCase.h:
* include/cppunit/extensions/TestCaller.h: runTest() is now public
  instead of protected, so that it can be decorated.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.h: added pushProtector() and popProtector()
  methods. This allow user to specify their own exception trap when
  running test case.

* include/cppunit/extensions/TestDecorator.h:
* src/cppunit/TestDecorator.cpp: added. Extracted from TestDecorator.h.
  The test passed to the constructor is now owned by the decorator.

* include/cppunit/extensions/TestCaseDecorator.h:
* src/cppunit/TestCaseDecorator.cpp: added. Decorator for TestCase
  setUp(), tearDown() and runTest().

* include/cppunit/extensions/ExceptionTestCaseDecorator.h: added.
  TestCaseDecorator to expect that a specific exception is thrown.

* include/cppunit/extensions/HelperMacros.h: updated against TestCaller
  change.

* src/cppunit/DefaultFunctor.h: fixed bug (did not return underlying
  test return code).

* src/cppunit/ProtectorChain.cpp: fixed bug in chaing return code.

* src/cppunit/DefaultFunctor.h: fixed bug.

* src/msvc6/testrunner/ActiveTest.h:
* src/msvc6/testrunner/ActiveTest.cpp: updated against
  TestCaseDecorator ownership policy change. Moved inline functions
  to .cpp.

* examples/cppunittest/TestSetUpTest.cpp: updated to use MockTestCase
  and against the new ownership policy.

* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/RepeatedTestTest.cpp: updated against
  TestDecorator ownership policy change.

* examples/cppunittest/ExceptionTestCaseDecoratorTest.h:
* examples/cppunittest/ExceptionTestCaseDecoratorTest.cpp: added. Unit
  tests for ExceptionTestCaseDecoratorTest.
@
text
@d15 1
a15 6
    // BUG: => should return what is returned. Need to update
    // UT to prove there is a bug. Consequence: runTest() is called
    // even if setUp() failed in a 'sub-protector'.
    functor();
    return true;
//    return functor();
@


1.1
log
@* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added. Base class for protectors.

* src/cppunit/DefaultProtector.h:
* src/cppunit/DefaultProtector.cpp: added. Implementation of the default
  protector used to catch std::exception and any other exception.

* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorChain.cpp: added. Implementation of a chain of
  protector, allowing catching custom exception and implementation of
  expected exception.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: updated to use protector.
@
text
@d15 3
d20 1
d24 1
a24 1
    reportTestFailure( failure.message(), context, false );
d35 1
a35 1
    reportTestFailure( message, context, true );
d39 2
a40 3
    reportTestFailure( Message( "uncaught exception of unknown type"), 
                       context, 
                       true );
@

