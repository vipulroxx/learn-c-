head	1.16;
access;
symbols
	REL_1_12_1:1.16
	REL_1_11_6:1.16
	REL_1_11_4:1.16
	REL_1_11_0:1.16
	TG_CPPUNIT_NO_STREAM_AFTER:1.16
	TG_CPPUNIT_NO_STREAM_BEFORE:1.16
	REL_1_10_2:1.16
	REL_1_10_0:1.16
	REL_1_9_14:1.16
	REL_1_9_12:1.16
	BRANCH_1_9_12:1.16.0.2
	TG_BRANCH_1_9_12:1.16
	TG_BEFORE_HPUX_PLUGIN:1.15
	TG_BEFORE_SUN4_PORT:1.14
	REL_1_9_10:1.14
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.12
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.12
	REL_1_9_6:1.12
	REL_1_9_4:1.12
	REL_1_9_0:1.10
	REL_1_8_0:1.10
	REL_1_7_8:1.10
	REL_1_7_3:1.10
	REL_1_7_1:1.10
	REL_1_6_2:1.10
	BRANCH_1_6:1.10.0.2
	REL_1_6_1:1.10
	REL_1_6_0:1.10
	REL_1_5_5:1.1;
locks; strict;
comment	@// @;


1.16
date	2004.02.18.20.45.44;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2003.03.15.08.55.29;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2002.07.12.05.59.58;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2002.06.14.11.12.17;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2002.04.19.14.11.38;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2002.04.19.10.54.19;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2001.07.06.01.31.25;	author smr99;	state Exp;
branches;
next	1.9;

1.9
date	2001.06.17.16.56.03;	author bastiaan;	state Exp;
branches;
next	1.8;

1.8
date	2001.06.11.21.57.23;	author smr99;	state Exp;
branches;
next	1.7;

1.7
date	2001.06.11.21.54.39;	author smr99;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.05.21.35.57;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.02.23.26.36;	author smr99;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.02.22.29.52;	author smr99;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.02.19.53.06;	author smr99;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.18.19.32.42;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.29.14.09.16;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.16
log
@* configure.in:
* config/ax_cxx_gcc_abi_demangle.m4:
* src/cppunit/TypeInfoHelper.cpp: added patch from
Neil Ferguson <nferguso@@eso.org> to use gcc c++ abi to demangle typeinfo
name when available.
@
text
@#include <cppunit/Portability.h>
#include <cppunit/extensions/TypeInfoHelper.h>

#if CPPUNIT_HAVE_RTTI

#include <string>

#if CPPUNIT_HAVE_GCC_ABI_DEMANGLE
#include <cxxabi.h>
#endif


CPPUNIT_NS_BEGIN


std::string 
TypeInfoHelper::getClassName( const std::type_info &info )
{
#if defined(CPPUNIT_HAVE_GCC_ABI_DEMANGLE)  &&  CPPUNIT_HAVE_GCC_ABI_DEMANGLE

  int status = 0;
  char* c_name = 0;

  c_name = abi::__cxa_demangle( info.name(), 0, 0, &status );
  
  std::string name( c_name );
  free( c_name );  

#else   // CPPUNIT_HAVE_GCC_ABI_DEMANGLE

  static std::string classPrefix( "class " );
  std::string name( info.name() );

  // Work around gcc 3.0 bug: strip number before type name.
  unsigned int firstNotDigitIndex = 0;
  while ( firstNotDigitIndex < name.length()  &&
          name[firstNotDigitIndex] >= '0'  &&
          name[firstNotDigitIndex] <= '9' )
    ++firstNotDigitIndex;
  name = name.substr( firstNotDigitIndex );

  if ( name.substr( 0, classPrefix.length() ) == classPrefix )
    return name.substr( classPrefix.length() );

#endif  // CPPUNIT_HAVE_GCC_ABI_DEMANGLE

  return name;
}


CPPUNIT_NS_END

#endif // CPPUNIT_HAVE_RTTI
@


1.15
log
@* src/cppunit/CompilerOutputter.cpp:
* src/cppunit/ProtectorChain.cpp:
* src/cppunit/StringTools.cpp:
* src/cppunit/TestPath.cpp:
* src/cppunit/TypeInfoHelper.cpp:
* src/cppunit/XmlElement.cpp:
* src/cppunit/XmlOutputter.cpp: switched to using unsigned index in loop to
	avoid signed/unsigned warning in vc7.

* include/cppunit/extension/ExceptionTestCaseDecorator.h: removed dll export
	on template (caused link error on vc7).
@
text
@d8 4
d19 12
d44 3
@


1.14
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d19 1
a19 1
  int firstNotDigitIndex = 0;
@


1.13
log
@* src/cppunit/TypeInfoHelper.cpp: added work around for bug #565481.
  gcc 3.0 RTTI name() returns the type prefixed with a number (the
  length of the type). The work around strip the number.

* src/msvc6/testpluginrunner/TestPlugInRunnerApp.cpp: registry key is now
  set. Allow to save settings.

* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.h:
* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.cpp: added layout
  initialization for resizing.

* src/msvc6/testpluginrunner/TestPlugRunner.rc:
* src/msvc6/testpluginrunner/TestPlugInRunner.dsp: added TestRunner
  project files. Somehow I can't get cdxCDynamicDialog to compile
  as a MFC extension. Included all sources files and resources
  as a very dirt work around.

* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/TestRunnerModel.h: those classes are no longer
  exported in the MFC extension. See TestPlugInRunner issue with
  cdxCDynamicDialog.

* include/cppunit/Message.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TestFactoryRegistry.h:
* include/cppunit/XmlElement.h:
* include/cppunit/TypeInfoHelper.h: commented out STL template export
  in DLL. This caused conflicts when instantiting the same template in
  a user project.
@
text
@d9 2
a10 1
namespace CppUnit {
d32 1
a32 1
} //  namespace CppUnit
@


1.12
log
@* src/cppunit/PlugInManager.cpp: fixed bug in unload().

* include/cppunit/TypeInfoHelper.h:
* src/cppunit/TypeInfoHelper.cpp: Implementation is now always available
  is CPPUNIT_HAVE_RTTI is not 0. This removes the need to use
  different libraries. CPPUNIT_USE_TYPEINFO_NAME can be set on a
  case by case basis for HelperMacros.

* src/cppunit/TestFactoryRegistry.cpp: removed unused include of
  TypeInfoHelper.h.

* include/cppunit/TextTestProgressListener.h:
* src/cppunit/TextTestProgressListener.cpp: used endTest() instead
  of done() to finalize.

* src/msvc6/TestPlugInRunner/TestPlugIn.h:
* src/msvc6/TestPlugInRunner/TestPlugIn.cpp: updated to use the
  new test plug-in system.

* examples/simple/SimplePlugIn.cpp:
* examples/simple/simple_plugin.dsp: crossplatform test plug-in
  example using 'simple'.

* examples/msvc6/EasyTestPlugIn/*: projects replaced with the
  crossplatform projecct examples/simple/simple_plugin.dsp.
@
text
@d17 8
@


1.11
log
@* configure.in: added some makefile.am

* contrib/readme.txt: updated.

* contrib/bc5/bc5-makefile.zip: added borland 5.5 makefile. Contributed by
  project cuppa.

* src/cppunit/TypeInfoHelper.cpp: fixed implementation to be more
  portable.
@
text
@d2 1
d4 1
a4 1
#if CPPUNIT_USE_TYPEINFO_NAME
a6 1
#include <cppunit/extensions/TypeInfoHelper.h>
d25 1
a25 1
#endif 
@


1.10
log
@Change from CPPUNIT_USE_TYPEINFO to CPPUNIT_USE_TYPEINFO_NAME
@
text
@d14 2
a15 2
    static std::string classPrefix( "class " );
    std::string name( info.name() );
d17 3
a19 8
    bool has_class_prefix = 0 ==
#if CPPUNIT_FUNC_STRING_COMPARE_STRING_FIRST
	name.compare( classPrefix, 0, classPrefix.length() );
#else
        name.compare( 0, classPrefix.length(), classPrefix );
#endif

    return has_class_prefix ? name.substr( classPrefix.length() ) : name;
@


1.9
log
@use new macro name CPPUNIT_FUNC_STRING_COMPARE_STRING_FIRST
replaced #include of <config.h> with <cppunit/Portability.h>
@
text
@d3 1
a3 1
#if CPPUNIT_USE_TYPEINFO
d30 1
a30 1
#endif // CPPUNIT_USE_TYPEINFO
@


1.8
log
@Revert unintended commit
@
text
@d1 1
a1 1
#include <cppunit/config.h>
d18 1
a18 1
#if FUNC_STRING_COMPARE_STRING_FIRST
@


1.7
log
@*** empty log message ***
@
text
@a0 1
#include <config.h>
@


1.6
log
@* src/cppunit/TypeInfoHelper.cpp: removed #include <config.h>, cppunit/config.h was already included.

* src/cppunit/cppunit.dsp: removed TestAssert.cpp from project.

* added/updated .cvsignore files for beter handling of windows projects.

* added include/cppunit/config.h with a default configuration for VC++ 6.0.

* include/cppunit/.cvsignore: removed config.h from the list of ignored file.

* renamed VC++ configurations without RTTI from "Debug No CU_USE_TYPEINFO" to "Debug Crossplatform".

* include/cppunit/TestAssert.h: added include <math.h> for fabs().
@
text
@d1 1
@


1.5
log
@Determine string::compare() weirdness automatically.
@
text
@a0 1
#include <config.h>
@


1.4
log
@Change to templatized TestAssert::assertEquals() and the new CPPUNIT_ASSERT* macros
@
text
@d1 1
d19 1
a19 1
#if CPPUNIT_STRING_COMPARE_STRING_FIRST
@


1.3
log
@Replace CU_ by CPPUNIT_.
@
text
@d1 3
a3 1
#ifdef CPPUNIT_USE_TYPEINFO
d14 2
a15 1
  static std::string classPrefix( "class " );
d17 6
a22 1
  std::string name( info.name() );
d24 1
a24 2
  return ( name.compare( 0, classPrefix.length(), classPrefix ) == 0 ) ?
      name.substr( classPrefix.length() ) : name;
@


1.2
log
@  * Symbol CU_USE_TYPEINFO must be defined instead of USE_TYPEINFO to
    compile RTTI.
  * Added back default constructor to TestSuiteBuilder which use RTTI.
    It is available only if CU_USE_TYPEINFO is defined.
  * Moved TypeInfoHelper.h from src/cppunit to include/cppunit/extensions.
  * Macro CU_TEST_SUITE in HelperMacros.h now use TestSuiteBuilder default
    constructor if CU_USE_TYPEINFO is defined, otherwise it use the
    type name given to the CU_TEST_SUITE macro.
  * TestFactoryRegistry::registerFactory(factory) now generate a dummy
    name based on a serial number instead of using RTTI. The macro
    CU_TEST_SUITE_REGISTRATION and class AutoRegisterSuite can now
    when CU_USE_TYPEINFO is not defined.
  * Added a new Configuration named "Debug Without CU_USE_TYPEINFO" to
    msvc6 projects. The flag CU_USE_TYPEINFO is not defined in that
    configuration.
@
text
@d1 1
a1 1
#ifdef CU_USE_TYPEINFO
d23 1
a23 1
#endif // CU_USE_TYPEINFO
@


1.1
log
@Merged Baptiste Lepilleurs CppUnitW 1.2.
Some differences:
TypeInfo stuff (in TestSuite) compiled in only if USE_TYPEINFO is set.
TestSuite.getTests now returns a const ref instead of taking a ref as param.
Removed auto_ptr stuff from TestFactoryRegistry: auto_ptr cannot be used in
containers.
@
text
@d1 1
a1 1
#ifdef USE_TYPEINFO
d4 1
a4 2

#include "TypeInfoHelper.h"
d23 1
a23 1
#endif // USE_TYPEINFO
@

