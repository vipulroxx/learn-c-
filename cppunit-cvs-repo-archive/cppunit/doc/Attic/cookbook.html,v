head	1.4;
access;
symbols
	REL_1_7_8:1.3
	REL_1_7_3:1.3
	REL_1_7_1:1.3
	REL_1_6_2:1.3
	BRANCH_1_6:1.3.0.2
	REL_1_6_1:1.3
	REL_1_6_0:1.3
	REL_1_5_5:1.1.1.1
	REL_1_5_4:1.1.1.1
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2002.03.28.15.50.09;	author blep;	state dead;
branches;
next	1.3;

1.3
date	2001.06.02.22.29.52;	author smr99;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.29.03.06.39;	author smr99;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* doc/cookbook.html: removed. Replaced by cookbook.doc.

* doc/cookbook.dox: added, conversion of cookbook.html to Doxygen format.

* doc/other_documentation.dox: added groups definition.

* doc/Makefile.am: replaced cookbook.html by cookbook.dox

* doc/Doxyfile.in: added predefined CPPUNIT_HAVE_CPP_SOURCE_ANNOTATION.
Replaced cookbook.html by cookbook.dox.

* include/cppunitui/mfc/TestRunner.h: added, extracted from
include/msvc6/testrunner/TestRunner.h. Moved class TestRunner to namespace
CppUnit::MfcUi.

* include/msvc6/testrunner/TestRunner.h: deprecated. A simple typedef to
CppUnit::MfcUi::TestRunner.

* include/textui/TestRuner.h: added, extracted from
include/cppunit/TextTestRunner.h.

* src/cppunit/TextTestRunner.cpp: renamed TestRunner.cpp. Moved into
namespace CppUnit::TextUi.

* src/msvc6/testruner/TestRunner.cpp: moved into namespace CppUnit::MfcUi.

* src/cppunit/CompilerOutputter.cpp: removed printing "- " before
NotEqualException addional message, for consistency between different
TestRunner (Mfc,Text...)

* include/cppunit/Asserter.h:
* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/Outputter.h:
* include/cppunit/SourceLine.h:
* include/cppunit/TestAssert.h:
* include/cppunit/TestCaller.h:
* include/cppunit/TestFailure.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: doc update. organization
in groups.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.cpp:
* examples/msvc6/HostApp/HostApp.cpp: updated to use
CppUnit::MfcUi::TestRunner.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use
CppUnit::TextUi::TestRunner.
@
text
@<HTML>
  <HEAD>
    <TITLE>CppUnit Cookbook</TITLE>
  </HEAD>
<BODY BGCOLOR="#ffffff" LINK="#0000ff" VLINK="#800080">

  <P>	
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
  </P>
  <H1>CppUnit Cookbook</H1>
  <P>
    Here is a short cookbook to help you get started.
    Note that all CppUnit types are defined in the CppUnit
    namespace.  For brevity, the prefix <b>CppUnit::</b>
    is omitted in the following examples.
  </P>
  <H2>Simple Test Case</H2>
  <P>
    You want to know whether your code is working. 
    How do you do it? 
    There are many ways. Stepping through a debugger or 
    littering your code with stream output calls are two of 
    the simpler ways, but they both have drawbacks. 
    Stepping through your code is a good idea, but it 
    is not automatic. You have to do it every time you
    make changes. Streaming out text is also fine, 
    but it makes code ugly and it generates far more 
    information than you need most of the time.
  </P>
  <P>
    Tests in CppUnit can be run automatically. 
    They are easy to set up and once you have 
    written them, they are always there to help 
    you keep confidence in the quality of your code.
  </P>
  <P>
    To make a simple test, here is what you do:
  </P>
  <P>
    Subclass the TestCase class. 
    Override the method <code>runTest ()</code>. When you 
    want to check a value, call <code>CPPUNIT_ASSERT (bool)</code> 
    and pass in an expression that is true if the 
    test succeeds. 
  </P>
  <P>
    For example, to test the equality comparison 
    for a Complex number class, write:
  </P>
  <TT><PRE>&#9;class ComplexNumberTest : public TestCase {&nbsp;
&#9;public: 
                    ComplexNumberTest (string name) : TestCase (name) {}
        void        runTest () {
                        CPPUNIT_ASSERT (Complex (10, 1) == Complex (10, 1));
                        CPPUNIT_ASSERT (!(Complex (1, 1) == Complex (2, 2)));
                    }
        };</PRE>
    </TT>
    <P>
      That was a very simple test. Ordinarily, 
      you'll have many little test cases that you'll 
      want to run on the same set of objects. To do 
      this, use a fixture.
    </P>
    <P>&nbsp;</P>
    <H2>Fixture</H2>
    <P>
      A fixture is a known set of objects that 
      serves as a base for a set of test cases. 
      Fixtures come in very handy when you are 
      testing as you develop. 
      Let's try out this style of development and 
      learn about fixtures along the away. Suppose 
      that we are really developing a complex 
      number class. Let's start by defining a 
      empty class named Complex.
    </P>
    <TT><PRE>&#9;class Complex {};&nbsp;</PRE>
    </TT>
    <P>Now create an instance of ComplexNumberTest 
      above, compile the code and see what happens. 
      The first thing we notice is a few compiler 
      errors. The test uses operator==, but it is 
      not defined. Let's fix that.
    </P>
    <TT><PRE>&#9;bool operator== (const Complex&amp; a, const Complex&amp; b) { return true; }</PRE>
    </TT>
    <P>
      Now compile the test, and run it. This time it 
      compiles but the test fails. 
      We need a bit more to get an operator== working 
      correctly, so we revisit the code.
    </P>
    <TT><PRE>&#9;class Complex {&nbsp;
        friend bool operator== (const Complex&amp; a, const Complex&amp; b);
        double      real, imaginary;
        public:
                    Complex ( double r, double i = 0 ) : real(r),imaginary(i) {}
        };

        bool operator== (const Complex&amp; a, const Complex&amp; b)
        { return eq(a.real,b.real) &amp;&amp; eq(a.imaginary,b.imaginary); }</PRE>
    </TT>
    <P>
      If we compile now and run our test it will pass. 
    </P>
    <P>
      Now we are ready to add new operations and 
      new tests. At this point a fixture would be 
      handy. We would probably be better off when 
      doing our tests if we decided to instantiate 
      three or four complex numbers and reuse them 
      across our tests. 
    </P>
    <P>
      Here is how we do it:
    </P>
    <OL>
      <LI>Add member variables for each part of the fixture </LI>
      <LI>Override "setUp ()" to initialize the variables </LI>
      <LI>Override "tearDown ()" to release any permanent resources you allocated in "setUp ()"</LI>
    </OL>
    <TT><PRE>&#9;class ComplexNumberTest : public TestCase  {
&#9;private:
        Complex &#9;*m_10_1, *m_1_1; *m_11_2;
&#9;protected:
&#9;void&#9;&#9;setUp ()  {
&#9;&#9;&#9;    m_10_1 = new Complex (10, 1);
&#9;&#9;&#9;    m_1_1  = new Complex (1, 1);
&#9;&#9;&#9;    m_11_2  = new Complex (11, 2);  
                        }
&#9;void&#9;&#9;tearDown ()  {
&#9;&#9;&#9;    delete m_10_1, delete m_1_1, delete m_11_2;
&#9;&#9;&#9;}
&#9;};</PRE>
    </TT>
    <P>
      Once we have this fixture, we can add the complex 
      addition test case any any others that we need 
      over the course of our development.
    </P>
    <P>&nbsp;</P>
    <H2>Test Case</H2>
    <P>
      How do you write and invoke individual tests using a fixture? 
    </P>
    <P>
      There are two steps to this process:
    </P>
    <OL>
      <LI>Write the test case as a method in the fixture class</LI>
      <LI>Create a TestCaller which runs that particular method</LI>
    </OL>

<P>Here is our test case class with a few extra case methods:</P>
<TT><PRE>&#9;class ComplexNumberTest : public TestCase  {
&#9;private:
        Complex &#9;*m_10_1, *m_1_1; *m_11_2;
&#9;public:
&#9;void&#9;&#9;setUp ()  {
&#9;&#9;&#9;    m_10_1 = new Complex (10, 1);
&#9;&#9;&#9;    m_1_1  = new Complex (1, 1);
&#9;&#9;&#9;    m_11_2 = new Complex (11, 2);  
                        }
&#9;void&#9;&#9;tearDown ()  {
&#9;&#9;&#9;    delete m_10_1, delete m_1_1, delete m_11_2;
&#9;&#9;&#9;}
&#9;void&#9;&#9;testEquality ()  {
&#9;&#9;&#9;    CPPUNIT_ASSERT (*m_10_1 == *m_10_1);
&#9;&#9;&#9;    CPPUNIT_ASSERT (!(*m_10_1 == *m_11_2));
&#9;&#9;&#9;}
&#9;void&#9;&#9;testAddition ()  {
&#9;&#9;&#9;    CPPUNIT_ASSERT (*m_10_1 + *m_1_1 == *m_11_2);
                 &#9;}
&#9;};</PRE>
</TT><P>One may create and run instances for each test case like this:</P>
<TT><PRE>&#9;TestCaller&lt;ComplexNumberTest&gt; test("testEquality", &amp;ComplexNumberTest::testEquality);
        test.run (); </PRE>
</TT><P>The second argument to the test caller constructor is the address of a method on ComplexNumberTest. When the test caller is run, that specific method will be run.  This is not a useful thing to do, however, as no diagnostics will be
    displayed.  One will normally use a TestRunner (see below) to display
    the results.
    </P>

    <P>Once you have several tests, organize them into a suite.</P>
<P>&nbsp;</P>
<H2>Suite</H2>
<P>How do you set up your tests so that you can run them all at once?<BR>
<BR>
CppUnit provides a TestSuite class that runs any number of TestCases together.
    We saw, above, how to run a single test case.
To create a suite of two or more tests, you do the following:</P>
<TT><PRE>&#9;TestSuite suite;
&#9;TestResult result;
&#9;suite.addTest (new TestCaller&lt;ComplexNumberTest&gt;("testEquality", &amp;ComplexNumberTest::testEquality));
&#9;suite.addTest (new TestCaller&lt;ComplexNumberTest&gt;("testAddition", &amp;ComplexNumberTest::testAddition));
&#9;suite.run (&amp;result);
           </PRE>
</TT><P>TestSuites don't only have to contain callers for TestCases. They can contain any object that implements the Test interface. For example, you can create a TestSuite in your code and I can create one in mine, and we can run them together by creating a TestSuite that contains both: </P>
<TT><PRE>&#9;TestSuite suite;
&#9;TestResult result;
&#9;suite.addTest (ComplexNumberTest::suite ());
&#9;suite.addTest (SurrealNumberTest::suite ());
&#9;suite.run (&amp;result);</PRE>
</TT><P>&nbsp;</P>
<H2>TestRunner</H2>
<P><b>FIXME:</b> check over; MSVC6 only.
How do you run your tests and collect their results? </P>
<P>Once you have a test suite, you'll want to run it. CppUnit provides tools to define the suite to be run and to display its results. You make your suite accessible to a TestRunner program with a static method <I>suite</I> that returns a test suite. <BR>
For example, to make a ComplexNumberTest suite available to a TestRunner, add the following code to ComplexNumberTest: </P>
<TT><PRE>&#9;public: static Test *suite ()  {
&#9;    TestSuite *suiteOfTests = new TestSuite;
&#9;    suiteOfTests-&gt;addTest (new TestCaller&lt;ComplexNumberTest&gt;("testEquality", testEquality));
&#9;    suiteOfTests-&gt;addTest (new TestCaller&lt;ComplexNumberTest&gt;("testAddition", testAddition));
            return suiteOfTests;
&#9;}</PRE>
</TT>
<P>To use the text version, include the header file for the test in TestRunner.cpp:</P>
<TT><PRE>&#9;#include "ExampleTestCase.h"
&#9;#include "ComplexNumberTest.h"</PRE>
</TT><P>And add a call to "addTest (string, Test *)" in the "main ()" function:</P>
<TT><PRE>&#9;int main (int ac, char **av)  {
&#9;    TestRunner runner;
&#9;    runner.addTest (ExampleTestCase::suite ());
&#9;    runner.addTest (ComplexNumberTest::suite ());
&#9;    runner.run ();
&#9;    return 0;
&#9;}</PRE>
</TT><P>The TestRunner will run the tests. If all the tests pass, you'll get an informative message. If any fail, you'll get the following information:</P>
<OL>

<LI>The name of the test case that failed</LI>
<LI>The name of the source file that contains the test</LI>
<LI>The line number where the failure occurred</LI>
<LI>All of the text inside the call to CPPUNIT_ASSERT which detected the failure</LI></OL>

<P>CppUnit distinguishes between <I>failures</I> and <I>errors</I>. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like division by zero and other exceptions thrown by the C++ runtime or your code.</P>

<P>Original version by Michael Feathers, 
   with small changes - e.g. removal of GUI docs.
   The example has to be adjusted to the current library structure,
   and possibly be setup in the examples directory. 
</P>
</BODY>
</HTML>
@


1.3
log
@Change to templatized TestAssert::assertEquals() and the new CPPUNIT_ASSERT* macros
@
text
@@


1.2
log
@Update cookbook and change log.
@
text
@d42 1
a42 1
    want to check a value, call <code>assert (bool)</code> 
d54 2
a55 2
                        assert (Complex (10, 1) == Complex (10, 1));
                        assert (!(Complex (1, 1) == Complex (2, 2)));
d169 2
a170 2
&#9;&#9;&#9;    assert (*m_10_1 == *m_10_1);
&#9;&#9;&#9;    assert (!(*m_10_1 == *m_11_2));
d173 1
a173 1
&#9;&#9;&#9;    assert (*m_10_1 + *m_1_1 == *m_11_2);
d234 1
a234 1
<LI>All of the text inside the call to assert which detected the failure</LI></OL>
@


1.1
log
@Initial revision
@
text
@d11 6
a16 1
  <P>Here is a short cookbook to help you get started. </P>
d98 1
a98 3
                    Complex ()  {
                    real = imaginary = 0.0;
                    }
d159 1
a159 1
&#9;protected:
d176 9
a184 5
</TT><P>Create and run instances for each test case like this:</P>
<TT><PRE>&#9;test = new TestCaller&lt;ComplexNumberTest&gt;("testEquality", ComplexNumberTest::testEquality);
        test->run (); </PRE>
</TT><P>The second argument to the test caller constructor is the address of a method on ComplexNumberTest. When the test caller is run, that specific method will be run.</P>
<P>Once you have several tests, organize them into a suite.</P>
d189 3
a191 6
CppUnit provides a TestSuite class that runs any number of TestCases together. For example, to run a single test case, you execute:</P>
<TT><PRE>&#9;TestResult result;
&#9;TestCaller&lt;ComplexNumberTest&gt; test ("testAddition", ComplexNumberTest::testAddition);
&#9;Test.run (&amp;result);</PRE>
</TT><P>&nbsp;</P>
<P>To create a suite of two or more tests, you do the following:</P>
d194 2
a195 2
&#9;suite.addTest (new TestCaller&lt;ComplexNumberTest&gt;("testEquality", ComplexNumberTest::testEquality));
&#9;suite.addTest (new TestCaller&lt;ComplexNumberTest&gt;("testAddition", ComplexNumberTest::testAddition));
d200 3
a202 2
&#9;suite.addTest (ComplexNumberTest.suite ());
&#9;suite.addTest (SurrealNumberTest.suite ());
d206 2
a207 1
<P>How do you run your tests and collect their results? </P>
@


1.1.1.1
log
@initial check in.
@
text
@@
