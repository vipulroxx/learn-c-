head	1.6;
access;
symbols
	REL_1_5_4:1.4
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@// @;


1.6
date	2001.04.28.18.23.32;	author bastiaan;	state dead;
branches;
next	1.5;

1.5
date	2001.04.14.22.37.30;	author bastiaan;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.14.14.45.56;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.13.19.24.13;	author e-s;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.11.18.53.12;	author e-s;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.29;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.29;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Moved files in subdir cppunit to src/cppunit.
@
text
@#include "cppunit/Exception.h"

namespace CppUnit {

const std::string 
CppUnit::Exception::UNKNOWNFILENAME = 
  "<unknown>";
const int CppUnit::Exception::UNKNOWNLINENUMBER = -1;

/// Construct the exception
CppUnit::Exception::Exception (const Exception& other)
  : exception (other)
{ 
  m_message       = other.m_message; 
  m_lineNumber    = other.m_lineNumber;
  m_fileName      = other.m_fileName;
} 

CppUnit::Exception::Exception (std::string message, long lineNumber, std::string fileName)
  : m_message (message), m_lineNumber (lineNumber), m_fileName (fileName)
{
}


/// Destruct the exception
CppUnit::Exception::~Exception ()
{}


/// Perform an assignment
Exception& 
CppUnit::Exception::operator= (const Exception& other)
{ 
  exception::operator= (other);

  if (&other != this) {
    m_message       = other.m_message; 
    m_lineNumber    = other.m_lineNumber;
    m_fileName      = other.m_fileName;
  }

  return *this; 
}


/// Return descriptive message
const char*
CppUnit::Exception::what() const throw ()
{ return m_message.c_str (); }

/// The line on which the error occurred
long 
CppUnit::Exception::lineNumber ()
{ return m_lineNumber; }


/// The file in which the error occurred
std::string 
CppUnit::Exception::fileName ()
{ return m_fileName; }

} // namespace CppUnit
@


1.5
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@@


1.4
log
@Removed all 'using namespace' occurrences.
@
text
@d1 1
a1 1
#include "Exception.h"
@


1.3
log
@code beautification.
@
text
@d3 1
a3 1
using namespace CppUnit;
d62 1
@


1.2
log
@added TextResult files.
@
text
@d21 2
a22 1
{}
@


1.1
log
@Initial revision
@
text
@d5 4
a8 2
const std::string Exception::UNKNOWNFILENAME = "<unknown>";
const int Exception::UNKNOWNLINENUMBER = -1;
d11 1
a11 1
inline Exception::Exception (const Exception& other)
d19 1
a19 1
inline Exception::Exception (std::string message, long lineNumber, std::string fileName)
d25 1
a25 1
inline Exception::~Exception ()
d30 2
a31 2
inline Exception& 
  Exception::operator= (const Exception& other)
d46 2
a47 2
inline const char*
  Exception::what() const throw ()
d51 2
a52 2
inline long 
  Exception::lineNumber ()
d57 2
a58 2
inline std::string 
  Exception::fileName ()
@


1.1.1.1
log
@initial check in.
@
text
@@
