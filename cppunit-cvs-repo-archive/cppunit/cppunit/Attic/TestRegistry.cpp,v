head	1.7;
access;
symbols
	REL_1_5_4:1.3
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2001.04.28.18.23.32;	author bastiaan;	state dead;
branches;
next	1.6;

1.6
date	2001.04.23.22.19.10;	author bastiaan;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.14.22.37.30;	author bastiaan;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.14.21.42.44;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.14.14.45.56;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.13.19.25.05;	author e-s;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Moved files in subdir cppunit to src/cppunit.
@
text
@#include "cppunit/TestRegistry.h"
#include "cppunit/Test.h"

namespace CppUnit {

TestRegistry* 
TestRegistry::s_registry = NULL;

TestRegistry&
TestRegistry::getRegistry ()
{
  if (NULL == s_registry) {
    s_registry = new TestRegistry();
  }
  return *s_registry;
}

void 
TestRegistry::addTest(std::string name, Test *test)
{ 
  getRegistry().m_registry_names.push_back (name);
  getRegistry().m_registry_tests.push_back (test); 
}

const std::vector<std::string>&
TestRegistry::getAllTestNames () const
{
  return getRegistry().m_registry_names;
}

const std::vector<Test*>& 
TestRegistry::getAllTests() const
{
  return getRegistry().m_registry_tests;
}

std::vector<Test*> 
TestRegistry::getTest (const std::string& testCase) const
{
  std::vector<Test*> res;
  std::vector<Test*>::iterator test_it;
  std::vector<std::string>::iterator name_it;
  for (test_it = getRegistry().m_registry_tests.begin (),
       name_it = getRegistry().m_registry_names.begin ();
       test_it != getRegistry().m_registry_tests.end ();
       ++test_it, ++name_it) {
    if ((*name_it) == testCase) {
      res.push_back((*test_it));
      break;
    }
  }
  return(res);
}

TestRegistry::~TestRegistry ()
{
    for (std::vector<Test*>::iterator it = m_registry_tests.begin ();
         it != m_registry_tests.end ();
         ++it) {
        delete *it;
    }
}

TestRegistry::TestRegistry ()
{
}

} // namespace CppUnit

@


1.6
log
@Merged Baptiste Lepilleurs patch for TestRegistry: now TestCases do not automatically register with the Registry anymore.
@
text
@@


1.5
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@a3 2
//using namespace std;

d6 2
a7 5
std::vector<std::string> s_registry_names;
std::vector<Test*> s_registry_tests;

static TestRegistry* s_registry;
static bool instanciated=false;
d12 2
a13 3
  if(!instanciated) {
    s_registry=new TestRegistry();
    instanciated=true;
d21 2
a22 2
  s_registry_names.push_back (name);
  s_registry_tests.push_back (test); 
d28 1
a28 1
  return(s_registry_names);
d34 1
a34 1
  return(s_registry_tests);
d43 3
a45 3
  for (test_it = s_registry_tests.begin (),
       name_it = s_registry_names.begin ();
       test_it != s_registry_tests.end ();
d57 3
a59 3
    for (std::vector<Test*>::iterator it = s_registry_tests.begin ();
             it != s_registry_tests.end ();
             ++it)
d61 1
@


1.4
log
@Always use namespace std for strings and vectors.
@
text
@d1 2
a2 2
#include "TestRegistry.h"
#include "Test.h"
@


1.3
log
@Removed all 'using namespace' occurrences.
@
text
@d25 1
a25 1
TestRegistry::addTest(string name, Test *test)
d31 1
a31 1
const vector<string>&
d37 1
a37 1
const vector<Test*>& 
d43 2
a44 2
vector<Test*> 
TestRegistry::getTest (const string& testCase) const
d46 3
a48 3
  vector<Test*> res;
  vector<Test*>::iterator test_it;
  vector<string>::iterator name_it;
d63 1
a63 1
    for (vector<Test*>::iterator it = s_registry_tests.begin ();
@


1.2
log
@fixed registry initialized flag.
@
text
@d4 3
a6 2
using namespace std;
using namespace CppUnit;
d73 1
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
  if(!instanciated)
d18 2
@


1.1.1.1
log
@initial check in.
@
text
@@
