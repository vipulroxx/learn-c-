head	1.9;
access;
symbols
	REL_1_5_4:1.6
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@// @;


1.9
date	2001.04.28.18.23.32;	author bastiaan;	state dead;
branches;
next	1.8;

1.8
date	2001.04.23.22.19.10;	author bastiaan;	state Exp;
branches;
next	1.7;

1.7
date	2001.04.14.22.37.30;	author bastiaan;	state Exp;
branches;
next	1.6;

1.6
date	2001.04.14.14.45.56;	author bastiaan;	state Exp;
branches;
next	1.5;

1.5
date	2001.04.14.01.02.14;	author bastiaan;	state Exp;
branches;
next	1.4;

1.4
date	2001.04.13.16.44.48;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.13.19.27.23;	author e-s;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.11.18.53.13;	author e-s;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Moved files in subdir cppunit to src/cppunit.
@
text
@#include <typeinfo>
#include <stdexcept>
#include <cmath>

#include "cppunit/TestCase.h"
#include "cppunit/Exception.h"
#include "cppunit/TestResult.h"
#include "estring.h"

namespace CppUnit {

/// Create a default TestResult
CppUnit::TestResult* TestCase::defaultResult ()
{ return new TestResult; } 


/// Check for a failed general assertion 
void TestCase::assertImplementation (bool          condition,
  std::string   conditionExpression,
  long          lineNumber,
  std::string   fileName)
{ 
  if (!condition) 
    throw Exception (conditionExpression, lineNumber, fileName); 
}


/// Check for a failed equality assertion 
void TestCase::assertEquals (long        expected, 
  long        actual,
  long        lineNumber,
  std::string fileName)
{ 
  if (expected != actual) 
    assertImplementation (false, notEqualsMessage(expected, actual), lineNumber, fileName); 
}


/// Check for a failed equality assertion
void TestCase::assertEquals (double        expected, 
  double        actual, 
  double        delta,
  long          lineNumber,
  std::string   fileName)
{ 
  if (fabs (expected - actual) > delta) 
    assertImplementation (false, notEqualsMessage(expected, actual), lineNumber, fileName); 

}


/// Run the test and catch any exceptions that are triggered by it 
void 
TestCase::run (TestResult *result)
{
  result->startTest (this);
  
  setUp ();
  
  try {

    runTest ();
    
  }
  catch (Exception& e) {
    Exception *copy = new Exception (e);
    result->addFailure (this, copy);
    
  }
  catch (exception& e) {
    result->addError (this, new Exception (e.what ()));
    
  }
  catch (...) {
    Exception *e = new Exception ("unknown exception");
    result->addError (this, e);

  }

  tearDown ();

  result->endTest (this);

}


/// A default run method 
TestResult *TestCase::run ()
{
  TestResult *result = defaultResult ();

  run (result);
  return result;

}


/// All the work for runTest is deferred to subclasses 
void TestCase::runTest ()
{
}


/// Build a message about a failed equality check 
std::string TestCase::notEqualsMessage (long expected, long actual)
{ 
  return "expected: " + estring (expected) + " but was: " + estring (actual); 
}


/// Build a message about a failed equality check 
std::string TestCase::notEqualsMessage (double expected, double actual)
{ 
  return "expected: " + estring (expected) + " but was: " + estring (actual); 
}



/** Constructs a test case.
 *  \param name the name of the TestCase.
 */
TestCase::TestCase (std::string name) 
  : m_name (name) 
{
}

/** Constructs a test case for a suite.
 *  This TestCase is intended for use by the TestCaller and should not
 *  be used by a test case for which run() is called.
 **/
TestCase::TestCase () 
  : m_name ("") 
{
}


/// Destructs a test case
TestCase::~TestCase ()
{}


/// Returns a count of all the tests executed
int TestCase::countTestCases () const
{ return 1; }


/// Returns the name of the test case
std::string 
  TestCase::getName () const
{ 
  return m_name; 
}


/// A hook for fixture set up
void TestCase::setUp ()
{}
  

/// A hook for fixture tear down
void TestCase::tearDown ()
{}


/// Returns the name of the test case instance
std::string 
  TestCase::toString () const
{ 
  const type_info& thisClass = typeid (*this); 
  return std::string (thisClass.name ()) + "." + getName (); 
}
  
} // namespace CppUnit
@


1.8
log
@Merged Baptiste Lepilleurs patch for TestRegistry: now TestCases do not automatically register with the Registry anymore.
@
text
@@


1.7
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@a7 1
#include "cppunit/TestRegistry.h"
a119 2
 *  This TestCase is added to the global registry.
 *
a124 1
  TestRegistry::getRegistry().addTest(m_name, this);
d128 3
a130 4
 *  This TestCase is \b not added to the global registry,
 *  it is supposed that it will be added to a suite.
 *
 */
d132 1
a132 1
  : m_name ("In a suite.") 
@


1.6
log
@Removed all 'using namespace' occurrences.
@
text
@a0 6
#include "TestCase.h"
#include "Exception.h"
#include "TestResult.h"
#include "estring.h"
#include "TestRegistry.h"

d4 6
@


1.5
log
@Fix bug #224542: bogus 'inline' specifiers in *.cpp files.
@
text
@d11 1
a11 1
using namespace CppUnit;
d178 1
@


1.4
log
@Merged patch #403542 by Tim Jansen <timj@@systembureau.com>.
Fixes bug #220207: "const" problem with countTestCases.
Fixes 'TestSuite::deleteContent() clear vector'
Fixes 'Fix: TestCaller registered Fixture' (see patch #403541).
Fixes bug #415219: example did not test anything.
@
text
@d125 1
a125 1
inline TestCase::TestCase (std::string name) 
d136 1
a136 1
inline TestCase::TestCase () 
d143 1
a143 1
inline TestCase::~TestCase ()
d148 1
a148 1
inline int TestCase::countTestCases () const
d153 1
a153 1
inline std::string 
d161 1
a161 1
inline void TestCase::setUp ()
d166 1
a166 1
inline void TestCase::tearDown ()
d171 1
a171 1
inline std::string 
@


1.3
log
@default constructor does not register any more - it expects the test being registered in a suite.
@
text
@d131 1
a131 1
/** Constructs a test case.
d148 1
a148 1
inline int TestCase::countTestCases ()
@


1.2
log
@added TextResult files.
@
text
@d54 2
a55 1
void TestCase::run (TestResult *result)
d62 1
d66 1
a66 1
  catch (Exception e) {
d71 1
a71 1
  catch (exception e) {
d120 5
a124 1
/// Constructs a test case
d128 2
a129 2
  if(m_name=="") 
    return;
d131 8
a138 2
  TestRegistry::getRegistry().addTest(m_name, this);
  
@


1.1
log
@Initial revision
@
text
@d5 1
d121 7
a127 1
{}
@


1.1.1.1
log
@initial check in.
@
text
@@
