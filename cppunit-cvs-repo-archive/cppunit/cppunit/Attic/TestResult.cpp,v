head	1.5;
access;
symbols
	REL_1_5_4:1.3
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@// @;


1.5
date	2001.04.28.18.23.32;	author bastiaan;	state dead;
branches;
next	1.4;

1.4
date	2001.04.14.22.37.30;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2001.04.14.14.45.56;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2001.04.14.01.02.14;	author bastiaan;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Moved files in subdir cppunit to src/cppunit.
@
text
@#include "cppunit/TestResult.h"

namespace CppUnit {

/// Destroys a test result
TestResult::~TestResult ()
{
  std::vector<TestFailure *>::iterator it;

  for (it = m_errors.begin (); it != m_errors.end (); ++it)
    delete *it;

  for (it = m_failures.begin (); it != m_failures.end (); ++it)
    delete *it;

  delete m_syncObject;
}

/// Construct a TestResult

  TestResult::TestResult ()
    : m_syncObject (new SynchronizationObject ())
{ m_runTests = 0; m_stop = false; }


/** Adds an error to the list of errors. 
 *  The passed in exception
 *  caused the error
 */
void 
  TestResult::addError (Test *test, Exception *e)
{ ExclusiveZone zone (m_syncObject); m_errors.push_back (new TestFailure (test, e)); }


/** Adds a failure to the list of failures. The passed in exception
 * caused the failure.
 */
void 
  TestResult::addFailure (Test *test, Exception *e)
{ ExclusiveZone zone (m_syncObject); m_failures.push_back (new TestFailure (test, e)); }


/// Informs the result that a test will be started.
void 
  TestResult::startTest (Test *test)
{ ExclusiveZone zone (m_syncObject); m_runTests++; }

  
/// Informs the result that a test was completed.
void 
  TestResult::endTest (Test *test)
{ ExclusiveZone zone (m_syncObject); }


/// Gets the number of run tests.
int 
  TestResult::runTests ()
{ ExclusiveZone zone (m_syncObject); return m_runTests; }


/// Gets the number of detected errors.
int 
  TestResult::testErrors ()
{ ExclusiveZone zone (m_syncObject); return m_errors.size (); }


/// Gets the number of detected failures.
int 
  TestResult::testFailures ()
{ ExclusiveZone zone (m_syncObject); return m_failures.size (); }


/// Returns whether the entire test was successful or not.
bool 
  TestResult::wasSuccessful ()
{ ExclusiveZone zone (m_syncObject); return m_failures.size () == 0 && m_errors.size () == 0; }


/// Returns a vector of the errors.
std::vector<TestFailure *>& 
  TestResult::errors ()
{ ExclusiveZone zone (m_syncObject); return m_errors; }


/// Returns a vector of the failures.
std::vector<TestFailure *>& 
  TestResult::failures ()
{ ExclusiveZone zone (m_syncObject); return m_failures; }


/// Returns whether testing should be stopped
bool 
  TestResult::shouldStop ()
{ ExclusiveZone zone (m_syncObject); return m_stop; }


/// Stop testing
void 
  TestResult::stop ()
{ ExclusiveZone zone (m_syncObject); m_stop = true; }


/** Accept a new synchronization object for protection of this instance
 * TestResult assumes ownership of the object
 */
void 
  TestResult::setSynchronizationObject (SynchronizationObject *syncObject)
{ delete m_syncObject; m_syncObject = syncObject; }

} // namespace CppUnit
@


1.4
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@@


1.3
log
@Removed all 'using namespace' occurrences.
@
text
@d1 1
a1 1
#include "TestResult.h"
@


1.2
log
@Fix bug #224542: bogus 'inline' specifiers in *.cpp files.
@
text
@d3 1
a3 1
using namespace CppUnit;
d110 1
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
inline 
d30 1
a30 1
inline void 
d38 1
a38 1
inline void 
d44 1
a44 1
inline void 
d50 1
a50 1
inline void 
d56 1
a56 1
inline int 
d62 1
a62 1
inline int 
d68 1
a68 1
inline int 
d74 1
a74 1
inline bool 
d80 1
a80 1
inline std::vector<TestFailure *>& 
d86 1
a86 1
inline std::vector<TestFailure *>& 
d92 1
a92 1
inline bool 
d98 1
a98 1
inline void 
d106 1
a106 1
inline void 
@


1.1.1.1
log
@initial check in.
@
text
@@
