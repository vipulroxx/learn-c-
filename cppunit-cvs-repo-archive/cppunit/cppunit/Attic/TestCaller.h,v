head	1.5;
access;
symbols
	REL_1_5_4:1.4
	initial:1.1.1.1
	e-s:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2001.04.14.22.37.30;	author bastiaan;	state dead;
branches;
next	1.4;

1.4
date	2001.04.13.16.44.48;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.13.19.28.14;	author e-s;	state Exp;
branches;
next	1.2;

1.2
date	2000.10.11.18.53.13;	author e-s;	state Exp;
branches;
next	1.1;

1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.10.05.18.37.28;	author e-s;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@#ifndef CPPUNIT_TESTCALLER_H
#define CPPUNIT_TESTCALLER_H

#ifndef CPPUNIT_TESTCASE_H
#include "TestCase.h"
#endif

#include <stl.h>

namespace CppUnit {

  /** Provides access to a test case method.
   * A test caller provides access to a test case method 
   * on a test case class.  Test callers are useful when 
   * you want to run an individual test or add it to a 
   * suite.
   * Test Callers invoke only one Test (i.e. test method) on one 
   * Fixture of a TestCase.
   * 
   * Here is an example:
   * \code
   * class MathTest : public CppUnit::TestCase {
   *         ...
   *     public:
   *         void         setUp ();
   *         void         tearDown ();
   *
   *         void         testAdd ();
   *         void         testSubtract ();
   * };
   *
   * CppUnit::Test *MathTest::suite () {
   *     CppUnit::TestSuite *suite = new CppUnit::TestSuite;
   *
   *     suite->addTest (new CppUnit::TestCaller<MathTest> ("testAdd", testAdd));
   *     return suite;
   * }
   * \endcode
   *
   * You can use a TestCaller to bind any test method on a TestCase
   * class, as long as it accepts void and returns void.
   * TestCallers are automatically registered in the TestRegistry.
   * 
   * \see TestCase
   */

  template <class Fixture> 
    class TestCaller : public TestCase
    { 
        typedef void             (Fixture::*TestMethod)();
    
      public:
        TestCaller (std::string name, TestMethod test) :
          TestCase (name), 
          m_fixture (new Fixture ()), 
          m_test (test)
        {}

      protected:
        void runTest () 
        { 
          (m_fixture.get ()->*m_test)(); 
        }  

        void setUp ()
        { 
          m_fixture.get ()->setUp (); 
        }

        void tearDown ()
        { 
          m_fixture.get ()->tearDown (); 
        }

        std::string toString () const
        { 
          return "TestCaller " + getName(); 
        }

      private: 
        TestCaller (const TestCaller& other); 
        TestCaller& operator= (const TestCaller& other); 

      private:
        std::auto_ptr<Fixture>   m_fixture;
        TestMethod               m_test;

    };

} // namespace CppUnit

#endif // CPPUNIT_TESTCALLER_H
@


1.4
log
@Merged patch #403542 by Tim Jansen <timj@@systembureau.com>.
Fixes bug #220207: "const" problem with countTestCases.
Fixes 'TestSuite::deleteContent() clear vector'
Fixes 'Fix: TestCaller registered Fixture' (see patch #403541).
Fixes bug #415219: example did not test anything.
@
text
@@


1.3
log
@changed documentation.
@
text
@d42 1
d55 1
a55 1
          m_fixture (new Fixture (name)), 
@


1.2
log
@added TextResult files.
@
text
@d17 2
@


1.1
log
@Initial revision
@
text
@d78 2
a79 2
        className (const TestCaller& other); 
        className& operator= (const TestCaller& other); 
@


1.1.1.1
log
@initial check in.
@
text
@@
