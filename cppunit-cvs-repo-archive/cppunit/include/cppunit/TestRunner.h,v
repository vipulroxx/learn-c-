head	1.5;
access;
symbols
	REL_1_12_1:1.5
	REL_1_11_6:1.5
	REL_1_11_4:1.5
	REL_1_11_0:1.5
	TG_CPPUNIT_NO_STREAM_AFTER:1.5
	TG_CPPUNIT_NO_STREAM_BEFORE:1.5
	REL_1_10_2:1.5
	REL_1_10_0:1.5
	REL_1_9_14:1.5
	REL_1_9_12:1.5
	BRANCH_1_9_12:1.5.0.2
	TG_BRANCH_1_9_12:1.5
	TG_BEFORE_HPUX_PLUGIN:1.5
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1
	REL_1_9_6:1.1
	REL_1_9_4:1.1
	REL_1_9_0:1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.08.29.19.27.07;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.10.18.50.02;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.04.12.19.28.47;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/Protector.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/plugin/DynamicLibraryManager.h:
* include/cppunit/plugin/PlugInManager.h:
* include/cppunit/plugin/PlugInParameters.h:
* include/cppunit/TestPlugIn.h:
* src/cppunit/DefaultProtector.h:
* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorContext.h:
* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: fixed a dew documentation bugs.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: moved documentation to header.
@
text
@#ifndef CPPUNIT_TESTRUNNER_H
#define CPPUNIT_TESTRUNNER_H

#include <cppunit/TestSuite.h>
#include <string>

CPPUNIT_NS_BEGIN


class Test;
class TestResult;


/*! \brief Generic test runner.
 * \ingroup ExecutingTest
 *
 * The TestRunner assumes ownership of all added tests: you can not add test
 * or suite that are local variable since they can't be deleted.
 *
 * Example of usage:
 * \code
 * #include <cppunit/extensions/TestFactoryRegistry.h>
 * #include <cppunit/CompilerOutputter.h>
 * #include <cppunit/TestResult.h>
 * #include <cppunit/TestResultCollector.h>
 * #include <cppunit/TestRunner.h>
 * #include <cppunit/TextTestProgressListener.h>
 * 
 * 
 * int 
 * main( int argc, char* argv[] )
 * {
 *   std::string testPath = (argc > 1) ? std::string(argv[1]) : "";
 * 
 *   // Create the event manager and test controller
 *   CppUnit::TestResult controller;
 * 
 *   // Add a listener that colllects test result
 *   CppUnit::TestResultCollector result;
 *   controller.addListener( &result );        
 * 
 *   // Add a listener that print dots as test run.
 *   CppUnit::TextTestProgressListener progress;
 *   controller.addListener( &progress );      
 * 
 *   // Add the top suite to the test runner
 *   CppUnit::TestRunner runner;
 *   runner.addTest( CppUnit::TestFactoryRegistry::getRegistry().makeTest() );   
 *   try
 *   {
 *     std::cout << "Running "  <<  testPath;
 *     runner.run( controller, testPath );
 * 
 *     std::cerr << std::endl;
 * 
 *     // Print test in a compiler compatible format.
 *     CppUnit::CompilerOutputter outputter( &result, std::cerr );
 *     outputter.write();                      
 *   }
 *   catch ( std::invalid_argument &e )  // Test path not resolved
 *   {
 *     std::cerr  <<  std::endl  
 *                <<  "ERROR: "  <<  e.what()
 *                << std::endl;
 *     return 0;
 *   }
 * 
 *   return result.wasSuccessful() ? 0 : 1;
 * }
 * \endcode
 */
class CPPUNIT_API TestRunner
{
public:
  /*! \brief Constructs a TestRunner object.
   */
  TestRunner(  );

  /// Destructor.
  virtual ~TestRunner();

  /*! \brief Adds the specified test.
   * \param test Test to add. The TestRunner takes ownership of the test.
   */
  virtual void addTest( Test *test );

  /*! \brief Runs a test using the specified controller.
   * \param controller Event manager and controller used for testing
   * \param testPath Test path string. See Test::resolveTestPath() for detail.
   * \exception std::invalid_argument if no test matching \a testPath is found.
   *                                  see TestPath::TestPath( Test*, const std::string &)
   *                                  for detail.
   */
  virtual void run( TestResult &controller,
                    const std::string &testPath = "" );

protected:
  /*! \brief (INTERNAL) Mutating test suite.
   */
  class CPPUNIT_API WrappingSuite : public TestSuite
  {
  public:
    WrappingSuite( const std::string &name = "All Tests" );

    int getChildTestCount() const;

    std::string getName() const;

    void run( TestResult *result );

  protected:
    Test *doGetChildTestAt( int index ) const;

    bool hasOnlyOneTest() const;

    Test *getUniqueChildTest() const;
  };

protected:
  WrappingSuite *m_suite;

private:
  /// Prevents the use of the copy constructor.
  TestRunner( const TestRunner &copy );

  /// Prevents the use of the copy operator.
  void operator =( const TestRunner &copy );

private:
};


CPPUNIT_NS_END

#endif  // CPPUNIT_TESTRUNNER_H
@


1.4
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d75 1
a75 1
  /*! Constructs a TestRunner object.
d82 1
a82 1
  /*! Adds the specified test.
d87 1
a87 1
  /*! Runs a test using the specified controller.
@


1.3
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d98 2
@


1.2
log
@* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/Orthodox.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h:
* include/cppunit/TestCaller.h:
* examples/hierarchy/BoardGameTest.h:
* examples/hierarchy/ChessTest.h: replaced usage of 'typename' in template
  declaration with 'class'.

* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to use the generic TestRunner.
  Removed methods runTestByName() and runTest(). Inherits
  CppUnit::TestRunner.

* include/cppunit/extensions/TestSuiteBuilder.h: removed templatized method
  addTestCallerForException(). It is no longer used since release 1.9.8.

* examples/cppunittest/MockTestCase.h
* examples/cppunittest/MockTestCase.cpp: removed the usage of 'mutable'
  keyword.
@
text
@d7 2
a8 2
namespace CppUnit
{
d131 1
a131 2
} //  namespace CppUnit

@


1.1
log
@* Makefile.am: added examples/qt to tar ball release.

* TODO: heavily updated.

* contrib/msvc/CppUnit*.wwtpl: changed base class for unit test to TestFixture.

* include/cppunit/Test.h: removed toString() method. Not used by the framework
  and source of confusions with getName().
  Added getChildTestCount() and getChildTestAt(), introducing the composite pattern
  at top level. Added utility methods findTest() and findTestPath().

* src/cppunit/Test.cpp: added. Implementation of new utility methods.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: inherits TestLeaf. Removed toString(), run(void) and
  defaultResult(). Removed default constructor.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestSuite.cpp: fixed some includes that used "" instead of <>.

* include/cppunit/TestComposite.h:
* src/cppunit/TestComposite.cpp: added. Common implementation of Test for composite
  tests (TestSuite).

* include/cppunit/TestFailure.h:
* src/cppunit/TestFailure.cpp: removed toString().

* include/cppunit/TestLeaf.h:
* src/cppunit/TestLeaf.cpp: added. Common implementation of Test for single test
  (TestCase).

* include/cppunit/TestListener.h: added TimingListener example to documentation.

* include/cppunit/TestPath.h:
* src/cppunit/TestPath.cpp: added. List of test traversed to access a test in the
  test hierarchy.

* include/cppunit/TestRunner.h: added. Generic TestRunner.

* src/cppunit/TestRunner.cpp: moved to TextTestRunner.cpp. Added new implementation
  of includecppunit/TestRunner.h.

* include/cppunit/TestSuite.h:
* src/cppunit/TestSuite.cpp: inherits TestComposite and implements new Test
  interface. Removed toString().

* src/cppunit/TextTestRunner.cpp: moved from TestRunner.cpp. Implementation of
  include/cppunit/ui/text/TestRunner.h.

* include/cppunit/extensions/RepeatedTest.h:
* src/cppunit/RepeatedTest.cpp: removed toString().

* include/cppunit/extensions/TestDecorator.h: inherits TestLeaf.
  Removed toString()

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp:
* examples/cppunittest/XmlOutputterTest.cpp:
* examples/cppunittest/XmlOutputterTest.h: XML outputter now escape node content.
  Add unit test for that bug (#540944). Added style sheet support. Modified
  XML structure: failure message as its own element.

* src/msvc/testrunner/TestRunnerModel.h:
* src/msvc/testrunner/TestRunnerModel.cpp: used Test::findTest() to find a test
  by name instead of using RTTI. Added toAnsiString() for convertion when
  compiling as UNICODE.

* src/msvc/testrunner/TreeHierarchyDlg.h:
* src/msvc/testrunner/TreeHierarchyDlg.cpp: used new composite interface of Test
  to explorer the test hierarchy instead of RTTI.

* examples/cppunittest/TestPathTest.h:
* examples/cppunittest/TestPathTest.cpp: added, unit tests for TestPath.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: added test for TestLeaf.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: added test for TestComposite and
  new Test interface.
@
text
@d105 1
a105 1
    std::string getName () const;
@

