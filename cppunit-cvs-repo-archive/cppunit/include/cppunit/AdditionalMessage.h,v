head	1.2;
access;
symbols
	REL_1_12_1:1.2
	REL_1_11_6:1.2
	REL_1_11_4:1.2
	REL_1_11_0:1.2
	TG_CPPUNIT_NO_STREAM_AFTER:1.2
	TG_CPPUNIT_NO_STREAM_BEFORE:1.2
	REL_1_10_2:1.2
	REL_1_10_0:1.2
	REL_1_9_14:1.2
	REL_1_9_12:1.2
	BRANCH_1_9_12:1.2.0.2
	TG_BRANCH_1_9_12:1.2
	TG_BEFORE_HPUX_PLUGIN:1.2
	TG_BEFORE_SUN4_PORT:1.2
	REL_1_9_10:1.2;
locks; strict;
comment	@ * @;


1.2
date	2002.07.12.05.59.56;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.11.06.01.54;	author blep;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@#ifndef CPPUNIT_ADDITIONALMESSAGE_H
#define CPPUNIT_ADDITIONALMESSAGE_H

#include <cppunit/Message.h>


CPPUNIT_NS_BEGIN


/*! \brief An additional Message for assertions.
 * \ingroup CreatingNewAssertions
 *
 * Provides a implicit constructor that takes a single string. This allow this
 * class to be used as the message arguments in macros.
 *
 * The constructed object is either a Message with a single detail string if
 * a string was passed to the macro, or a copy of the Message passed to the macro.
 *
 * Here is an example of usage:
 * \code
 * 
 *   void checkStringEquals( const std::string &expected,
 *                          const std::string &actual,
 *                           const CppUnit::SourceLine &sourceLine,
 *                           const CppUnit::AdditionalMessage &message );
 *  
 *   #define XTLUT_ASSERT_STRING_EQUAL_MESSAGE( expected, actual, message )  \
 *     ::XtlUt::Impl::checkStringEquals( ::Xtl::toString(expected),        \
 *                                       ::Xtl::toString(actual),          \
 *                                       CPPUNIT_SOURCELINE(),             \
 *                                       message )
 * \endcode
 *
 * In the previous example, the user can specify a simple string for \a message,
 * or a complex Message object.
 *
 * \see Message
 */
class CPPUNIT_API AdditionalMessage : public Message
{
public:
  typedef Message SuperClass;

  /// Constructs an empty Message.
  AdditionalMessage();

  /*! \brief Constructs a Message with the specified detail string.
   * \param detail1 Detail string of the message. If empty, then it is not added.
   */
  AdditionalMessage( const std::string &detail1 );

  /*! \brief Constructs a Message with the specified detail string.
   * \param detail1 Detail string of the message. If empty, then it is not added.
   */
  AdditionalMessage( const char *detail1 );

  /*! \brief Constructs a copy of the specified message.
   * \param other Message to copy.
   */
  AdditionalMessage( const Message &other );

  /*! \brief Assignment operator.
   * \param other Message to copy.
   * \return Reference on this object.
   */
  AdditionalMessage &operator =( const Message &other );

private:
};


CPPUNIT_NS_END



#endif  // CPPUNIT_ADDITIONALMESSAGE_H
@


1.1
log
@* added missing files
@
text
@d7 1
a7 2
namespace CppUnit
{
d60 1
a60 1
  AdditionalMessage( const CppUnit::Message &other );
d66 1
a66 1
  AdditionalMessage &operator =( const CppUnit::Message &other );
d72 1
a72 1
} // namespace CppUnit
@

