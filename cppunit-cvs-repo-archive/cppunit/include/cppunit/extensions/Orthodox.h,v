head	1.7;
access;
symbols
	REL_1_12_1:1.7
	REL_1_11_6:1.7
	REL_1_11_4:1.7
	REL_1_11_0:1.7
	TG_CPPUNIT_NO_STREAM_AFTER:1.7
	TG_CPPUNIT_NO_STREAM_BEFORE:1.7
	REL_1_10_2:1.7
	REL_1_10_0:1.7
	REL_1_9_14:1.7
	REL_1_9_12:1.7
	BRANCH_1_9_12:1.7.0.2
	TG_BRANCH_1_9_12:1.7
	TG_BEFORE_HPUX_PLUGIN:1.7
	TG_BEFORE_SUN4_PORT:1.7
	REL_1_9_10:1.7
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.5
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.5
	REL_1_9_6:1.5
	REL_1_9_4:1.5
	REL_1_9_0:1.5
	REL_1_8_0:1.5
	REL_1_7_8:1.5
	REL_1_7_3:1.5
	REL_1_7_1:1.5
	REL_1_6_2:1.5
	BRANCH_1_6:1.5.0.2
	REL_1_6_1:1.5
	REL_1_6_0:1.5
	REL_1_5_5:1.3;
locks; strict;
comment	@ * @;


1.7
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2002.07.10.18.50.02;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2001.06.11.20.00.08;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2001.06.02.22.29.52;	author smr99;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.06.17.21.31;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.06.16.19.32;	author bastiaan;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.22.23.09.57;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@#ifndef CPPUNIT_EXTENSIONS_ORTHODOX_H
#define CPPUNIT_EXTENSIONS_ORTHODOX_H

#include <cppunit/TestCase.h>

CPPUNIT_NS_BEGIN


/*
 * Orthodox performs a simple set of tests on an arbitary
 * class to make sure that it supports at least the
 * following operations:
 *
 *      default construction    - constructor
 *      equality/inequality     - operator== && operator!=
 *      assignment              - operator=
 *      negation                - operator!
 *      safe passage            - copy construction
 *
 * If operations for each of these are not declared
 * the template will not instantiate.  If it does 
 * instantiate, tests are performed to make sure
 * that the operations have correct semantics.
 *      
 * Adding an orthodox test to a suite is very 
 * easy: 
 * 
 * public: Test *suite ()  {
 *     TestSuite *suiteOfTests = new TestSuite;
 *     suiteOfTests->addTest (new ComplexNumberTest ("testAdd");
 *     suiteOfTests->addTest (new TestCaller<Orthodox<Complex> > ());
 *     return suiteOfTests;
 *  }
 *
 * Templated test cases be very useful when you are want to
 * make sure that a group of classes have the same form.
 *
 * see TestSuite
 */


template <class ClassUnderTest> class Orthodox : public TestCase
{
public:
                    Orthodox () : TestCase ("Orthodox") {}

protected:
    ClassUnderTest  call (ClassUnderTest object);
    void            runTest ();


};


// Run an orthodoxy test
template <class ClassUnderTest> void Orthodox<ClassUnderTest>::runTest ()
{
    // make sure we have a default constructor
    ClassUnderTest   a, b, c;

    // make sure we have an equality operator
    CPPUNIT_ASSERT (a == b);

    // check the inverse
    b.operator= (a.operator! ());
    CPPUNIT_ASSERT (a != b);

    // double inversion
    b = !!a;
    CPPUNIT_ASSERT (a == b);

    // invert again
    b = !a;

    // check calls
    c = a;
    CPPUNIT_ASSERT (c == call (a));

    c = b;
    CPPUNIT_ASSERT (c == call (b));

}


// Exercise a call
template <class ClassUnderTest> 
ClassUnderTest Orthodox<ClassUnderTest>::call (ClassUnderTest object)
{
    return object;
}


CPPUNIT_NS_END

#endif
@


1.6
log
@* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/Orthodox.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h:
* include/cppunit/TestCaller.h:
* examples/hierarchy/BoardGameTest.h:
* examples/hierarchy/ChessTest.h: replaced usage of 'typename' in template
  declaration with 'class'.

* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to use the generic TestRunner.
  Removed methods runTestByName() and runTest(). Inherits
  CppUnit::TestRunner.

* include/cppunit/extensions/TestSuiteBuilder.h: removed templatized method
  addTestCallerForException(). It is no longer used since release 1.9.8.

* examples/cppunittest/MockTestCase.h
* examples/cppunittest/MockTestCase.cpp: removed the usage of 'mutable'
  keyword.
@
text
@d6 2
a7 1
namespace CppUnit {
d92 2
a93 1
} // namespace CppUnit
@


1.5
log
@* include/cppunit/extensions/HelperMacros.h: static method suite()
implemented by CPPUNIT_TEST_SUITE_END macro now returns a TestSuite
instead of a Test.

* include/cppunit/extensions/RepeatedTest.h: corrected countTestCases,
operator = declaration.

* include/cppunit/extensions/TestDecorator.h: removed const from run()
method. Did not match run() declaration of Test class.

* include/cppunit/extensions/TestFactory.h: fixed a comment.

* include/cppunit/extensions/TestSetup.h: corrected run() method
declaration. Methods setUp() and tearDown() were not declared virtual.

* include/cppunit/extensions/TestSuiteBuilder.h: added a method
addTestCaller() which take a pointer on a fixture.
@
text
@d41 1
a41 1
template <typename ClassUnderTest> class Orthodox : public TestCase
d55 1
a55 1
template <typename ClassUnderTest> void Orthodox<ClassUnderTest>::runTest ()
d85 1
a85 1
template <typename ClassUnderTest> 
@


1.4
log
@Change to templatized TestAssert::assertEquals() and the new CPPUNIT_ASSERT* macros
@
text
@d85 2
a86 1
template <typename ClassUnderTest> ClassUnderTest Orthodox<ClassUnderTest>::call (ClassUnderTest object)
@


1.3
log
@Removed unnecessary #include's of TestSuiteBuilder.h
Removed RTTI dependent stuff from TestSuite and TestSuiteBuilder.
@
text
@d61 1
a61 1
    assert (a == b);
d65 1
a65 1
    assert (a != b);
d69 1
a69 1
    assert (a == b);
d76 1
a76 1
    assert (c == call (a));
d79 1
a79 1
    assert (c == call (b));
@


1.2
log
@Fixed #include's for cppunit headers.
@
text
@d41 1
a41 1
template <class ClassUnderTest> class Orthodox : public TestCase
d55 1
a55 1
template <class ClassUnderTest> void Orthodox<ClassUnderTest>::runTest ()
d85 1
a85 1
template <class ClassUnderTest> ClassUnderTest Orthodox<ClassUnderTest>::call (ClassUnderTest object)
@


1.1
log
@Merged extension headers back in from Micheal Feathers version.
@
text
@d1 2
d4 1
a4 6
#ifndef CPPUNIT_ORTHODOX_H
#define CPPUNIT_ORTHODOX_H

#ifndef CPPUNIT_TESTCASE_H
#include "TestCase.h"
#endif
d92 1
a92 1
#endif@

