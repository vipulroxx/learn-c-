head	1.5;
access;
symbols
	REL_1_12_1:1.5
	REL_1_11_6:1.5
	REL_1_11_4:1.5
	REL_1_11_0:1.5
	TG_CPPUNIT_NO_STREAM_AFTER:1.5
	TG_CPPUNIT_NO_STREAM_BEFORE:1.5
	REL_1_10_2:1.5
	REL_1_10_0:1.5
	REL_1_9_14:1.5
	REL_1_9_12:1.5
	BRANCH_1_9_12:1.5.0.2
	TG_BRANCH_1_9_12:1.5
	TG_BEFORE_HPUX_PLUGIN:1.5
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.4
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.4
	REL_1_9_6:1.4
	REL_1_9_4:1.4
	REL_1_9_0:1.4
	REL_1_8_0:1.4
	REL_1_7_8:1.4
	REL_1_7_3:1.2
	REL_1_7_1:1.2
	REL_1_6_2:1.2
	BRANCH_1_6:1.2.0.2
	REL_1_6_1:1.2
	REL_1_6_0:1.2
	REL_1_5_5:1.1;
locks; strict;
comment	@ * @;


1.5
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.03.25.22.35.34;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.03.24.19.39.55;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.11.20.00.08;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.06.18.19.04;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@#ifndef CPPUNIT_EXTENSIONS_TESTFACTORY_H
#define CPPUNIT_EXTENSIONS_TESTFACTORY_H

#include <cppunit/Portability.h>

CPPUNIT_NS_BEGIN


class Test;

/*! \brief Abstract Test factory.
 */
class CPPUNIT_API TestFactory 
{
public:
  virtual ~TestFactory() {}

  /*! Makes a new test.
   * \return A new Test.
   */
  virtual Test* makeTest() = 0;
};


CPPUNIT_NS_END

#endif  // CPPUNIT_EXTENSIONS_TESTFACTORY_H
@


1.4
log
@* include/cppunit/makefile.am: removed TestRegistry.h

* include/cppunit/TestRegistry.h: removed. Obsolete, replaced by
TestFactoryRegistry.

* src/cppunit/makefile.am: removed TestRegistry.cpp. Added cppunit_dll.dsp.

* include/cppunit/CompilerOutputter.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/SynchronizedObject.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TextOutputter.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestResult.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/TestFactory.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: minor doc update.

* include/cppunit/TestFixture.h: added DLL export.

* include/cppunit/msvc6/TestPlugInInterface.h: updated doc. Added automatic
exportation of TestPlugIn publishing function.

* src/cppunit/TestCase.cpp:
* include/cppunit/TestCase.h: inherits setUp() and tearDown() from
class TestFixture.
@
text
@d6 2
a7 1
namespace CppUnit {
d24 2
a25 1
}  // namespace CppUnit
@


1.3
log
@* INSTALL-WIN32.txt: added some info to build cppunit as a DLL.

* include/cppunit/config-msvc6.h: added definition of macro CPPUNIT_API when
building or linking DLL. Defined CPPUNIT_BUILD_DLL when building, and
CPPUNIT_DLL when linking.

* include/cppunit/Portability.h: added empty definition of macro CPPUNIT_API
when not building or using CppUnit as a DLL. When any of those symbol is defined,
the symbol CPPUNIT_NEED_DLL_DECL is set to 1.

* include/cppunit/extensions/RepeatedTest.h:
* include/cppunit/extensions/TestDecorator.h:
* include/cppunit/extensions/TestSetUp.h:
* include/cppunit/TestCaller.h
* include/cppunit/extensions/TestFactory.h
* include/cppunit/extensions/TestFactoryRegistry.h
* include/cppunit/extensions/TypeInfoHelper.h
* include/cppunit/Asserter.h
* include/cppunit/Exception.h
* include/cppunit/NotEqualException.h
* include/cppunit/SourceLine.h
* include/cppunit/SynchronizedObject.h
* include/cppunit/Test.h
* include/cppunit/TestAssert.h
* include/cppunit/TestCase.h
* include/cppunit/TestFailure.h
* include/cppunit/TestListener.h
* include/cppunit/TestResult.h
* include/cppunit/TestSuite.h
* include/cppunit/CompilerOutputter.h
* include/cppunit/Outputter.h
* include/cppunit/TestResultCollector.h
* include/cppunit/TestSuccessListener.h
* include/cppunit/TextOutputter.h
* include/cppunit/TextTestProgressListener.h
* include/cppunit/TextTestResult.h
* include/cppunit/TextTestRunner.h
* include/cppunit/XmlOutputter.h: added CPPUNIT_API for DLL export.

* include/cppunit/TestSuite.h:
* src/cppunit/TestSuite.cpp: reindented

* include/cppunit/extensions/TestSetUp.h:
* src/cppunit/TestSetUp.cpp: added .cpp. extracted inline method and moved them
to cpp file.
@
text
@d10 1
a10 1
/** This class represents an abstract Test factory.
d17 1
a17 1
  /** Makes a new test.
@


1.2
log
@* include/cppunit/extensions/HelperMacros.h: static method suite()
implemented by CPPUNIT_TEST_SUITE_END macro now returns a TestSuite
instead of a Test.

* include/cppunit/extensions/RepeatedTest.h: corrected countTestCases,
operator = declaration.

* include/cppunit/extensions/TestDecorator.h: removed const from run()
method. Did not match run() declaration of Test class.

* include/cppunit/extensions/TestFactory.h: fixed a comment.

* include/cppunit/extensions/TestSetup.h: corrected run() method
declaration. Methods setUp() and tearDown() were not declared virtual.

* include/cppunit/extensions/TestSuiteBuilder.h: added a method
addTestCaller() which take a pointer on a fixture.
@
text
@d4 2
d8 8
a15 1
  class Test;
d17 2
a18 1
  /** This class represents an abstract Test factory.
d20 2
a21 10
  class TestFactory 
  {
  public:
    virtual ~TestFactory() {}

    /** Makes a new test.
     * \return A new Test.
     */
    virtual Test* makeTest() = 0;
  };
@


1.1
log
@Renamed AbstractTestFactory to TestFactory.
@
text
@d23 1
a23 1
#endif  // CPPUNIT_EXTENSIONS_ABSTRACTTESTFACTORY_H
@

