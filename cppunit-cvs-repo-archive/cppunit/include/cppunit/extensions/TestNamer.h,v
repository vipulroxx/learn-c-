head	1.8;
access;
symbols
	REL_1_12_1:1.8
	REL_1_11_6:1.8
	REL_1_11_4:1.8
	REL_1_11_0:1.8
	TG_CPPUNIT_NO_STREAM_AFTER:1.8
	TG_CPPUNIT_NO_STREAM_BEFORE:1.8
	REL_1_10_2:1.8
	REL_1_10_0:1.8
	REL_1_9_14:1.8
	REL_1_9_12:1.8
	BRANCH_1_9_12:1.8.0.2
	TG_BRANCH_1_9_12:1.8
	TG_BEFORE_HPUX_PLUGIN:1.8
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1;
locks; strict;
comment	@ * @;


1.8
date	2003.03.20.07.08.22;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2003.03.11.20.06.29;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2002.09.16.18.36.52;	author esche;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.29.07.36.50;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.08.28.22.20.52;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.05.25.09.29.07;	author blep;	state Exp;
branches;
next	;


desc
@@


1.8
log
@* include/cppunit/extensions/TestNamer.h:
* src/cppunit/TestNamer.cpp: Fixed bug #704684, TestNamer has non-virtual
  destructor.
@
text
@#ifndef CPPUNIT_EXTENSIONS_TESTNAMER_H
#define CPPUNIT_EXTENSIONS_TESTNAMER_H

#include <cppunit/Portability.h>
#include <string>

#if CPPUNIT_HAVE_RTTI
#  include <typeinfo>
#endif



/*! \def CPPUNIT_TESTNAMER_DECL( variableName, FixtureType )
 * \brief Declares a TestNamer.
 *
 * Declares a TestNamer for the specified type, using RTTI if enabled, otherwise
 * using macro string expansion.
 *
 * RTTI is used if CPPUNIT_USE_TYPEINFO_NAME is defined and not null.
 *
 * \code
 * void someMethod() 
 * {
 *   CPPUNIT_TESTNAMER_DECL( namer, AFixtureType );
 *   std::string fixtureName = namer.getFixtureName();
 *   ...
 * \endcode
 *
 * \relates TestNamer
 * \see TestNamer
 */
#if CPPUNIT_USE_TYPEINFO_NAME
#  define CPPUNIT_TESTNAMER_DECL( variableName, FixtureType )       \
              CPPUNIT_NS::TestNamer variableName( typeid(FixtureType) )
#else
#  define CPPUNIT_TESTNAMER_DECL( variableName, FixtureType )       \
              CPPUNIT_NS::TestNamer variableName( std::string(#FixtureType) )
#endif



CPPUNIT_NS_BEGIN


/*! \brief Names a test or a fixture suite.
 *
 * TestNamer is usually instantiated using CPPUNIT_TESTNAMER_DECL.
 *
 */
class CPPUNIT_API TestNamer
{
public:
#if CPPUNIT_HAVE_RTTI
  /*! \brief Constructs a namer using the fixture's type-info.
   * \param typeInfo Type-info of the fixture type. Use to name the fixture suite.
   */
  TestNamer( const std::type_info &typeInfo );
#endif

  /*! \brief Constructs a namer using the specified fixture name.
   * \param fixtureName Name of the fixture suite. Usually extracted using a macro.
   */
  TestNamer( const std::string &fixtureName );

  virtual ~TestNamer();

  /*! \brief Returns the name of the fixture.
   * \return Name of the fixture.
   */
  virtual std::string getFixtureName() const;

  /*! \brief Returns the name of the test for the specified method.
   * \param testMethodName Name of the method that implements a test.
   * \return A string that is the concatenation of the test fixture name 
   *         (returned by getFixtureName()) and\a testMethodName, 
   *         separated using '::'. This provides a fairly unique name for a given
   *         test.
   */
  virtual std::string getTestNameFor( const std::string &testMethodName ) const;

protected:
  std::string m_fixtureName;
};


CPPUNIT_NS_END

#endif // CPPUNIT_EXTENSIONS_TESTNAMER_H

@


1.7
log
@* include/cppunit/tools/Algorithm.h:
* src/cppunit/TestResult.cpp:
* src/msvc6/testrunner/TestRunnerModel.cpp: added removeFromSequence
algorithm in Algorithm.h to fix STLPort compatibility issue
(std::remove use the one of cstdio instead of algorithm). Bug #694971.

* include/cppunit/extensions/TestNamer.h: fixed bug #662666 (missing include
for typeinfo).

* src/cppunit/TestResult.cpp: TestFailure are no longer passed as temporary,
but explicitely instantiated on the stack. Work around AIX compiler bug.
@
text
@d65 2
@


1.6
log
@added newline at end of file (needed for some compilers to work)
@
text
@d7 3
@


1.5
log
@* include/cppunit/Asserter.h:
* include/cppunit/Message.h:
* include/cppunit/extensions/TestNamer.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/tools/XmlDocument.h:
* include/cppunit/tools/XmlElement.h: Fixed a few documentation bug.
@
text
@d83 2
a84 1
#endif // CPPUNIT_EXTENSIONS_TESTNAMER_H@


1.4
log
@* include/cppunit/Portability.h: added CPPUNIT_STATIC_CAST.

* include/cppunit/extensions/TestFixtureFactory.h: extracted from
  HelperMacros.h. Added template class ConcretTestFixtureFactory.

* include/cppunit/extensions/TestSuiteBuilderContext.h:
* src/cppunit/TestSuiteBuilderContext.cpp: added. Context used
  to add test case to the fixture suite. Prevent future
  compatibility break for custom test API.

* include/cppunit/extensions/HelperMacros.h: mostly rewritten. No
  longer use TestSuiteBuilder. Added support for abstract test fixture
  through macro CPPUNIT_TEST_SUITE_END_ABSTRACT. Made custom test API
  easier to use.

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: updated against
  HelperMacros.h changes.
@
text
@d51 1
a51 1
  /*! Constructs a namer using the fixture's type-info.
d57 1
a57 1
  /*! Constructs a namer using the specified fixture name.
d62 1
a62 1
  /*! Returns the name of the fixture.
d67 1
a67 1
  /*! \Returns the name of the test for the specified method.
@


1.3
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d67 1
a67 1
  /*! Returns the name of the test for the specified method.
@


1.2
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d31 1
a31 1
              CPPUNIT_NS(TestNamer) variableName( typeid(FixtureType) )
d34 1
a34 1
              CPPUNIT_NS(TestNamer) variableName( std::string(#FixtureType) )
@


1.1
log
@* include/cppunit/extensions/TestSuiteBuilder.h: updated to use TestNamer. Removed
template method addTestCallerForException() which should solve the compilation
issue with Sun 5.0/6.0 compiler.

* include/cppunit/extensions/HelperMacros.h: updated against TestSuiteBuilder
change. Added CPPUNIT_TEST_CUSTOM and CPPUNIT_TEST_CUSTOMS to add custom
tests to the fixture suite.

* include/cppunit/extensions/TestNamer.h:
* src/cppunit/TestNamer.cpp: added, TestNamer to name test case and fixture.
@
text
@d31 1
a31 1
              CppUnit::TestNamer variableName( typeid(FixtureType) )
d34 1
a34 1
              CppUnit::TestNamer variableName( std::string(#FixtureType) )
d39 2
a40 2
namespace CppUnit
{
d81 1
a81 4

} // namespace CppUnit


@

