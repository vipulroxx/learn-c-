head	1.12;
access;
symbols
	REL_1_12_1:1.12
	REL_1_11_6:1.12
	REL_1_11_4:1.12
	REL_1_11_0:1.12
	TG_CPPUNIT_NO_STREAM_AFTER:1.12
	TG_CPPUNIT_NO_STREAM_BEFORE:1.12
	REL_1_10_2:1.12
	REL_1_10_0:1.12
	REL_1_9_14:1.12
	REL_1_9_12:1.12
	BRANCH_1_9_12:1.12.0.2
	TG_BRANCH_1_9_12:1.12
	TG_BEFORE_HPUX_PLUGIN:1.12
	TG_BEFORE_SUN4_PORT:1.12
	REL_1_9_10:1.12
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.9
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.9
	REL_1_9_6:1.9
	REL_1_9_4:1.9
	REL_1_9_0:1.8
	REL_1_8_0:1.8
	REL_1_7_8:1.7
	REL_1_7_3:1.7
	REL_1_7_1:1.7
	REL_1_6_2:1.6
	BRANCH_1_6:1.6.0.2
	REL_1_6_1:1.6
	REL_1_6_0:1.6
	REL_1_5_5:1.4;
locks; strict;
comment	@ * @;


1.12
date	2002.07.13.10.33.50;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2002.07.10.18.50.02;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2002.04.17.22.27.28;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.28.15.47.07;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.02.20.43.55;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2001.06.02.19.53.06;	author smr99;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.29.04.09.24;	author smr99;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.06.18.19.04;	author bastiaan;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.06.17.21.31;	author bastiaan;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.06.16.19.32;	author bastiaan;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.29.14.09.16;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.12
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@#ifndef CPPUNIT_EXTENSIONS_AUTOREGISTERSUITE_H
#define CPPUNIT_EXTENSIONS_AUTOREGISTERSUITE_H

#include <cppunit/extensions/TestSuiteFactory.h>
#include <cppunit/extensions/TestFactoryRegistry.h>
#include <string>

CPPUNIT_NS_BEGIN


/*! \brief (Implementation) Automatically register the test suite of the specified type.
 *
 * You should not use this class directly. Instead, use the following macros:
 * - CPPUNIT_TEST_SUITE_REGISTRATION()
 * - CPPUNIT_TEST_SUITE_NAMED_REGISTRATION()
 *
 * This object will register the test returned by TestCaseType::suite()
 * when constructed to the test registry.
 *
 * This object is intented to be used as a static variable.
 *
 *
 * \param TestCaseType Type of the test case which suite is registered.
 * \see CPPUNIT_TEST_SUITE_REGISTRATION, CPPUNIT_TEST_SUITE_NAMED_REGISTRATION
 * \see CppUnit::TestFactoryRegistry.
 */
template<class TestCaseType>
class AutoRegisterSuite
{
public:
  /** Auto-register the suite factory in the global registry.
   */
  AutoRegisterSuite()
      : m_registry( &TestFactoryRegistry::getRegistry() )
  {
    m_registry->registerFactory( &m_factory );
  }

  /** Auto-register the suite factory in the specified registry.
   * \param name Name of the registry.
   */
  AutoRegisterSuite( const std::string &name )
      : m_registry( &TestFactoryRegistry::getRegistry( name ) )
  {
    m_registry->registerFactory( &m_factory );
  }

  ~AutoRegisterSuite()
  {
    if ( TestFactoryRegistry::isValid() )
      m_registry->unregisterFactory( &m_factory );
  }

private:
  TestFactoryRegistry *m_registry;
  TestSuiteFactory<TestCaseType> m_factory;
};


/*! \brief (Implementation) Automatically adds a registry into another registry.
 *
 * Don't use this class. Use the macros CPPUNIT_REGISTRY_ADD() and
 * CPPUNIT_REGISTRY_ADD_TO_DEFAULT() instead.
 */
class AutoRegisterRegistry
{
public:
  AutoRegisterRegistry( const std::string &which,
                        const std::string &to )
  {
    TestFactoryRegistry::getRegistry( to ).addRegistry( which );
  }

  AutoRegisterRegistry( const std::string &which )
  {
    TestFactoryRegistry::getRegistry().addRegistry( which );
  }
};


CPPUNIT_NS_END

#endif  // CPPUNIT_EXTENSIONS_AUTOREGISTERSUITE_H
@


1.11
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d11 1
a11 1
/** Automatically register the test suite of the specified type. (Implementation)
d60 1
a60 1
/*! Automatically adds a registry into another registry. (Implementation)
@


1.10
log
@* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/Orthodox.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h:
* include/cppunit/TestCaller.h:
* examples/hierarchy/BoardGameTest.h:
* examples/hierarchy/ChessTest.h: replaced usage of 'typename' in template
  declaration with 'class'.

* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to use the generic TestRunner.
  Removed methods runTestByName() and runTest(). Inherits
  CppUnit::TestRunner.

* include/cppunit/extensions/TestSuiteBuilder.h: removed templatized method
  addTestCallerForException(). It is no longer used since release 1.9.8.

* examples/cppunittest/MockTestCase.h
* examples/cppunittest/MockTestCase.cpp: removed the usage of 'mutable'
  keyword.
@
text
@d8 2
a9 1
namespace CppUnit {
a79 1
} // namespace CppUnit
d81 1
@


1.9
log
@* bumped version to 1.9.3

* FAQ: added question about 4786 warning on VC++.

* NEWS: updated.

* contrib/msvc/readme.txt: moved to contrib/readme.txt.

* contrib/xml-xsl/report.xsl: added XML style sheet contributed by
'cuppa' project team (http://sourceforge.jp/projects/cuppa/)

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: added tests for
  startTestRun()/endTestRun().

* examples/simple/*: added. A simple example.

* include/cppunit/BriefTestProgressListener.h:
* src/cppunit/BriefTestProgressListener.cpp: added. Verbose progess listener
  that print the test name before running the test.

* include/cppunit/TestListener.h: added startTestRun()/endTestRun().

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: added runTest(), to be called to run
  a test by test runner.

* src/cppunit/TextTestRunner.cpp:
* src/cppunit/TestRunner.cpp: updated to use TestResult::runTest().

* include/cppunit/plugin/PlugInManager.h:
* src/cppunit/PlugInManager.cpp: added. Managers for all loaded plug-ins.

* include/cppunit/plugin/TestPlugInDefaultImpl.h:
* src/cppunit/TestPlugInDefaultImpl.cpp: renamed TestPlugInAdapter. All
  implementations are empty.

* include/cppunit/plugin/TestPlugInSuite.h: removed.
* src/cppunit/TestPlugInSuite.cpp: removed. Replaced by PlugInManager.

* include/cppunit/plugin/TestPlugIn.h: rewrote the plug-in interface to
  provide more versatility. updated macros to match new interface.

* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestFactoryRegistry.cpp: Added unregisterFactory().
  Added convenience method addRegistry(). Rewrote registry life cycle
  management. AutoRegisterSuite can now detect that the registry has been
  destroy and not call to it to unregister its test factory.

* include/cppunit/extensions/AutoRegisterTest.h: on destruction, the registered
  factory is unregistered from the registry.

* include/cppunit/extensions/HelperMacros.h: added macros
  CPPUNIT_REGISTRY_ADD_TO_DEFAULT and CPPUNIT_REGISTRY_ADD to help
  build test suite hierarchy.

* src/cppunit/msvc/DllPlugInTester/*: moved to src/cppunit/DllPlugInTester/.

* src/cppunit/DllPlugInTester/DllPlugInTester.cpp: removed UNICODE stuffs. Use
  the PlugInManager instead of PlugInTestSuite. Simplified: only one test on
  command line, but many DLL can be specified. Added configurations to link
  against cppunit dll, those are now the default configuration (static linking
  don't make much sense for plug-in).
@
text
@d26 1
a26 1
template<typename TestCaseType>
@


1.8
log
@* doc/cookbook.html: removed. Replaced by cookbook.doc.

* doc/cookbook.dox: added, conversion of cookbook.html to Doxygen format.

* doc/other_documentation.dox: added groups definition.

* doc/Makefile.am: replaced cookbook.html by cookbook.dox

* doc/Doxyfile.in: added predefined CPPUNIT_HAVE_CPP_SOURCE_ANNOTATION.
Replaced cookbook.html by cookbook.dox.

* include/cppunitui/mfc/TestRunner.h: added, extracted from
include/msvc6/testrunner/TestRunner.h. Moved class TestRunner to namespace
CppUnit::MfcUi.

* include/msvc6/testrunner/TestRunner.h: deprecated. A simple typedef to
CppUnit::MfcUi::TestRunner.

* include/textui/TestRuner.h: added, extracted from
include/cppunit/TextTestRunner.h.

* src/cppunit/TextTestRunner.cpp: renamed TestRunner.cpp. Moved into
namespace CppUnit::TextUi.

* src/msvc6/testruner/TestRunner.cpp: moved into namespace CppUnit::MfcUi.

* src/cppunit/CompilerOutputter.cpp: removed printing "- " before
NotEqualException addional message, for consistency between different
TestRunner (Mfc,Text...)

* include/cppunit/Asserter.h:
* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/Outputter.h:
* include/cppunit/SourceLine.h:
* include/cppunit/TestAssert.h:
* include/cppunit/TestCaller.h:
* include/cppunit/TestFailure.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: doc update. organization
in groups.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.cpp:
* examples/msvc6/HostApp/HostApp.cpp: updated to use
CppUnit::MfcUi::TestRunner.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use
CppUnit::TextUi::TestRunner.
@
text
@a3 1
#include <string>
d6 1
d10 21
a30 15
  /** Automatically register the test suite of the specified type.
   *
   * You should not use this class directly. Instead, use the following macros:
   * - CPPUNIT_TEST_SUITE_REGISTRATION()
   * - CPPUNIT_TEST_SUITE_NAMED_REGISTRATION()
   *
   * This object will register the test returned by TestCaseType::suite()
   * when constructed to the test registry.
   *
   * This object is intented to be used as a static variable.
   *
   *
   * \param TestCaseType Type of the test case which suite is registered.
   * \see CPPUNIT_TEST_SUITE_REGISTRATION, CPPUNIT_TEST_SUITE_NAMED_REGISTRATION
   * \see CppUnit::TestFactoryRegistry.
d32 42
a73 2
  template<typename TestCaseType>
  class AutoRegisterSuite
d75 3
a77 18
    public:
      /** Auto-register the suite factory in the global registry.
       */
      AutoRegisterSuite()
      {
        TestFactory *factory = new TestSuiteFactory<TestCaseType>();
        TestFactoryRegistry::getRegistry().registerFactory( factory );
      }

      /** Auto-register the suite factory in the specified registry.
       * \param name Name of the registry.
       */
      AutoRegisterSuite( const std::string &name )
      {
        TestFactory *factory = new TestSuiteFactory<TestCaseType>();
        TestFactoryRegistry::getRegistry( name ).registerFactory( factory );
      }
  };
@


1.7
log
@* include/cppunit/extensions/TestFactoryRegistry.h
* src/cppunit/TestFactoryRegistry.cpp : fixed memory leaks that
occured when a TestFactoryRegistry was registered into another
TestFactoryRegistry.

* include/cppunit/extensions/AutoRegisterSuite.h : updated doc.

* include/cppunit/extensions/HelperMacros.h : added macro
CPPUNIT_TEST_SUITE_NAMED_REGISTRATION to register a suite into
a named suite. Updated doc.

* examples/cppunittest/CoreSuite.h:
* examples/cppunittest/ExtensionSuite.h:
* examples/cppunittest/HelperSuite.h: added, declaration of suite for
use with CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/makefile.am : added HelperSuite.h, CoreSuite.h,
ExtensionSuite.h, CppUnitTestSuite.h and CppUnitTestSuite.cpp.

* examples/cppunittest/CppUnitTestSuite.*: added.

* examples/cppunittest/ExceptionTest.cpp:
* examples/cppunittest/TestAssertTest.cpp:
* examples/cppunittest/TestCaseTest.cpp:
* examples/cppunittest/TestFailureTest.cpp:
* examples/cppunittest/TestListenerTest.cpp:
* examples/cppunittest/TestResultTest.cpp:
* examples/cppunittest/TestSuiteTest.cpp: moved into named suite
"Core" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/OrthodoxTest.cpp:
* examples/cppunittest/RepeatedTest.cpp:
* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/TestSetUpTest.cpp: moved into named suite
"Extension" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/HelperMacrosTest.cpp:
* examples/cppunittest/TestCallerTest.cpp: moved into named suite
"Helper" using CPPUNIT_TEST_SUITE_NAMED_REGISTRATION.

* examples/cppunittest/CppUnitTest.dsp :
* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : added
Makefile.am, HelperSuite.h, CoreSuite.h, ExtensionSuite.h,
CppUnitTestSuite.h and CppUnitTestSuite.cpp.
@
text
@d12 4
d21 1
d23 2
a24 1
   * \see CPPUNIT_TEST_SUITE_REGISTRATION, CppUnit::TestFactoryRegistry.
@


1.6
log
@Replace CU_ by CPPUNIT_.
@
text
@d18 1
a18 1
   * \see CPPUNIT_TEST_SUITE_REGISTRATION.
@


1.5
log
@Fix CU_TEST* macros and their documentation.
@
text
@d18 1
a18 1
   * \see CU_TEST_SUITE_REGISTRATION.
@


1.4
log
@Renamed AbstractTestFactory to TestFactory.
@
text
@d37 1
a37 1
        TestSuiteFactory *factory = new TestSuiteFactory<TestCaseType>();
@


1.3
log
@Removed unnecessary #include's of TestSuiteBuilder.h
Removed RTTI dependent stuff from TestSuite and TestSuiteBuilder.
@
text
@d28 1
a28 1
        AbstractTestFactory *factory = new TestSuiteFactory<TestCaseType>();
@


1.2
log
@Fixed #include's for cppunit headers.
@
text
@d20 1
a20 1
  template<class TestCaseType>
@


1.1
log
@Merged Baptiste Lepilleurs CppUnitW 1.2.
Some differences:
TypeInfo stuff (in TestSuite) compiled in only if USE_TYPEINFO is set.
TestSuite.getTests now returns a const ref instead of taking a ref as param.
Removed auto_ptr stuff from TestFactoryRegistry: auto_ptr cannot be used in
containers.
@
text
@d1 2
a2 2
#ifndef CPPUNIT_AUTOREGISTERSUITE_H
#define CPPUNIT_AUTOREGISTERSUITE_H
d5 2
a6 4

#include "TestSuiteFactory.h"
#include "TestFactoryRegistry.h"

d45 1
a45 1
#endif  // CPPUNIT_AUTOREGISTERSUITE_H
@

