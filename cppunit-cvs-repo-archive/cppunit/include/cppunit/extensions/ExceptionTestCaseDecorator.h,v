head	1.4;
access;
symbols
	REL_1_12_1:1.3
	REL_1_11_6:1.3
	REL_1_11_4:1.3
	REL_1_11_0:1.3
	TG_CPPUNIT_NO_STREAM_AFTER:1.3
	TG_CPPUNIT_NO_STREAM_BEFORE:1.3
	REL_1_10_2:1.3
	REL_1_10_0:1.3
	REL_1_9_14:1.3
	REL_1_9_12:1.3
	BRANCH_1_9_12:1.3.0.2
	TG_BRANCH_1_9_12:1.3
	TG_BEFORE_HPUX_PLUGIN:1.3
	TG_BEFORE_SUN4_PORT:1.1
	REL_1_9_10:1.1;
locks; strict;
comment	@ * @;


1.4
date	2008.02.21.03.10.06;	author smr99;	state Exp;
branches;
next	1.3;

1.3
date	2003.03.15.08.55.28;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.02.19.45.53;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.08.03.15.47.52;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Changes to suppress warnings of gcc -Wall -W -ansi, mainly from patch [1898225].
@
text
@#ifndef CPPUNIT_EXTENSIONS_EXCEPTIONTESTCASEDECORATOR_H
#define CPPUNIT_EXTENSIONS_EXCEPTIONTESTCASEDECORATOR_H

#include <cppunit/Portability.h>
#include <cppunit/Exception.h>
#include <cppunit/extensions/TestCaseDecorator.h>

CPPUNIT_NS_BEGIN


/*! \brief Expected exception test case decorator.
 *
 * A decorator used to assert that a specific test case should throw an
 * exception of a given type.
 *
 * You should use this class only if you need to check the exception object
 * state (that a specific cause is set for example). If you don't need to
 * do that, you might consider using CPPUNIT_TEST_EXCEPTION() instead.
 *
 * Intended use is to subclass and override checkException(). Example:
 *
 * \code
 *
 * class NetworkErrorTestCaseDecorator : 
 *           public ExceptionTestCaseDecorator<NetworkError>
 * {
 * public:
 *   NetworkErrorTestCaseDecorator( NetworkError::Cause expectedCause )
 *       : m_expectedCause( expectedCause )
 *   {
 *   }
 * private:
 *   void checkException( ExpectedExceptionType &e )
 *   {
 *     CPPUNIT_ASSERT_EQUAL( m_expectedCause, e.getCause() );
 *   }
 *
 *   NetworkError::Cause m_expectedCause;
 * };
 * \endcode
 *
 */ 
template<class ExpectedException>
class ExceptionTestCaseDecorator : public TestCaseDecorator
{
public:
  typedef ExpectedException ExpectedExceptionType;

  /*! \brief Decorates the specified test.
   * \param test TestCase to decorate. Assumes ownership of the test.
   */
  ExceptionTestCaseDecorator( TestCase *test )
      : TestCaseDecorator( test )
  {
  }

  /*! \brief Checks that the expected exception is thrown by the decorated test.
   * is thrown.
   *
   * Calls the decorated test runTest() and checks that an exception of
   * type ExpectedException is thrown. Call checkException() passing the
   * exception that was caught so that some assertions can be made if
   * needed.
   */
  void runTest()
  {
    try
    {
      TestCaseDecorator::runTest();
    }
    catch ( ExpectedExceptionType &e )
    {
      checkException( e );
      return;
    }

    // Moved outside the try{} statement to handle the case where the
    // expected exception type is Exception (expecting assertion failure).
#if CPPUNIT_USE_TYPEINFO_NAME
      throw Exception( Message(
                         "expected exception not thrown",
                         "Expected exception type: " + 
                           TypeInfoHelper::getClassName( 
                               typeid( ExpectedExceptionType ) ) ) );
#else
      throw Exception( Message("expected exception not thrown") );
#endif
  }

private:
  /*! \brief Called when the exception is caught.
   *
   * Should be overriden to check the exception.
   */
  virtual void checkException( ExpectedExceptionType & )
  {
  }
};


CPPUNIT_NS_END

#endif // CPPUNIT_EXTENSIONS_EXCEPTIONTESTCASEDECORATOR_H

@


1.3
log
@* src/cppunit/CompilerOutputter.cpp:
* src/cppunit/ProtectorChain.cpp:
* src/cppunit/StringTools.cpp:
* src/cppunit/TestPath.cpp:
* src/cppunit/TypeInfoHelper.cpp:
* src/cppunit/XmlElement.cpp:
* src/cppunit/XmlOutputter.cpp: switched to using unsigned index in loop to
	avoid signed/unsigned warning in vc7.

* include/cppunit/extension/ExceptionTestCaseDecorator.h: removed dll export
	on template (caused link error on vc7).
@
text
@d95 1
a95 1
  virtual void checkException( ExpectedExceptionType &e )
@


1.2
log
@* include/cppunit/plugin/DynamicLibraryManagerException.h: added constructor
  to fix compilation issues on recents version of gcc and sun CC (bug #619059)

* include/cppunit/input/XmlInputHelper.h: added.

* include/cppunit/extensions/TestSuiteBuilderContext.h:
* src/cppunit/TestSuiteBuilderContext.cpp: added addProperty() and
  getStringProperty(). Added macros CPPUNIT_TEST_SUITE_PROPERTY.

* src/msvc6/testrunner/TestRunnerDlg.cpp: integrated Tim Threlkeld's
  bug fix #610162: browse button was disabled if history was empty.

* src/msvc6/testrunner/DynamicWindow/cdxCSizeIconCtrl.cpp: integrated
  Tim Threlkeld's bug fix #610191: common control were not initialized.

* include/cppunit/extensions/ExceptionTestCaseDecorator.h: bug #603172,
  missing Message construction.

* src/cppunit/DefaultProtector.cpp: bug #603172. Fixed missing ';'.

* src/cppunit/TestCase.cpp: bug #603671. Removed unguarded typeinfo
  include.

* examples/cppunittests/*Suite.h: bug #603666. Added missing Portability.h
  include.
@
text
@d44 1
a44 1
class CPPUNIT_API ExceptionTestCaseDecorator : public TestCaseDecorator
@


1.1
log
@* include/cppunit/Exception.h:
* src/cppunit/Exception.h: added setMessage().

* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added class ProtectorGuard. Change the
  reportXXX() method to support Exception passing and SourceLine.

* include/cppunit/TestCaller.h: removed 'expect exception' features.
  It is now handled by ExceptionTestCaseDecorator and TestCaller no
  longer need default template argument support.

* include/cppunit/TestCase.h:
* include/cppunit/extensions/TestCaller.h: runTest() is now public
  instead of protected, so that it can be decorated.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.h: added pushProtector() and popProtector()
  methods. This allow user to specify their own exception trap when
  running test case.

* include/cppunit/extensions/TestDecorator.h:
* src/cppunit/TestDecorator.cpp: added. Extracted from TestDecorator.h.
  The test passed to the constructor is now owned by the decorator.

* include/cppunit/extensions/TestCaseDecorator.h:
* src/cppunit/TestCaseDecorator.cpp: added. Decorator for TestCase
  setUp(), tearDown() and runTest().

* include/cppunit/extensions/ExceptionTestCaseDecorator.h: added.
  TestCaseDecorator to expect that a specific exception is thrown.

* include/cppunit/extensions/HelperMacros.h: updated against TestCaller
  change.

* src/cppunit/DefaultFunctor.h: fixed bug (did not return underlying
  test return code).

* src/cppunit/ProtectorChain.cpp: fixed bug in chaing return code.

* src/cppunit/DefaultFunctor.h: fixed bug.

* src/msvc6/testrunner/ActiveTest.h:
* src/msvc6/testrunner/ActiveTest.cpp: updated against
  TestCaseDecorator ownership policy change. Moved inline functions
  to .cpp.

* examples/cppunittest/TestSetUpTest.cpp: updated to use MockTestCase
  and against the new ownership policy.

* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/RepeatedTestTest.cpp: updated against
  TestDecorator ownership policy change.

* examples/cppunittest/ExceptionTestCaseDecoratorTest.h:
* examples/cppunittest/ExceptionTestCaseDecoratorTest.cpp: added. Unit
  tests for ExceptionTestCaseDecoratorTest.
@
text
@d86 1
a86 1
      throw Exception( "expected exception not thrown" );
@

