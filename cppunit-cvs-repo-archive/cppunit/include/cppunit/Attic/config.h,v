head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2001.06.17.22.32.16;	author smr99;	state dead;
branches;
next	1.4;

1.4
date	2001.06.11.21.56.35;	author smr99;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.11.21.54.39;	author smr99;	state Exp;
branches;
next	1.2;

1.2
date	2001.06.11.20.00.52;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2001.06.05.21.36.31;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Add AC_PREREQ; remove include/cppunit/config.h
@
text
@#ifndef CPPUNIT_CONFIG_H
#define CPPUNIT_CONFIG_H

/* Default configuration for VC++ 6.0.
 * On Unix platform, this file is generated by the configure script.
 *
 * Since we don't have that in everyday VC++, we define this header with
 * reasonable default:
 * - RTTI enabled
 * - compatibility with old assert macro, now replaced with CPPUNIT_ASSERT.
 * - preprocessor can expand expression
 *
 * Define the symbol CPPUNIT_DONT_USE_TYPEINFO to disable RTTI.
 * Define the symbol CPPUNIT_DISABLE_NAKED_ASSERT to disable naked assert.
 */

/* Define to 1 if the compiler supports Run-Time Type Identification */
#ifdef CPPUNIT_DONT_USE_TYPEINFO
#define CPPUNIT_USE_TYPEINFO                0
#else
#define CPPUNIT_USE_TYPEINFO                1
#endif

/* Define to 1 if you wish to have the old-style macros
   assert(), assertEqual(), assertDoublesEqual(), and assertLongsEqual() */
#ifdef CPPUNIT_DISABLE_NAKED_ASSERT
#define CPPUNIT_ENABLE_NAKED_ASSERT         0
#else
#define CPPUNIT_ENABLE_NAKED_ASSERT         1
#endif

/* Define to 1 if the preprocessor expands (#foo) to "foo" (quotes incl.) */
#define CPPUNIT_HAVE_CPP_SOURCEANNOTATION   1

#pragma warning( disable: 4786 )

#endif
@


1.4
log
@Revert unintended commit
@
text
@@


1.3
log
@*** empty log message ***
@
text
@d4 12
d18 3
d22 1
d26 1
d28 3
d35 1
@


1.2
log
@* include/cppunit/Exception.h: now inherit from std::exception instead
of ::exception. Added clone(), type(), and isInstanceOf()
methods for subclassing support. Changed UNKNOWNLINENUMBER type to long
for consistence with lineNumber().

* include/cppunit/NotEqualException.h: addded, exception to be used
with assertEquals().

* include/cppunit/TestAssert.h: changed TestAssert into a namespace
instead of a class. This remove the need of template member methods
and does not cause compiler internal error on VC++.
Macro CPPUNIT_ASSERT_MESSAGE has been added to fail test with
a specified message.

* include/cppunit/TestCaller.h: added "Expected exception" support.
Based on Tim Jansen patch (#403745), but use a traits instead of RTTI
to distingh between "No expected exception" and "Excepted exception".
Exception type name is reported using RTTI if CPPUNIT_USE_TYPEINFO is
defined.
@
text
@a3 12
/* Default configuration for VC++ 6.0.
 * On Unix platform, this file is generated by the configure script.
 *
 * Since we don't have that in everyday VC++, we define this header with
 * reasonable default:
 * - RTTI enabled
 * - compatibility with old assert macro, now replaced with CPPUNIT_ASSERT.
 * - preprocessor can expand expression
 *
 * Define the symbol CPPUNIT_DONT_USE_TYPEINFO to disable RTTI.
 * Define the symbol CPPUNIT_DISABLE_NAKED_ASSERT to disable naked assert.
 */
a5 3
#ifdef CPPUNIT_DONT_USE_TYPEINFO
#define CPPUNIT_USE_TYPEINFO                0
#else
a6 1
#endif
a9 1
#ifdef CPPUNIT_DISABLE_NAKED_ASSERT
a10 3
#else
#define CPPUNIT_ENABLE_NAKED_ASSERT         1
#endif
a14 1
#pragma warning( disable: 4786 )
@


1.1
log
@* src/cppunit/TypeInfoHelper.cpp: removed #include <config.h>, cppunit/config.h was already included.

* src/cppunit/cppunit.dsp: removed TestAssert.cpp from project.

* added/updated .cvsignore files for beter handling of windows projects.

* added include/cppunit/config.h with a default configuration for VC++ 6.0.

* include/cppunit/.cvsignore: removed config.h from the list of ignored file.

* renamed VC++ configurations without RTTI from "Debug No CU_USE_TYPEINFO" to "Debug Crossplatform".

* include/cppunit/TestAssert.h: added include <math.h> for fabs().
@
text
@d35 1
@

