head	1.23;
access;
symbols
	REL_1_12_1:1.23
	REL_1_11_6:1.22
	REL_1_11_4:1.22
	REL_1_11_0:1.22
	TG_CPPUNIT_NO_STREAM_AFTER:1.22
	TG_CPPUNIT_NO_STREAM_BEFORE:1.22
	REL_1_10_2:1.22
	REL_1_10_0:1.22
	REL_1_9_14:1.22
	REL_1_9_12:1.22
	BRANCH_1_9_12:1.22.0.2
	TG_BRANCH_1_9_12:1.22
	TG_BEFORE_HPUX_PLUGIN:1.22
	TG_BEFORE_SUN4_PORT:1.22
	REL_1_9_10:1.22
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.15
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.15
	REL_1_9_6:1.15
	REL_1_9_4:1.15
	REL_1_9_0:1.14
	REL_1_8_0:1.13
	REL_1_7_8:1.10
	REL_1_7_3:1.7
	REL_1_7_1:1.6
	REL_1_6_2:1.3
	BRANCH_1_6:1.3.0.2
	REL_1_6_1:1.3
	REL_1_6_0:1.3
	REL_1_5_5:1.2;
locks; strict;
comment	@ * @;


1.23
date	2006.10.26.07.21.12;	author blep;	state Exp;
branches;
next	1.22;

1.22
date	2002.08.29.22.26.01;	author blep;	state Exp;
branches;
next	1.21;

1.21
date	2002.08.29.19.27.07;	author blep;	state Exp;
branches;
next	1.20;

1.20
date	2002.08.03.15.47.52;	author blep;	state Exp;
branches;
next	1.19;

1.19
date	2002.07.16.22.59.21;	author blep;	state Exp;
branches;
next	1.18;

1.18
date	2002.07.13.10.33.49;	author blep;	state Exp;
branches;
next	1.17;

1.17
date	2002.07.12.05.59.57;	author blep;	state Exp;
branches;
next	1.16;

1.16
date	2002.06.14.11.12.17;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2002.04.17.22.27.28;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2002.04.12.22.34.37;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2002.03.28.15.47.07;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2002.03.27.19.04.02;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2002.03.27.17.56.46;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2002.03.25.22.35.34;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2002.03.25.18.41.39;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2002.03.24.19.39.55;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2002.02.28.10.52.15;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2001.10.06.10.16.31;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2001.10.05.08.06.28;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2001.10.03.21.16.12;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2001.06.01.19.34.42;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.06.16.19.31;	author bastiaan;	state Exp;
branches;
next	1.1;

1.1
date	2001.04.14.22.37.31;	author bastiaan;	state Exp;
branches;
next	;


desc
@@


1.23
log
@- fixed some compilation issues for QtTestRunner.
@
text
@#ifndef CPPUNIT_TESTRESULT_H
#define CPPUNIT_TESTRESULT_H

#include <cppunit/Portability.h>

#if CPPUNIT_NEED_DLL_DECL
#pragma warning( push )
#pragma warning( disable: 4251 )  // X needs to have dll-interface to be used by clients of class Z
#endif

#include <cppunit/SynchronizedObject.h>
#include <cppunit/portability/CppUnitDeque.h>
#include <string>

CPPUNIT_NS_BEGIN


class Exception;
class Functor;
class Protector;
class ProtectorChain;
class Test;
class TestFailure;
class TestListener;


#if CPPUNIT_NEED_DLL_DECL
//  template class CPPUNIT_API std::deque<TestListener *>;
#endif

/*! \brief Manages TestListener.
 * \ingroup TrackingTestExecution
 *
 * A single instance of this class is used when running the test. It is usually
 * created by the test runner (TestRunner).
 *
 * This class shouldn't have to be inherited from. Use a TestListener
 * or one of its subclasses to be informed of the ongoing tests.
 * Use a Outputter to receive a test summary once it has finished
 *
 * TestResult supplies a template method 'setSynchronizationObject()'
 * so that subclasses can provide mutual exclusion in the face of multiple
 * threads.  This can be useful when tests execute in one thread and
 * they fill a subclass of TestResult which effects change in another 
 * thread.  To have mutual exclusion, override setSynchronizationObject()
 * and make sure that you create an instance of ExclusiveZone at the 
 * beginning of each method.
 *
 * \see Test, TestListener, TestResultCollector, Outputter.
 */
class CPPUNIT_API TestResult : protected SynchronizedObject
{
public:
  /// Construct a TestResult
  TestResult( SynchronizationObject *syncObject = 0 );

  /// Destroys a test result
  virtual ~TestResult();

  virtual void addListener( TestListener *listener );

  virtual void removeListener( TestListener *listener );

  /// Resets the stop flag.
  virtual void reset();
  
  /// Stop testing
  virtual void stop();

  /// Returns whether testing should be stopped
  virtual bool shouldStop() const;

  /// Informs TestListener that a test will be started.
  virtual void startTest( Test *test );

  /*! \brief Adds an error to the list of errors. 
   *  The passed in exception
   *  caused the error
   */
  virtual void addError( Test *test, Exception *e );

  /*! \brief Adds a failure to the list of failures. The passed in exception
   * caused the failure.
   */
  virtual void addFailure( Test *test, Exception *e );

  /// Informs TestListener that a test was completed.
  virtual void endTest( Test *test );

  /// Informs TestListener that a test suite will be started.
  virtual void startSuite( Test *test );

  /// Informs TestListener that a test suite was completed.
  virtual void endSuite( Test *test );

  /*! \brief Run the specified test.
   * 
   * Calls startTestRun(), test->run(this), and finally endTestRun().
   */
  virtual void runTest( Test *test );

  /*! \brief Protects a call to the specified functor.
   *
   * See Protector to understand how protector works. A default protector is
   * always present. It captures CppUnit::Exception, std::exception and
   * any other exceptions, retrieving as much as possible information about
   * the exception as possible.
   *
   * Additional Protector can be added to the chain to support other exception
   * types using pushProtector() and popProtector().
   *
   * \param functor Functor to call (typically a call to setUp(), runTest() or
   *                tearDown().
   * \param test Test the functor is associated to (used for failure reporting).
   * \param shortDescription Short description override for the failure message.
   */
  virtual bool protect( const Functor &functor,
                        Test *test,
                        const std::string &shortDescription = std::string("") );

  /// Adds the specified protector to the protector chain.
  virtual void pushProtector( Protector *protector );

  /// Removes the last protector from the protector chain.
  virtual void popProtector();

protected:
  /*! \brief Called to add a failure to the list of failures.
   */
  void addFailure( const TestFailure &failure );

  virtual void startTestRun( Test *test );
  virtual void endTestRun( Test *test );
  
protected:
  typedef CppUnitDeque<TestListener *> TestListeners;
  TestListeners m_listeners;
  ProtectorChain *m_protectorChain;
  bool m_stop;

private: 
  TestResult( const TestResult &other );
  TestResult &operator =( const TestResult &other );
};


CPPUNIT_NS_END


#if CPPUNIT_NEED_DLL_DECL
#pragma warning( pop )
#endif

#endif // CPPUNIT_TESTRESULT_H


@


1.22
log
@* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: fixed shouldStop() bug.
@
text
@d13 1
@


1.21
log
@* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/Protector.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/plugin/DynamicLibraryManager.h:
* include/cppunit/plugin/PlugInManager.h:
* include/cppunit/plugin/PlugInParameters.h:
* include/cppunit/TestPlugIn.h:
* src/cppunit/DefaultProtector.h:
* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorContext.h:
* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: fixed a dew documentation bugs.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: moved documentation to header.
@
text
@d60 1
d62 3
@


1.20
log
@* include/cppunit/Exception.h:
* src/cppunit/Exception.h: added setMessage().

* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added class ProtectorGuard. Change the
  reportXXX() method to support Exception passing and SourceLine.

* include/cppunit/TestCaller.h: removed 'expect exception' features.
  It is now handled by ExceptionTestCaseDecorator and TestCaller no
  longer need default template argument support.

* include/cppunit/TestCase.h:
* include/cppunit/extensions/TestCaller.h: runTest() is now public
  instead of protected, so that it can be decorated.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.h: added pushProtector() and popProtector()
  methods. This allow user to specify their own exception trap when
  running test case.

* include/cppunit/extensions/TestDecorator.h:
* src/cppunit/TestDecorator.cpp: added. Extracted from TestDecorator.h.
  The test passed to the constructor is now owned by the decorator.

* include/cppunit/extensions/TestCaseDecorator.h:
* src/cppunit/TestCaseDecorator.cpp: added. Decorator for TestCase
  setUp(), tearDown() and runTest().

* include/cppunit/extensions/ExceptionTestCaseDecorator.h: added.
  TestCaseDecorator to expect that a specific exception is thrown.

* include/cppunit/extensions/HelperMacros.h: updated against TestCaller
  change.

* src/cppunit/DefaultFunctor.h: fixed bug (did not return underlying
  test return code).

* src/cppunit/ProtectorChain.cpp: fixed bug in chaing return code.

* src/cppunit/DefaultFunctor.h: fixed bug.

* src/msvc6/testrunner/ActiveTest.h:
* src/msvc6/testrunner/ActiveTest.cpp: updated against
  TestCaseDecorator ownership policy change. Moved inline functions
  to .cpp.

* examples/cppunittest/TestSetUpTest.cpp: updated to use MockTestCase
  and against the new ownership policy.

* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/RepeatedTestTest.cpp: updated against
  TestDecorator ownership policy change.

* examples/cppunittest/ExceptionTestCaseDecoratorTest.h:
* examples/cppunittest/ExceptionTestCaseDecoratorTest.cpp: added. Unit
  tests for ExceptionTestCaseDecoratorTest.
@
text
@d53 1
d55 2
d61 2
a62 2

  virtual void reset();
d65 1
d68 1
d70 5
d76 4
d81 2
d85 1
d87 2
d91 4
d97 15
d116 1
d119 1
d123 2
@


1.19
log
@* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added. Base class for protectors.

* src/cppunit/DefaultProtector.h:
* src/cppunit/DefaultProtector.cpp: added. Implementation of the default
  protector used to catch std::exception and any other exception.

* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorChain.cpp: added. Implementation of a chain of
  protector, allowing catching custom exception and implementation of
  expected exception.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: updated to use protector.
@
text
@d19 1
d77 4
@


1.18
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d18 2
d24 1
d73 4
d86 1
@


1.17
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d12 1
a12 1
#include <deque>
d77 1
a77 1
  typedef std::deque<TestListener *> TestListeners;
@


1.16
log
@* src/cppunit/TypeInfoHelper.cpp: added work around for bug #565481.
  gcc 3.0 RTTI name() returns the type prefixed with a number (the
  length of the type). The work around strip the number.

* src/msvc6/testpluginrunner/TestPlugInRunnerApp.cpp: registry key is now
  set. Allow to save settings.

* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.h:
* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.cpp: added layout
  initialization for resizing.

* src/msvc6/testpluginrunner/TestPlugRunner.rc:
* src/msvc6/testpluginrunner/TestPlugInRunner.dsp: added TestRunner
  project files. Somehow I can't get cdxCDynamicDialog to compile
  as a MFC extension. Included all sources files and resources
  as a very dirt work around.

* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/TestRunnerModel.h: those classes are no longer
  exported in the MFC extension. See TestPlugInRunner issue with
  cdxCDynamicDialog.

* include/cppunit/Message.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TestFactoryRegistry.h:
* include/cppunit/XmlElement.h:
* include/cppunit/TypeInfoHelper.h: commented out STL template export
  in DLL. This caused conflicts when instantiting the same template in
  a user project.
@
text
@d14 2
a15 1
namespace CppUnit {
d87 1
a87 1
} // namespace CppUnit
@


1.15
log
@* bumped version to 1.9.3

* FAQ: added question about 4786 warning on VC++.

* NEWS: updated.

* contrib/msvc/readme.txt: moved to contrib/readme.txt.

* contrib/xml-xsl/report.xsl: added XML style sheet contributed by
'cuppa' project team (http://sourceforge.jp/projects/cuppa/)

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: added tests for
  startTestRun()/endTestRun().

* examples/simple/*: added. A simple example.

* include/cppunit/BriefTestProgressListener.h:
* src/cppunit/BriefTestProgressListener.cpp: added. Verbose progess listener
  that print the test name before running the test.

* include/cppunit/TestListener.h: added startTestRun()/endTestRun().

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: added runTest(), to be called to run
  a test by test runner.

* src/cppunit/TextTestRunner.cpp:
* src/cppunit/TestRunner.cpp: updated to use TestResult::runTest().

* include/cppunit/plugin/PlugInManager.h:
* src/cppunit/PlugInManager.cpp: added. Managers for all loaded plug-ins.

* include/cppunit/plugin/TestPlugInDefaultImpl.h:
* src/cppunit/TestPlugInDefaultImpl.cpp: renamed TestPlugInAdapter. All
  implementations are empty.

* include/cppunit/plugin/TestPlugInSuite.h: removed.
* src/cppunit/TestPlugInSuite.cpp: removed. Replaced by PlugInManager.

* include/cppunit/plugin/TestPlugIn.h: rewrote the plug-in interface to
  provide more versatility. updated macros to match new interface.

* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestFactoryRegistry.cpp: Added unregisterFactory().
  Added convenience method addRegistry(). Rewrote registry life cycle
  management. AutoRegisterSuite can now detect that the registry has been
  destroy and not call to it to unregister its test factory.

* include/cppunit/extensions/AutoRegisterTest.h: on destruction, the registered
  factory is unregistered from the registry.

* include/cppunit/extensions/HelperMacros.h: added macros
  CPPUNIT_REGISTRY_ADD_TO_DEFAULT and CPPUNIT_REGISTRY_ADD to help
  build test suite hierarchy.

* src/cppunit/msvc/DllPlugInTester/*: moved to src/cppunit/DllPlugInTester/.

* src/cppunit/DllPlugInTester/DllPlugInTester.cpp: removed UNICODE stuffs. Use
  the PlugInManager instead of PlugInTestSuite. Simplified: only one test on
  command line, but many DLL can be specified. Added configurations to link
  against cppunit dll, those are now the default configuration (static linking
  don't make much sense for plug-in).
@
text
@d22 1
a22 1
  template class CPPUNIT_API std::deque<TestListener *>;
@


1.14
log
@* include/cppunit/CompilerOutputter.h:
* src/cppunit/CompilerOutputter.h: deprecated defaultOuputter(). Added
  setLocationFormat() and format specifiation in constructor. A string that
  represent the location format is used to output the location. Default format
  is defined by CPPUNIT_COMPILER_LOCATION_FORMAT.

* include/cppunit/config-msvc6.h:
* include/cppunit/Portability.h: added CPPUNIT_COMPILER_LOCATION_FORMAT. Use
  gcc location format if VC++ is not detected.

* include/cppunit/Test.h: fixed documentation.

* include/cppunit/TestListener.h: added startSuite() and endSuite()
  callbacks. Added new example to documentation.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp:
* include/cppunit/TestComposite.h:
* src/cppunit/TestComposite.cpp: Updated to inform the listeners.

* src/qttestrunner/TestBrowserDlgImpl.cpp: used Test new composite interface
  instead of RTTI to explore the test hierarchy.

* examples/cppunittest/MockTestListener.h:
* examples/cppunittest/MockTestListener.cpp: updated,added support for
  startSuite() and endSuite().

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: added tests for startSuite()
  and endSuite().
@
text
@d67 2
d71 3
@


1.13
log
@* doc/cookbook.html: removed. Replaced by cookbook.doc.

* doc/cookbook.dox: added, conversion of cookbook.html to Doxygen format.

* doc/other_documentation.dox: added groups definition.

* doc/Makefile.am: replaced cookbook.html by cookbook.dox

* doc/Doxyfile.in: added predefined CPPUNIT_HAVE_CPP_SOURCE_ANNOTATION.
Replaced cookbook.html by cookbook.dox.

* include/cppunitui/mfc/TestRunner.h: added, extracted from
include/msvc6/testrunner/TestRunner.h. Moved class TestRunner to namespace
CppUnit::MfcUi.

* include/msvc6/testrunner/TestRunner.h: deprecated. A simple typedef to
CppUnit::MfcUi::TestRunner.

* include/textui/TestRuner.h: added, extracted from
include/cppunit/TextTestRunner.h.

* src/cppunit/TextTestRunner.cpp: renamed TestRunner.cpp. Moved into
namespace CppUnit::TextUi.

* src/msvc6/testruner/TestRunner.cpp: moved into namespace CppUnit::MfcUi.

* src/cppunit/CompilerOutputter.cpp: removed printing "- " before
NotEqualException addional message, for consistency between different
TestRunner (Mfc,Text...)

* include/cppunit/Asserter.h:
* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/Outputter.h:
* include/cppunit/SourceLine.h:
* include/cppunit/TestAssert.h:
* include/cppunit/TestCaller.h:
* include/cppunit/TestFailure.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/AutoRegisterSuite.h:
* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: doc update. organization
in groups.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.cpp:
* examples/msvc6/HostApp/HostApp.cpp: updated to use
CppUnit::MfcUi::TestRunner.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use
CppUnit::TextUi::TestRunner.
@
text
@d64 3
@


1.12
log
@* include/msvc/testrunner/TestRunner.h: updated doc. reindented.

* include/cppunit/Asserter.h:
* include/cppunit/Asserter.cpp:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestResult.h:
* include/cppunit/SynchronizedObject.h:
* include/cppunit/extensions/TestCaller.h: doc update.
@
text
@d26 1
d29 1
a29 1
 * created by the test runner (TextTestRunner).
@


1.11
log
@* makefile.am: added src/CppUnitLibraries.dsw, new contribution, and
src/qttestrunner.

* TODO: updated (doc).

* contrib/msvc/AddingUnitTestMethod.dsm: added, submitted by
bloodchen@@hotmail.com.

* constrib/msvc/readme.txt: updated.

* include/cppunit/TestAsserter.h:
* include/cppunit/SourceLine.h: updated doc.

* include/cppunit/TestCaller.h: reindented. updated doc.

* include/cppunit/extensions/HelperMacros.h: relaxed constraint on fixture.
Fixture base class may be TestFixture instead of TestCase.

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.h: TestCase inherits TestFixture for setUp() and
tearDown() definition. Moved documentation to TestFixture.

* include/cppunit/TestFixture.h: updated documentation.

* include/cppunit/TestRegistry.h:
* src/cppunit/TestRegistry.cpp: Removed. Replaced by TestFactoryRegistry.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: made printing progress using a
TextTestProgressListener optional.

* examples\cppunittest\ExceptionTest.h:
* examples\cppunittest\HelperMacrosTest.h:
* examples\cppunittest\HelperMacrosTest.cpp:
* examples\cppunittest\NotEqualException.h:
* examples\cppunittest\OrthodoxTest.h:
* examples\cppunittest\RepeatedTest.h:
* examples\cppunittest\TestAssertTest.h:
* examples\cppunittest\TestCallerTest.h:
* examples\cppunittest\TestDecoratorTest.h:
* examples\cppunittest\TestFailureTest.h:
* examples\cppunittest\TestResultCollectorTest.h:
* examples\cppunittest\TestResultTest.h:
* examples\cppunittest\TestSetUpTest.h:
* examples\cppunittest\TestSuiteTest.h:
* examples\cppunittest\XmlOutputterTest.h:
* examples\cppunittest\XmlOutputterTest.cpp:
* examples\cppunittest\XmlUniformizerTest.h:
* examples\cppunittest\XmlUniformizerTest.cpp: changed base class for fixture
from TestCase to TestFixture.

* examples\hierarchy\BoardGameTest.h:
* examples\hierarchy\ChessTest.h:
* examples\hierarchy\main.cpp: updated to use HelperMacros for correct
fixture instantiation (the ChessBoard::testReset test case was using
BoardGame fixture instance instead of ChessBoard).
@
text
@d25 1
a25 1
/*! Manages TestListener.
@


1.10
log
@* include/cppunit/makefile.am: removed TestRegistry.h

* include/cppunit/TestRegistry.h: removed. Obsolete, replaced by
TestFactoryRegistry.

* src/cppunit/makefile.am: removed TestRegistry.cpp. Added cppunit_dll.dsp.

* include/cppunit/CompilerOutputter.h:
* include/cppunit/NotEqualException.h:
* include/cppunit/SynchronizedObject.h:
* include/cppunit/TestFixture.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestSucessListener.h:
* include/cppunit/TextOutputter.h:
* include/cppunit/TextTestProgressListener.h:
* include/cppunit/TextTestResult.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/extensions/TestFactory.h:
* include/cppunit/extensions/TestFactoryRegistry.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/extensions/TestSuiteFactory.h: minor doc update.

* include/cppunit/TestFixture.h: added DLL export.

* include/cppunit/msvc6/TestPlugInInterface.h: updated doc. Added automatic
exportation of TestPlugIn publishing function.

* src/cppunit/TestCase.cpp:
* include/cppunit/TestCase.h: inherits setUp() and tearDown() from
class TestFixture.
@
text
@d27 2
a28 1
 * FIXME: NEED UPDATE (main responsibilty is to act as an event manager)
d30 3
a32 4
 * The test framework distinguishes between failures and errors.
 * A failure is anticipated and checked for with assertions. Errors are
 * unanticipated problems signified by exceptions that are not generated
 * by the framework.
d42 1
a42 1
 * \see Test, TestResultCollector
@


1.9
log
@* include/cppunit/config-msvc6.h:
* include/cppunit/Portability.h
* include/cppunit/extensions/TestFactoryRegistry.h
* include/cppunit/TestResult.h
* include/cppunit/TestResultCollector.h
* include/cppunit/TestSuite.h
* include/cppunit/TextTestRunner.h
* include/cppunit/XmlOutputter.h: removed warning when compiling CppUnit as DLL.

* src/cppunit/DllMain.cpp: added some defines to speed up compilation a bit.
@
text
@d25 1
a25 3
/**
 * A TestResult collects the results of executing a test case. It is an 
 * instance of the Collecting Parameter pattern.
d34 1
a34 1
 * TestResult supplies a template method 'setSynchronizationObject ()'
d38 1
a38 1
 * thread.  To have mutual exclusion, override setSynchronizationObject ()
@


1.8
log
@* INSTALL-WIN32.txt: added some info to build cppunit as a DLL.

* include/cppunit/config-msvc6.h: added definition of macro CPPUNIT_API when
building or linking DLL. Defined CPPUNIT_BUILD_DLL when building, and
CPPUNIT_DLL when linking.

* include/cppunit/Portability.h: added empty definition of macro CPPUNIT_API
when not building or using CppUnit as a DLL. When any of those symbol is defined,
the symbol CPPUNIT_NEED_DLL_DECL is set to 1.

* include/cppunit/extensions/RepeatedTest.h:
* include/cppunit/extensions/TestDecorator.h:
* include/cppunit/extensions/TestSetUp.h:
* include/cppunit/TestCaller.h
* include/cppunit/extensions/TestFactory.h
* include/cppunit/extensions/TestFactoryRegistry.h
* include/cppunit/extensions/TypeInfoHelper.h
* include/cppunit/Asserter.h
* include/cppunit/Exception.h
* include/cppunit/NotEqualException.h
* include/cppunit/SourceLine.h
* include/cppunit/SynchronizedObject.h
* include/cppunit/Test.h
* include/cppunit/TestAssert.h
* include/cppunit/TestCase.h
* include/cppunit/TestFailure.h
* include/cppunit/TestListener.h
* include/cppunit/TestResult.h
* include/cppunit/TestSuite.h
* include/cppunit/CompilerOutputter.h
* include/cppunit/Outputter.h
* include/cppunit/TestResultCollector.h
* include/cppunit/TestSuccessListener.h
* include/cppunit/TextOutputter.h
* include/cppunit/TextTestProgressListener.h
* include/cppunit/TextTestResult.h
* include/cppunit/TextTestRunner.h
* include/cppunit/XmlOutputter.h: added CPPUNIT_API for DLL export.

* include/cppunit/TestSuite.h:
* src/cppunit/TestSuite.cpp: reindented

* include/cppunit/extensions/TestSetUp.h:
* src/cppunit/TestSetUp.cpp: added .cpp. extracted inline method and moved them
to cpp file.
@
text
@d4 7
d78 1
d80 5
@


1.7
log
@* NEW: updated and restructured.

* include/cppunit/CompilerOutputter.h:
* src/cppunit/CompilerOutputter.cpp:
updated against TestResultChange. Changed TestResult to TestResultCollector.

* include/cppunit/extensions/HelperMacros.h: minor documentation fix.

* include/cppunit/Outputter.h: added. Abstract base class for all Outputter.

* include/cppunit/Portability.h: made the fix on OStringStream suggested by
Bob Summerwill to remove level 4 warning with VC++.

* include/cppunit/TestAssert.h: added macro CPPUNIT_ASSERT_EQUAL_MESSAGE.

* src/cppunit/TestFailure.cpp:
* include/cppunit/TestFailure.h: added method clone() to duplicate a failure. Made
all method virtual.

* include/cppunit/TestListener.h: changed signature of addFailure() to
addFailure( const TestFailure &failure ). Failure is now only a temporary object.

* include/cppunit/Outputter.h: added. Abstract base class for all outputter. Used
by TextTestRunner.

* include/cppunit/SynchronizedObject.h:
* src/cppunit/SynchronizedObject.cpp: added. Class extracted from TestResult.
Base class for objects that can be accessed from different threads.

* include/cppunit/TestResult.h: TestFailure.h is no longer included.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: extracted all methods related to keeping track
of the result to the new TestResultCollector class which is a TestListener.

* include/cppunit/TestResultCollector.h:
* src/cppunit/TestResultCollector.cpp: added. TestListener which kept track
of the result of the test run. All failure/error, and tests are tracked.

* include/cppunit/TestSucessListener.h:
* src/cppunit/TestSucessListener.cpp: added. TestListener extracted from
TestResult. Is responsible for wasSucessful().

* include/cppunit/TestCase.h:
* src/cppunit/TestCase.cpp: reindented.

* include/cppunit/TextOutputter.h:
* src/cppunit/TextOutputter.cpp: added. Copied from the deprecated
TextTestResult and modified to act as an Ouputter.

* include/cppunit/TextTestProgressListener.h:
* src/cppunit/TextTestProgressListener.cpp: Copied from the deprecated
TextTestResult and modified to print the dot while the test are running.

* include/cppunit/TextTestResult.h:
* src/cppunit/TextTestResult.cpp: updated against TestResult change.
No compatiblity break. Deprecated.

* include/cppunit/TextTestRunner.h:
* src/cppunit/TextTestRunner.cpp: updated to work with the new TestResult.
Use TextTestProgressListener and TextOutputter instead of TextTestResult.
Any outputter with interface Outputter can be used to print the test result
(CompilerOutputter, XmlOutputter, TextOutputter...)

* include/cppunit/XmlOutputter.h:
* src/cppunit/XmlOutputter.cpp: updated against TestResultChange.
Changed TestResult to TestResultCollector.

* src/msvc6/TestRunnerDlg.h:
* src/msvc6/TestRunnerDlg.cpp: fixed the 'fullrowselect' feature of the list view.
The dialog is a TestListener itself, it no longer use the GUITestResult class.

* src/msvc6/TestRunner.rc: moved the "autorun test button" in such a way that it
did not overlap the progress bar anymore.

* src/msvc6/MfcSynchronizationObject.h: added. Generic SynchronizedObject
lock for MFC.

* src/msvc6/GUITestResult.h :
* src/msvc6/GUITestResult.cpp : removed.

* src/qttestrunner/TestRunnerModel.h:
* src/qttestrunner/TestRunnerModel.cpp: changed addFailure() signature to reflect
change on TestListener.

* examples/cppunittest/CppUnitTestMain.cpp: updated to use the new Outputter
abstraction and TextTestRunner facilities.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.cpp: removed. Replaced by MockTestCase.

* examples/cppunittest/FailingTestCase.h:
* examples/cppunittest/FailingTestCase.h:

* examples/cppunittest/HelperMacrosTest.h:
* examples/cppunittest/HelperMacrosTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/MockTestListener.h:
* examples/cppunittest/MockTestListener.cpp: the class now behave like a mock
object.

* examples/cppunittest/MockTestCase.h:
* examples/cppunittest/MockTestCase.cpp: added. Mock TestCase object.

* examples/cppunittest/OrthodoxTest.h:
* examples/cppunittest/OrthodoxTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult to check for sucess or failure.

* examples/cppunittest/SynchronizedTestResult.h: Updated against TestResult
change.

* examples/cppunittest/TestCallerTest.h:
* examples/cppunittest/TestCallerTest.cpp: Updated against TestResult change.
Use MockTestListener instead of TestResult.

* examples/cppunittest/TestCaseTest.h:
* examples/cppunittest/TestCaseTest.cpp: Updated against TestResult change.
Use MockTestListener and MockTestCase instead of FailingTestCase and TestResult.

* examples/cppunittest/TestDecoratorTest.h:
* examples/cppunittest/TestDecoratorTest.cpp: Updated against TestResult change.
Use MockTestCase instead of FailingTestCase.

* examples/cppunittest/TestListenerTest.h:
* examples/cppunittest/TestListenerTest.cpp: removed. Those unit tests have been
rewrote and moved to TestResultTest.

* examples/cppunittest/TestResultTest.h:
* examples/cppunittest/TestResultTest.cpp: Updated to test the new interface.
Tests from TestListenerTest have been moved here.

* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp: added. Tests for the class
that been extracted from TestResult.

* examples/cppunittest/TestSetUpTest.h:
* examples/cppunittest/TestSetUpTest.cpp: renamed SetUp inner class to MockSetUp.
Changed interface to be more akin to a Mock object.

* examples/cppunittest/TestSuiteTest.h:
* examples/cppunittest/TestSuiteTest.cpp: Updated against TestResult change,
and rewrote to use MockTestCase instead of FailingTestCase.

* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: Updated against TestResult change.
Added some utility methods to make the update easier.
@
text
@d14 3
d39 1
a39 2

class TestResult : protected SynchronizedObject
@


1.6
log
@* examples/cppunittest/CppUnitTestMain.cpp : application returns
0 is test suite run sucessfuly, 1 otherwise.

* src/cppunit/Exception.cpp : bug fix, operator =() with VC++.
Removed call to std::exception::operator =() which is bugged
on VC++.

* doc/FAQ : added a note explaining why the test
ExceptionTest.testAssignment used to fail.

* NEWS : updated and detailed.

* include/cppunit/TestResult.h :
* src/cppunit/TestResult.cpp : added reset().

* include/cppunit/TextTestRunner.h :
* src/cppunit/TextTestRunner.cpp : Constructor take an optional
TextTestRestult. The TextTestResult remain alive as long as
the runner. Added result() to retreive the result. Printing the
result is now optinal (enabled by default).
@
text
@d4 1
a4 1
#include <cppunit/TestFailure.h>
d11 1
d19 2
d34 1
a34 1
 * \see Test
d37 1
a37 1
class TestResult
d39 28
a66 71
  public:
    typedef std::deque<TestFailure *> TestFailures;
    typedef std::deque<Test *> Tests;

    class SynchronizationObject
    {
      public:
        SynchronizationObject() {}
        virtual ~SynchronizationObject() {}

        virtual void lock() {}
        virtual void unlock() {}
    };

    TestResult( SynchronizationObject *syncObject =0 );
    virtual ~TestResult();

    virtual void reset();

    virtual void addError( Test *test, Exception *e );
    virtual void addFailure( Test *test, Exception *e );
    virtual void startTest( Test *test );
    virtual void endTest( Test *test );
    virtual int runTests() const;
    virtual int testErrors() const;
    virtual int testFailures() const;
    virtual int testFailuresTotal() const;
    virtual bool wasSuccessful() const;
    virtual bool shouldStop() const;

    virtual void stop();

    virtual const TestFailures& failures() const;
    virtual const Tests &tests() const;

    virtual void addListener( TestListener *listener );
    virtual void removeListener( TestListener *listener );


    class ExclusiveZone
    {
      SynchronizationObject *m_syncObject;

    public:
      ExclusiveZone( SynchronizationObject *syncObject ) 
        : m_syncObject( syncObject ) 
      { 
        m_syncObject->lock(); 
      }

      ~ExclusiveZone() 
      { 
        m_syncObject->unlock (); 
      }
    };

  protected:
    virtual void setSynchronizationObject( SynchronizationObject *syncObject );
    virtual void addFailure( TestFailure *failure );

    Tests m_tests;
    TestFailures m_failures;
    typedef std::deque<TestListener *> TestListeners;
    TestListeners m_listeners;
    int m_testErrors;
    bool m_stop;
    SynchronizationObject *m_syncObject;

  private: 
    TestResult( const TestResult &other );
    TestResult &operator =( const TestResult &other );
@


1.5
log
@* NEWS : updated.

* include/cppunit/Exception.h : added include Portability.h.

* include/cppunit/TestResult.* : changed TestFailures to a deque.
added tests().

* examples/cppunittest/CppUnitTest.dsp :
* examples/cppunittest/MakeFile.am :
* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : Added
XmlTestResultOutputterTest.*, XmlUniformiser.*, XmlUniformiserTest.*,
UnitTestToolSuite.h, OutputSuite.h.

* examples/msvc6/CppUnitTestApp/CppUnitTestApp.dsp : revised project
folders structure. Added missing NoteEqualExceptionTest.*.

* examples/cppunittest/CppUnitTestSuite.cpp : added 'Output' and
'UnitTestTool' suites.

* src/cppunit/cppunit.dsp: removed estring.h. Revised project folders
structure. Removed TestRegistry.*. Added TestSetUp.h,
XmlTestResultOutputter.*.

* src/cppunit/MakeFile.am: added XmlTestResultOutputter.*.

* src/testrunner/TestRunnerDlg.cpp: removed disabled code.
@
text
@d53 2
@


1.4
log
@* include/cppunit/TestFailure.cpp :
* include/cppunit/TestFailure.h : fixed some constness issues. Added
argument to indicate the type of failure to constructor. Added
isError().

* include/cppunit/TestListener.h : removed addError(). addFailure()
now take a TestFailure as argument.

* include/cppunit/TestResult.h :
* include/cppunit/TestResult.cpp : removed errors(). Refactored. Fixed
some constness issues. Added typedef TestFailures for vector returned
by failures(). failures() returns a const reference on the list of
failure. added testFailuresTotal(). Constructor can take an optional
synchronization object.

* include/cppunit/TextTestResult.h :
* include/cppunit/TextTestResult.cpp : removed printErrors().
Refactored. Updated to suit new TestResult, errors and failures are
reported in the same list.

* examples/cppunittest/TestFailureTest.cpp :
* examples/cppunittest/TestFailureTest.h : modified to use the new
TestFailure constructor. Added one test.

* examples/cppunittest/TestListenerTest.cpp: removed addError().
Refactored to suit new TestListener.

* examples/cppunittest/TestResultTest.h :
* examples/cppunittest/TestResultTest.cpp : modified to suit the
new TestResult.
@
text
@a3 1
#include <vector>
d5 1
d37 2
a38 1
    typedef std::vector<TestFailure *> TestFailures;
d67 1
d94 1
d96 2
a97 2
    std::vector<TestListener *> m_listeners;
    int m_runTests;
@


1.3
log
@* added project cppunittest to examples/: unit tests to test cppunit. The
  main file is CppUnitTestMain.cpp. Unit tests have been implemented
  for TestCaller and TestListener.
* added project CppUnitTestApp to examples/msvc6: graphical runner for
  cppunittest.
* added TestListener to TestResult. It is a port of junit TestListener.
* updated some .cvsignore to ignore files generated with VC++.
@
text
@d9 65
a73 27
  class Exception;
  class Test;
  class TestListener;


  /**
   * A TestResult collects the results of executing a test case. It is an 
   * instance of the Collecting Parameter pattern.
   *
   * The test framework distinguishes between failures and errors.
   * A failure is anticipated and checked for with assertions. Errors are
   * unanticipated problems signified by exceptions that are not generated
   * by the framework.
   *
   * TestResult supplies a template method 'setSynchronizationObject ()'
   * so that subclasses can provide mutual exclusion in the face of multiple
   * threads.  This can be useful when tests execute in one thread and
   * they fill a subclass of TestResult which effects change in another 
   * thread.  To have mutual exclusion, override setSynchronizationObject ()
   * and make sure that you create an instance of ExclusiveZone at the 
   * beginning of each method.
   *
   * \see Test
   */

  class TestResult
  {
d76 27
a102 58
      TestResult  ();
      virtual                             ~TestResult ();

      virtual void                        addError       (Test *test, Exception *e);
      virtual void                        addFailure     (Test *test, Exception *e);
      virtual void                        startTest      (Test *test);
      virtual void                        endTest        (Test *test);
      virtual int                         runTests       ();
      virtual int                         testErrors     ();
      virtual int                         testFailures   ();
      virtual bool                        wasSuccessful  ();
      virtual bool                        shouldStop     ();
      virtual void                        stop           ();

      virtual std::vector<TestFailure *>& errors         ();
      virtual std::vector<TestFailure *>& failures       ();

      virtual void                        addListener    ( TestListener *listener );
      virtual void                        removeListener ( TestListener *listener );


      class SynchronizationObject
      {
        public:
          SynchronizationObject  () {}
          virtual                 ~SynchronizationObject () {}

          virtual void            lock                   () {}
          virtual void            unlock                 () {}
      };

      class ExclusiveZone
      {
          SynchronizationObject   *m_syncObject;

        public:
          ExclusiveZone (SynchronizationObject *syncObject) 
            : m_syncObject (syncObject) 
          { m_syncObject->lock (); }

          ~ExclusiveZone () 
          { m_syncObject->unlock (); }
      };

    protected:
      virtual void                setSynchronizationObject (SynchronizationObject *syncObject);

      std::vector<TestFailure *>  m_errors;
      std::vector<TestFailure *>  m_failures;
      std::vector<TestListener *> m_listeners;
      int                         m_runTests;
      bool                        m_stop;
      SynchronizationObject       *m_syncObject;
    private: 
      TestResult (const TestResult& other); 
      TestResult& operator= (const TestResult& other); 

  };
@


1.2
log
@Fixed #include's for cppunit headers.
@
text
@d11 1
d55 3
d87 1
@


1.1
log
@Moved public header files from cppunit dir to include/cppunit, to separate them from internal header files like estring.h.
@
text
@d5 1
a5 4

#ifndef CPPUNIT_TESTFAILURE_H
#include "TestFailure.h"
#endif
@

