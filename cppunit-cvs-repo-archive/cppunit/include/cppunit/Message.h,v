head	1.6;
access;
symbols
	REL_1_12_1:1.6
	REL_1_11_6:1.6
	REL_1_11_4:1.6
	REL_1_11_0:1.6
	TG_CPPUNIT_NO_STREAM_AFTER:1.5
	TG_CPPUNIT_NO_STREAM_BEFORE:1.5
	REL_1_10_2:1.5
	REL_1_10_0:1.5
	REL_1_9_14:1.5
	REL_1_9_12:1.5
	BRANCH_1_9_12:1.5.0.2
	TG_BRANCH_1_9_12:1.5
	TG_BEFORE_HPUX_PLUGIN:1.5
	TG_BEFORE_SUN4_PORT:1.5
	REL_1_9_10:1.5
	TG_AFTER_REMOVE_NOTEQUAL_EXCEPTION:1.1
	TG_BEFORE_REMOVE_NOTEQUAL_EXCEPTION:1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.19.20.00.44;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2002.08.29.07.36.50;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2002.07.13.10.33.49;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2002.07.12.05.59.56;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.06.14.11.12.17;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.06.13.15.31.01;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@* added specific copy constructor implementatin to ensure string buffer are detached during copy (therefore providing thread-safe copy constructor for non thread-safe std::string copy constructor implementation).
@
text
@#ifndef CPPUNIT_MESSAGE_H
#define CPPUNIT_MESSAGE_H

#include <cppunit/Portability.h>

#if CPPUNIT_NEED_DLL_DECL
#pragma warning( push )
#pragma warning( disable: 4251 )  // X needs to have dll-interface to be used by clients of class Z
#endif

#include <cppunit/portability/CppUnitDeque.h>
#include <string>


CPPUNIT_NS_BEGIN


#if CPPUNIT_NEED_DLL_DECL
//  template class CPPUNIT_API std::deque<std::string>;
#endif

/*! \brief Message associated to an Exception.
 * \ingroup CreatingNewAssertions
 *  A message is composed of two items:
 *  - a short description (~20/30 characters)
 *  - a list of detail strings
 *
 *  The short description is used to indicate how the detail strings should be
 *  interpreted. It usually indicates the failure types, such as
 *  "assertion failed", "forced failure", "unexpected exception caught",
 *  "equality assertion failed"... It should not contains new line character (\n).
 *
 *  Detail strings are used to provide more information about the failure. It
 *  can contains the asserted expression, the expected and actual values in an
 *  equality assertion, some addional messages... Detail strings can contains
 *  new line characters (\n).
 */
class CPPUNIT_API Message
{
public:
  Message();

  // Ensure thread-safe copy by detaching the string.
  Message( const Message &other );

  explicit Message( const std::string &shortDescription );

  Message( const std::string &shortDescription,
           const std::string &detail1 );

  Message( const std::string &shortDescription,
           const std::string &detail1,
           const std::string &detail2 );

  Message( const std::string &shortDescription,
           const std::string &detail1,
           const std::string &detail2,
           const std::string &detail3 );

  Message &operator =( const Message &other );

  /*! \brief Returns the short description.
   * \return Short description.
   */
  const std::string &shortDescription() const;

  /*! \brief Returns the number of detail string.
   * \return Number of detail string.
   */
  int detailCount() const;

  /*! \brief Returns the detail at the specified index.
   * \param index Zero based index of the detail string to return.
   * \returns Detail string at the specified index.
   * \exception std::invalid_argument if \a index < 0 or index >= detailCount().
   */
  std::string detailAt( int index ) const;

  /*! \brief Returns a string that represents a list of the detail strings.
   *
   * Example:
   * \code
   * Message message( "not equal", "Expected: 3", "Actual: 7" );
   * std::string details = message.details();
   * // details contains:
   * // "- Expected: 3\n- Actual: 7\n"  \endcode
   *
   * \return A string that is a concatenation of all the detail strings. Each detail
   *         string is prefixed with '- ' and suffixed with '\n' before being
   *         concatenated to the other.
   */
  std::string details() const;

  /*! \brief Removes all detail strings.
   */
  void clearDetails();

  /*! \brief Adds a single detail string.
   * \param detail Detail string to add.
   */
  void addDetail( const std::string &detail );

  /*! \brief Adds two detail strings.
   * \param detail1 Detail string to add.
   * \param detail2 Detail string to add.
   */
  void addDetail( const std::string &detail1,
                  const std::string &detail2 );

  /*! \brief Adds three detail strings.
   * \param detail1 Detail string to add.
   * \param detail2 Detail string to add.
   * \param detail3 Detail string to add.
   */
  void addDetail( const std::string &detail1,
                  const std::string &detail2,
                  const std::string &detail3 );

  /*! \brief Adds the detail strings of the specified message.
   * \param message All the detail strings of this message are added to this one.
   */
  void addDetail( const Message &message );

  /*! \brief Sets the short description.
   * \param shortDescription New short description.
   */
  void setShortDescription( const std::string &shortDescription );

  /*! \brief Tests if a message is identical to another one.
   * \param other Message this message is compared to.
   * \return \c true if the two message are identical, \c false otherwise.
   */
  bool operator ==( const Message &other ) const;

  /*! \brief Tests if a message is different from another one.
   * \param other Message this message is compared to.
   * \return \c true if the two message are not identical, \c false otherwise.
   */
  bool operator !=( const Message &other ) const;

private:
  std::string m_shortDescription;

  typedef CppUnitDeque<std::string> Details;
  Details m_details;
};


CPPUNIT_NS_END

#if CPPUNIT_NEED_DLL_DECL
#pragma warning( pop )
#endif


#endif  // CPPUNIT_MESSAGE_H
@


1.5
log
@* include/cppunit/Asserter.h:
* include/cppunit/Message.h:
* include/cppunit/extensions/TestNamer.h:
* include/cppunit/extensions/TestSuiteBuilder.h:
* include/cppunit/tools/XmlDocument.h:
* include/cppunit/tools/XmlElement.h: Fixed a few documentation bug.
@
text
@d43 3
d60 2
a134 1

@


1.4
log
@* include/cppunit/ui/text/TestRunner.h:
* src/cppunit/TextTestRunner.cpp: Renamed TextUi::TestRunner
  TextTestRunner and moved it to the CppUnit namespace. Added
  a deprecated typedef for compatibility with previous version.

* include/cppunit/ui/text/TextTestRunner.h: added.

* include/cppunit/ui/mfc/TestRunner.h:
* src/cppunit/msvc6/testrunner/TestRunner.cpp: Renamed MfcUi::TestRunner
  MfcTestRunner. Added deprecated typedef for compatibility. Renamed
  TestRunner.cpp to MfcTestRunner.cpp.

* include/cppunit/ui/mfc/MfcTestRunner.h: added.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.cpp: renamed QtUi::TestRunner QtTestRunner
  and moved it to CppUnit namespace. Added a deprecated typedef for
  compatibility. Renamed TestRunner.cpp to QtTestRunner.cpp.

* include/cppunit/ui/qt/TestRunner.h:
* src/qttestrunner/TestRunner.h: Moved TestRunner to CppUnit namespace
  and renamed it QtTestRunner. Added deprecated typedef for compatibility.

* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: changed namespace Asserter to a struct and
  made all methods static.

* include/cppunit/extensions/HelperMacros.h:
* include/cppunit/extensions/SourceLine.h:
* include/cppunit/extensions/TestAssert.h:
* include/cppunit/extensions/TestPlugIn.h:
* include/cppunit/Portability.h: changed CPPUNIT_NS(symbol) to a
  symbol macro that expand either to CppUnit or nothing. The symbol is
  no longer a parameter.

* include/cppunit/portability/CppUnitVector.h:
* include/cppunit/portability/CppUnitDeque.h:
* include/cppunit/portability/CppUnitMap.h: added. STL Wrapper for
  compilers that do not support template default argumenent and need
  the allocator to be passed when instantiating STL container.

* examples/cppunittest/*.h:
* examples/cppunittest/*.cpp:
* src/msvc6/testrunner/*.h:
* src/msvc6/testrunner/*.cpp:
* src/msvc6/testpluginrunner/*.h:
* src/msvc6/testpluginrunner/*.cpp:
* src/qttestrunner/*.h:
* src/qttestrunner/*.cpp: replaced occurence of CppUnit:: by CPPUNIT_NS.

* src/cppunit/TestSuite.h:
replaced occurence of std::vector by CppUnitVector.
@
text
@d120 1
a120 1
   * \param shortDecription New short description.
d124 1
a124 1
  /*! Tests if a message is identical to another one.
d131 1
a131 1
  /*! Tests if a message is different from another one.
@


1.3
log
@* include/cppunit/config/Portability.h: If the compiler does not support
  namespace (CPPUNIT_HAVE_NAMESPACES=0), define CPPUNIT_NO_STD_NAMESPACE
  and CPPUNIT_NO_NAMESPACE. If CPPUNIT_NO_STD_NAMESPACE is defined, then
  CppUnit assumes that STL are in the global namespace. If
  CPPUNIT_NO_NAMESPACE is defined, then CppUnit classes are placed in the
  global namespace instead of the CppUnit namespace.

* include/cppunit/config/config-bcb5.h:
* include/cppunit/config/config-msvc6.h: added definition of macro
  CPPUNIT_HAVE_NAMESPACES.

* include/cppunit/tools/StringTools.h: use CPPUNIT_WRAP_COLUMN as default
  parameter value for wrap().

* include/cppunit/*/*.h:
* src/cppunit/*.cpp: changed all CppUnit namespace declaration to use
  macros CPPUNIT_NS_BEGIN and CPPUNIT_NS_END. Also, changed reference
  to CppUnit namespace (essentially in macros) using CPPUNIT_NS macro.
@
text
@d11 1
a11 1
#include <deque>
d140 1
a140 1
  typedef std::deque<std::string> Details;
@


1.2
log
@* src/cppunit/TypeInfoHelper.cpp: added work around for bug #565481.
  gcc 3.0 RTTI name() returns the type prefixed with a number (the
  length of the type). The work around strip the number.

* src/msvc6/testpluginrunner/TestPlugInRunnerApp.cpp: registry key is now
  set. Allow to save settings.

* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.h:
* src/msvc6/testpluginrunner/TestPlugInRunnerDlg.cpp: added layout
  initialization for resizing.

* src/msvc6/testpluginrunner/TestPlugRunner.rc:
* src/msvc6/testpluginrunner/TestPlugInRunner.dsp: added TestRunner
  project files. Somehow I can't get cdxCDynamicDialog to compile
  as a MFC extension. Included all sources files and resources
  as a very dirt work around.

* src/msvc6/testrunner/TestRunnerDlg.h:
* src/msvc6/testrunner/TestRunnerDlg.cpp:
* src/msvc6/testrunner/TestRunnerModel.h: those classes are no longer
  exported in the MFC extension. See TestPlugInRunner issue with
  cdxCDynamicDialog.

* include/cppunit/Message.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestResultCollector.h:
* include/cppunit/TestSuite.h:
* include/cppunit/TestFactoryRegistry.h:
* include/cppunit/XmlElement.h:
* include/cppunit/TypeInfoHelper.h: commented out STL template export
  in DLL. This caused conflicts when instantiting the same template in
  a user project.
@
text
@d15 2
a16 2
namespace CppUnit
{
d145 1
a145 2

} //  namespace CppUnit
@


1.1
log
@* include/cppunit/Asserter.h:
* src/cppunit/Asserter.cpp: added functions that take a Message as a
  parameter. Existing function have a short description indicating
  an assertion failure.

* include/cppunit/CompilerOuputter.h:
* src/cppunit/CompilerOuputter.cpp: removed printNotEqualMessage() and
  printDefaultMessage(). Updated to use Message.

* include/cppunit/Message.h:
* src/cppunit/Message.cpp: added. Represents a message associated to an
  Exception.

* include/cppunit/Exception.h:
* src/cppunit/Exception.cpp: the message associated to the exception is now
  stored as a Message instead of a string.

* include/cppunit/NotEqualException.cpp: constructs a Message instead of a
  string.

* include/cppunit/TestAssert.h:
* src/cppunit/TestAssert.cpp: updated to use Asserter functions that
  take a message when pertinent (CPPUNIT_FAIL...).

* include/cppunit/TestCaller.h:
* src/cppunit/TestCaller.cpp: exception not caught failure has a better
  short description.

* src/cppunit/TestCase.cpp: better short description when setUp() or
  tearDown() fail.

* src/msvc6/testrunner/TestRunnerDlg.cpp: replace '\n' in failure message
  with space.

* examples/cppunittest/ExceptionTest.cpp:
* examples/cppunittest/NotEqualExceptionTest.cpp:
* examples/cppunittest/TestCallerTest.cpp:
* examples/cppunittest/TestFailureTest.cpp:
* examples/cppunittest/TestResultCollectorTest.h:
* examples/cppunittest/TestResultCollectorTest.cpp:
* examples/cppunittest/TestResultTest.cpp:
* examples/cppunittest/XmlOutputterTest.h:
* examples/cppunittest/XmlOutputterTest.cpp: updated to use Exception/Message.

* examples/cppunittest/MessageTest.h:
* examples/cppunittest/MessageTest.cpp: added. Unit test for Message.
@
text
@d19 1
a19 1
  template class CPPUNIT_API std::deque<std::string>;
@

