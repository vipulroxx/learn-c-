head	1.4;
access;
symbols
	REL_1_12_1:1.4
	REL_1_11_6:1.4
	REL_1_11_4:1.4
	REL_1_11_0:1.4
	TG_CPPUNIT_NO_STREAM_AFTER:1.4
	TG_CPPUNIT_NO_STREAM_BEFORE:1.4
	REL_1_10_2:1.4
	REL_1_10_0:1.4
	REL_1_9_14:1.4
	REL_1_9_12:1.4
	BRANCH_1_9_12:1.4.0.2
	TG_BRANCH_1_9_12:1.4
	TG_BEFORE_HPUX_PLUGIN:1.4
	TG_BEFORE_SUN4_PORT:1.3
	REL_1_9_10:1.3;
locks; strict;
comment	@ * @;


1.4
date	2002.09.16.18.36.52;	author esche;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.29.19.27.07;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.03.15.47.52;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2002.07.16.22.59.21;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@added newline at end of file (needed for some compilers to work)
@
text
@#ifndef CPPUNIT_PROTECTOR_H
#define CPPUNIT_PROTECTOR_H

#include <cppunit/SourceLine.h>

CPPUNIT_NS_BEGIN

class Exception;
class Message;
class ProtectorContext;
class TestResult;


class CPPUNIT_API Functor
{
public:
  virtual ~Functor();

  virtual bool operator()() const =0;
};


/*! \brief Protects one or more test case run.
 *
 * Protector are used to globably 'decorate' a test case. The most common
 * usage of Protector is to catch exception that do not subclass std::exception,
 * such as MFC CException class or Rogue Wave RWXMsg class, and capture the
 * message associated to the exception. In fact, CppUnit capture message from
 * Exception and std::exception using a Protector.
 *
 * Protector are chained. When you add a Protector using 
 * TestResult::pushProtector(), your protector is in fact passed as a Functor
 * to the first protector of the chain.
 *
 * TestCase protects call to setUp(), runTest() and tearDown() by calling
 * TestResult::protect().
 *
 * Because the protector chain is handled by TestResult, a protector can be
 * active for a single test, or a complete test run.
 *
 * Here are some possible usages:
 * - run all test case in a separate thread and assumes the test failed if it
 *   did not finish in a given time (infinite loop work around)
 * - performance tracing : time only the runTest() time.
 * \sa TestResult, TestCase, TestListener.
 */
class CPPUNIT_API Protector
{
public:
  virtual ~Protector();
  
  virtual bool protect( const Functor &functor,
                        const ProtectorContext &context ) =0;

protected:
  void reportError( const ProtectorContext &context,
                    const Exception &error ) const;

  void reportError( const ProtectorContext &context,
                    const Message &message,
                    const SourceLine &sourceLine = SourceLine() ) const;

  void reportFailure( const ProtectorContext &context,
                      const Exception &failure ) const;

  Message actualMessage( const Message &message,
                         const ProtectorContext &context ) const;
};


/*! \brief Scoped protector push to TestResult.
 *
 * Adds the specified Protector to the specified TestResult for the object
 * life-time.
 */
class CPPUNIT_API ProtectorGuard
{
public:
  /// Pushes the specified protector.
  ProtectorGuard( TestResult *result,
                  Protector *protector );

  /// Pops the protector.
  ~ProtectorGuard();

private:
  TestResult *m_result;
};

CPPUNIT_NS_END


#endif // CPPUNIT_PROTECTOR_H

@


1.3
log
@* include/cppunit/CompilerOutputter.h:
* include/cppunit/Exception.h:
* include/cppunit/Protector.h:
* include/cppunit/TestListener.h:
* include/cppunit/TestPath.h:
* include/cppunit/TestResult.h:
* include/cppunit/TestRunner.h:
* include/cppunit/XmlOutputter.h:
* include/cppunit/plugin/DynamicLibraryManager.h:
* include/cppunit/plugin/PlugInManager.h:
* include/cppunit/plugin/PlugInParameters.h:
* include/cppunit/TestPlugIn.h:
* src/cppunit/DefaultProtector.h:
* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorContext.h:
* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: fixed a dew documentation bugs.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.cpp: moved documentation to header.
@
text
@d93 2
a94 1
#endif // CPPUNIT_PROTECTOR_H@


1.2
log
@* include/cppunit/Exception.h:
* src/cppunit/Exception.h: added setMessage().

* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added class ProtectorGuard. Change the
  reportXXX() method to support Exception passing and SourceLine.

* include/cppunit/TestCaller.h: removed 'expect exception' features.
  It is now handled by ExceptionTestCaseDecorator and TestCaller no
  longer need default template argument support.

* include/cppunit/TestCase.h:
* include/cppunit/extensions/TestCaller.h: runTest() is now public
  instead of protected, so that it can be decorated.

* include/cppunit/TestResult.h:
* src/cppunit/TestResult.h: added pushProtector() and popProtector()
  methods. This allow user to specify their own exception trap when
  running test case.

* include/cppunit/extensions/TestDecorator.h:
* src/cppunit/TestDecorator.cpp: added. Extracted from TestDecorator.h.
  The test passed to the constructor is now owned by the decorator.

* include/cppunit/extensions/TestCaseDecorator.h:
* src/cppunit/TestCaseDecorator.cpp: added. Decorator for TestCase
  setUp(), tearDown() and runTest().

* include/cppunit/extensions/ExceptionTestCaseDecorator.h: added.
  TestCaseDecorator to expect that a specific exception is thrown.

* include/cppunit/extensions/HelperMacros.h: updated against TestCaller
  change.

* src/cppunit/DefaultFunctor.h: fixed bug (did not return underlying
  test return code).

* src/cppunit/ProtectorChain.cpp: fixed bug in chaing return code.

* src/cppunit/DefaultFunctor.h: fixed bug.

* src/msvc6/testrunner/ActiveTest.h:
* src/msvc6/testrunner/ActiveTest.cpp: updated against
  TestCaseDecorator ownership policy change. Moved inline functions
  to .cpp.

* examples/cppunittest/TestSetUpTest.cpp: updated to use MockTestCase
  and against the new ownership policy.

* examples/cppunittest/TestDecoratorTest.cpp:
* examples/cppunittest/RepeatedTestTest.cpp: updated against
  TestDecorator ownership policy change.

* examples/cppunittest/ExceptionTestCaseDecoratorTest.h:
* examples/cppunittest/ExceptionTestCaseDecoratorTest.cpp: added. Unit
  tests for ExceptionTestCaseDecoratorTest.
@
text
@d71 5
d79 1
d82 2
@


1.1
log
@* include/cppunit/Protector.h:
* src/cppunit/Protector.cpp: added. Base class for protectors.

* src/cppunit/DefaultProtector.h:
* src/cppunit/DefaultProtector.cpp: added. Implementation of the default
  protector used to catch std::exception and any other exception.

* src/cppunit/ProtectorChain.h:
* src/cppunit/ProtectorChain.cpp: added. Implementation of a chain of
  protector, allowing catching custom exception and implementation of
  expected exception.

* src/cppunit/TestCase.cpp:
* src/cppunit/TestResult.cpp: updated to use protector.
@
text
@d4 1
a4 1
#include <cppunit/Portability.h>
d8 1
a8 1

d11 1
d23 24
d56 24
a79 3
  void reportTestFailure( const Message &message,
                          const ProtectorContext &context,
                          bool isError );
@

