head	1.5;
access;
symbols
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.4
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.3
	TG_AFTER_REMOVING_TESTCONTEXT:1.3
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.3
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2;
locks; strict;
comment	@ * @;


1.5
date	2005.12.11.17.40.01;	author blep;	state dead;
branches;
next	1.4;

1.4
date	2005.02.27.10.15.57;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.19.21.39.13;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.16.22.46.44;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.11.15.08.33.30;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@* removed dead code
@
text
@#ifndef OPENTEST_TESTRUNNER_H_INCLUDED
# define OPENTEST_TESTRUNNER_H_INCLUDED

# include <opentest/forwards.h>

namespace OpenTest {


class OPENTEST_API TestRunner
{
public:
	virtual ~TestRunner()
	{
	}

   virtual void declareTests( TestDeclarator &declarator ) = 0;

   // Notes: test plan must never contains suite [? do we want this constraint?].
   // => may be the test runner should indicates if it supports running suite ?
   // => would make the TestRunTracker interface much more complex though...
   // => Move 'configuration' in TestPlan ?
   virtual void runTests( const TestPlan &testPlan,
                          TestRunTracker &tracker,
                          const Properties &configuration ) = 0;
};



class OPENTEST_API TestDeclarator
{
public:
   virtual ~TestDeclarator()
   {
   }

   virtual TestId beginSuite( const CppTL::ConstString &name,
                              const Properties &data ) = 0;

   virtual TestId addTest( const CppTL::ConstString &name,
                           const Properties &data ) = 0;

   virtual void endSuite() = 0;
};


class OPENTEST_API TestRunTracker
{
public:
   virtual ~TestRunTracker()
   {
   }

   virtual void startTestRun() = 0;

   virtual void startTest( const TestPlanEntry &testEntry ) = 0;

   virtual void mergeInTestResult( const TestPlanEntry &testEntry,
                                   const OpenTest::Properties &result ) = 0;

   virtual void mergeInTestResult( const TestPlanEntry &testEntry,
                                   const PropertyPath &path,
                                   const Value &value ) = 0;

   virtual void appendToTestResult( const TestPlanEntry &testEntry,
                                    const PropertyPath &path,
                                    const Value &value ) = 0;

   virtual void endTest( const TestPlanEntry &testEntry ) = 0;

   virtual void endTestRun() = 0;

   virtual bool shouldStopTestRun() = 0;

   virtual void aqcuireResources( const ResourceList &resources ) = 0;

   virtual void releaseResources( const ResourceList &resources ) = 0;
};


} // namespace OpenTest


#endif // OPENTEST_TESTRUNNER_H_INCLUDED
@


1.4
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@@


1.3
log
@* modified TestRunner/TestDriver protocol to allow incremental result properties update.
@
text
@d36 1
a36 1
   virtual TestId beginSuite( const std::string &name,
d39 1
a39 1
   virtual TestId addTest( const std::string &name,
@


1.2
log
@* removed the addSuite() method during test declaration (make implementation of test driver more complex).
@
text
@d57 10
a66 2
   virtual void addTestInfo( const TestPlanEntry &testEntry,
                             const Properties &data ) = 0;
@


1.1
log
@* initial implementation of the TestRunner interface
@
text
@a41 2
   virtual void addSuite( TestId suite ) = 0;

@

