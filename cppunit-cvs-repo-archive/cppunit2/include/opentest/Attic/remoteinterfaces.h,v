head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.5;

1.5
date	2005.12.11.17.16.08;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.01.08.19.37;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.25.11.08.05;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.24.20.12.02;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#ifndef OPENTEST_REMOTEINTERFACES_H_INCLUDED
# define OPENTEST_REMOTEINTERFACES_H_INCLUDED

# include <opentest/interfaces.h>
# include <cpptl/sharedptr.h>


namespace OpenTest {


enum MessageId
{
   driverMessageSetTestDescriptions = 1,
   minMessageId = driverMessageSetTestDescriptions,
   driverMessageSetDefaultTestPlan,
   driverMessageStartTesting,
   driverMessageAddResultLog,
   driverMessageAddResultAssertion,
   driverMessageSetResultInputActualOutput,
   driverMessageSetTestResult,
   driverMessageTestPlanDone,
   runnerMessageGetTestDescriptions,
   runnerMessageGetTestPlans,
   runnerMessageRunTests,
   runnerMessageStopTest,
   maxMessageId = runnerMessageStopTest
};


class OPENTEST_API RemoteMessage
{
public:
   RemoteMessage();
   RemoteMessage( MessageId id );
   virtual ~RemoteMessage();

   void serialize( Stream &stream );

   MessageId messageId_;

private:
   virtual void doSerialize( Stream &stream ) {}
};


Stream & OPENTEST_API operator <<( Stream &stream, const RemoteMessagePtr &message );

Stream & OPENTEST_API operator >>( Stream &stream, RemoteMessagePtr &message );


class OPENTEST_API MessageTransport
{
public:
   virtual void sendMessage( const RemoteMessagePtr &message ) = 0;

   virtual void dispatchReceivedMessages( RemoteMessageServer &server ) = 0;
};


class OPENTEST_API MessageServerProxy
{
public:
   MessageServerProxy();

   virtual ~MessageServerProxy()
   {
   }

   void setTransport( MessageTransport &transport );

   void sendMessage( const RemoteMessagePtr &message );

private:
   MessageTransport *transport_;
};


class OPENTEST_API TestDriverProxy : public TestDriverInterface
                                   , public MessageServerProxy
{
public: // overridden from TestDriverInterface
   void setTestDescriptions( const TestDescriptions &tests );

   void setDefaultTestPlan( const TestPlans &plans );

   void startTesting( TestPlanId testPlan );

   void addResultLog( TestPlanId testPlan, 
                     const ResultLog &log );

   void addResultAssertion( TestPlanId testPlan, 
                            const ResultAssertion &assertion );

   void setResultInputActualOutput( TestPlanId testPlan, 
                                    const ResultInputOutput &output );

   void setTestResult( TestPlanId testPlan, 
                       const ResultStatus &status );

   void testPlanDone( TestPlanId id );
};


class OPENTEST_API RemoteMessageServer
{
public:
   virtual ~RemoteMessageServer()
   {
   }

   virtual void dispatchMessage( const RemoteMessagePtr &message ) = 0;

private:
};


class OPENTEST_API TestDriverServer : public RemoteMessageServer
{
public:
   TestDriverServer( TestDriverInterface &impl )
      : impl_( &impl )
   {
   }

public: // overridden from RemoteMessageServer
   void dispatchMessage( const RemoteMessagePtr &message );

private:
   TestDriverInterface *impl_;
};


class OPENTEST_API TestRunnerProxy : public TestRunnerInterface
                                   , public MessageServerProxy
{
public: // overridden from TestRunnerInterface
   void getTestDescriptions();

   void getTestPlans();

   void runTests( const TestPlans &plan );

   void stopTests();
};


class OPENTEST_API TestRunnerServer : public RemoteMessageServer
{
public:
   TestRunnerServer( TestRunnerInterface &impl )
      : impl_( &impl )
   {
   }

public: // overridden from RemoteMessageServer
   void dispatchMessage( const RemoteMessagePtr &message );

private:
   TestRunnerInterface *impl_;
};

} // namespace OpenTest

#endif // OPENTEST_REMOTEINTERFACES_H_INCLUDED

@


1.5
log
@* rough sketch of a working OpenTest driver with CppUT adaptor for TestRunner.
@
text
@@


1.4
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@d84 1
a84 1
   void setDefaultTestPlan( const TestPlan &plan );
d86 1
a86 1
   void startTesting( TestId testPlan );
d88 1
a88 1
   void addResultLog( TestId testPlan, 
d91 1
a91 1
   void addResultAssertion( TestId testPlan, 
d94 1
a94 1
   void setResultInputActualOutput( TestId testPlan, 
d97 1
a97 1
   void setTestResult( TestId testPlan, 
d100 1
a100 1
   void testPlanDone( TestId id );
@


1.3
log
@* started adding unit tests for opentest
* added serializer unit test squeleton
* fixed some bug in serializer
* added opentesttest project to VS solution.
@
text
@d51 1
a51 1
class OPENTEST_API MessageSender
d54 12
a65 1
   virtual ~MessageSender()
d69 2
d72 3
d79 1
a79 1
                                   , public MessageSender
d134 1
a134 1
                                   , public MessageSender
d141 1
a141 1
   void runTests( const TestPlan &plan );
@


1.2
log
@Separated serialization process from call dispatching. This allows the serialization to be done by the transport layer (in a single thread). RemoteMessage can be exchanged between thread safely.
@
text
@a45 2
typedef CppTL::SharedPtr<RemoteMessage> RemoteMessagePtr;

@


1.1
log
@Remote interface for TestRunner / TestDriver connection (serialize message)
@
text
@d5 1
d30 15
a44 1
Stream & OPENTEST_API operator <<( Stream &stream, MessageId id );
d46 1
a46 1
Stream & OPENTEST_API operator >>( Stream &stream, MessageId &id );
d48 1
d50 1
d52 2
a53 1
class MessageSender
d60 1
a60 15
   Stream &stream()
   {
      CPPTL_ASSERT_MESSAGE( stream_ != 0, "No stream attached to remote proxy." );
      return *stream_;
   }

   void beginMessage( MessageId message );

   void sendMessage()
   {
      // @@todo
   }

private:
   Stream *stream_;
d64 2
a65 2
class TestDriverProxy : public TestDriverInterface
                      , public MessageSender
d68 1
a68 1
   void setTestDescriptions( TestDescriptions &tests );
d81 1
a81 1
                                   const ResultInputOutput &output );
d84 1
a84 1
                       ResultStatus &status );
d86 1
a86 1
   void testPlanDone( TestPlanId id );
d90 1
a90 1
class MessageServer
d93 1
a93 1
   virtual ~MessageServer()
d97 1
a97 5
   Stream &stream()
   {
      CPPTL_ASSERT_MESSAGE( stream_ != 0, "No stream attached to message sender." );
      return *stream_;
   }
a99 2
   virtual void processMessageStream() = 0;
   Stream *stream_;
d103 1
a103 1
class TestDriverServer : public MessageServer
d111 2
a112 2
public: // overridden from MessageServer
   void processMessageStream();
d119 2
a120 2
class TestRunnerProxy : public TestRunnerInterface
                      , public MessageSender
d129 17
a145 1
   void stopTest();
@

