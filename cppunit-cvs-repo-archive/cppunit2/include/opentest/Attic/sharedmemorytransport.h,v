head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.5;

1.5
date	2006.03.10.08.30.32;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.07.23.02.55;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.30.21.48.09;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.26.21.24.30;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#ifndef OPENTEST_SHAREDMEMORYTRANSPORT_H_INCLUDED
# define OPENTEST_SHAREDMEMORYTRANSPORT_H_INCLUDED

# include <opentest/forwards.h>
# include <opentest/remoteinterfaces.h>

#ifndef OPENTEST_NO_SHAREDMEMORYTRANSPORT

namespace OpenTest {

class SharedMemoryError : public std::runtime_error
{
public:
   SharedMemoryError( const char *message )
      : std::runtime_error( message )
   {
   }

   ~SharedMemoryError() throw()
   {
   }
};

class SharedMemoryTransportImpl;

class SharedMemoryConfig
{
public:
   typedef void (*LogFn)( const char *format, ... );

   SharedMemoryConfig()
      : bufferSize_( 512 * 1024 )  // 512k
      , log_( 0 )
      , singleProcessMasterTransport_( 0 )
   {
   }

   SharedMemoryTransport *singleProcessMasterTransport_;
   unsigned int bufferSize_;
   LogFn log_;
};

class SharedMemoryTransport : public MessageTransport
{
public:
   /// Initiate a shared memory connection
   SharedMemoryTransport( const SharedMemoryConfig &config = SharedMemoryConfig() );

   /// Attempts to connect to an existing shared memory connection
   SharedMemoryTransport( const String &transportName,
                          const SharedMemoryConfig &config = SharedMemoryConfig() );

   virtual ~SharedMemoryTransport();

   std::string transportName() const;


public: // overriden from MessageTransport
   void sendMessage( const RemoteMessagePtr &message );

   void dispatchReceivedMessages( RemoteMessageServer &server );

private:
   friend class SharedMemoryTransportImpl;
   SharedMemoryTransportImpl *impl_;
};

} // namespace OpenTest

#endif // OPENTEST_NO_SHAREDMEMORYTRANSPORT

#endif // OPENTEST_SHAREDMEMORYTRANSPORT_H_INCLUDED

@


1.5
log
@* fixed bad 'Byte' typedef causing bad memory access.
@
text
@@


1.4
log
@* added end to end test for shared memory transport.
@
text
@d34 1
d38 1
d64 1
@


1.3
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@d26 1
a26 1
struct SharedMemoryConfig
d28 3
d33 1
d38 1
d53 2
@


1.2
log
@* rough implementation of the overall logic, need heavy testing
@
text
@d5 1
d36 1
a36 1
class SharedMemoryTransport
d48 3
a50 1
   void send( const RemoteMessagePtr &message );
@


1.1
log
@Intermediate comit (does not compile). Shared memory transport WIN32 implementation for TestDriver/TestRunner communication. Shared memory region has been setup. Still need to handle exchange of data using the circular buffers and related events.
@
text
@d6 2
d10 1
a10 1
class ShareMemoryError
d13 8
d49 2
d57 2
@

