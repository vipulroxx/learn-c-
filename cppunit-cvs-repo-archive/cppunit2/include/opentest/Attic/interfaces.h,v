head	1.9;
access;
symbols;
locks; strict;
comment	@ * @;


1.9
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.8;

1.8
date	2006.03.06.08.40.48;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.11.17.16.08;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.14.21.28.08;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.08.20.25.49;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.07.22.43.07;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.06.25.11.05.55;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.24.19.43.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.9
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#ifndef OPENTEST_INTERFACES_H_INCLUDED
# define OPENTEST_INTERFACES_H_INCLUDED

# include <opentest/forwards.h>
# include <json/value.h>
# include <cpptl/conststring.h>
# include <map>
# include <deque>
# include <vector>


namespace OpenTest {

class OPENTEST_API Connectable
{
public:
   Connectable()
      : connector_( 0 )
   {
   }

   virtual ~Connectable() 
   {
   }

   void setConnector( Connector *connector )
   {
      connector_ = connector;
   }

   Connector &connector()
   {
      return *connector_;
   }

private:
   Connector *connector_;
};


class OPENTEST_API TestRunnerInterface : public Connectable
{
public:
   virtual ~TestRunnerInterface() {}

   virtual void getTestDescriptions() = 0;

   virtual void getTestPlans() = 0;

   virtual void runTests( const TestPlans &plan ) = 0;

   virtual void stopTests() = 0;
};


class OPENTEST_API TestDriverInterface : public Connectable
{
public:
   virtual ~TestDriverInterface() {}

   virtual void setTestDescriptions( const TestDescriptions &tests ) = 0;

   virtual void setDefaultTestPlans( const TestPlans &plans ) = 0;

   virtual void startTesting( TestPlanId testPlan ) = 0;

   virtual void addResultLog( TestPlanId testPlan, 
                              const ResultLog &log ) = 0;

   virtual void addResultAssertion( TestPlanId testPlan, 
                                    const ResultAssertion &assertion ) = 0;

   virtual void setResultInputActualOutput( TestPlanId testPlan, 
                                            const ResultInputOutput &output ) = 0;

   virtual void setTestResult( TestPlanId testPlan, 
                               const ResultStatus &status ) = 0;

   virtual void testPlanDone( TestPlanId id ) = 0;
};


class OPENTEST_API TestDescriptionCommon
{
public:
   String name_;
   String description_;
   Json::Value descriptionSpecific_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API TestCaseDescription : public TestDescriptionCommon
{
public:
   String inputFormatName_;
   Json::Value inputFormat_;
   String outputFormatName_;
   Json::Value outputFormat_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API TestSuiteDescription : public TestDescriptionCommon
{
public:
   std::deque<TestId> children_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API TestDescriptions
{
public:
   typedef std::map<TestId,TestCaseDescription> TestCases;
   typedef std::map<TestId,TestSuiteDescription> TestSuites;
   TestCases testCases_;
   TestSuites testSuites_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API TestPlan : public TestCaseDescription
{
public:
   TestId testCase_;
   Json::Value input_;
   Json::Value expectedOutput_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API TestPlans
{
public:
   typedef std::deque<TestPlan> Plans;
   Plans testPlans_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


class OPENTEST_API ResultLog
{
public:
   Json::Value log_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};

class OPENTEST_API ResultAssertion
{
public:
   String assertionType_;
   String assertionFormat_;
   String message_;
   Json::Value specific_;
   bool isIgnoredFailure_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};

// Currently unused...
class OPENTEST_API ResultInputOutput
{
public:
   String inputFormat_;
   String outputFormat_;
   Json::Value input_;
   Json::Value expected_;
   Json::Value actual_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};

class OPENTEST_API ResultStatus
{
public:
   String status_;
   Json::Value statistics_;
   Json::Value statusSpecific_;

   Stream &serialize( Stream &stream ) const;
   Stream &unserialize( Stream &stream );
};


inline Stream &OPENTEST_API operator <<( Stream &stream, const TestDescriptionCommon &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestDescriptionCommon &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const TestCaseDescription &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestCaseDescription &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const TestSuiteDescription &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestSuiteDescription &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const TestDescriptions &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestDescriptions &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const TestPlan &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestPlan &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const TestPlans &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, TestPlans &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const ResultLog &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, ResultLog &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const ResultAssertion &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, ResultAssertion &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const ResultInputOutput &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, ResultInputOutput &v )
{
   return v.unserialize( stream );
}

inline Stream &OPENTEST_API operator <<( Stream &stream, const ResultStatus &v )
{
   return v.serialize( stream );
}

inline Stream &OPENTEST_API operator >>( Stream &stream, ResultStatus &v )
{
   return v.unserialize( stream );
}



} // namespace OpenTest


#endif // OPENTEST_INTERFACES_H_INCLUDED
@


1.8
log
@* dead-code removal, obsolescence annotiation
@
text
@@


1.7
log
@* rough sketch of a working OpenTest driver with CppUT adaptor for TestRunner.
@
text
@d176 1
@


1.6
log
@- simplified interface a bit
@
text
@d14 26
d41 1
a41 1
class OPENTEST_API TestRunnerInterface
d56 1
a56 1
class OPENTEST_API TestDriverInterface
d63 1
a63 1
   virtual void setDefaultTestPlan( const TestPlan &plan ) = 0;
d65 1
a65 1
   virtual void startTesting( TestId testPlan ) = 0;
d67 1
a67 1
   virtual void addResultLog( TestId testPlan, 
d70 1
a70 1
   virtual void addResultAssertion( TestId testPlan, 
d73 1
a73 1
   virtual void setResultInputActualOutput( TestId testPlan, 
d76 1
a76 1
   virtual void setTestResult( TestId testPlan, 
a85 1
   TestId id_;
d121 4
a124 2
   std::deque<TestCaseDescription> testCases_;
   std::deque<TestSuiteDescription> testSuites_;
d146 2
a147 1
   std::deque<TestPlan> testPlans_;
@


1.5
log
@* replaced include/opentest/properties.h with include/json/value.h
* replaced all occurrences of OpenTest::Value and OpenTest::Properties with Json::Value.
@
text
@d129 1
a129 2
   String log_;
   Json::Value logSpecific_;
d141 2
a142 2
   Json::Value expectedSpecific_;
   Json::Value actualSpecific_;
d165 1
a165 1
   String subStatus_;
a166 1
   Json::Value statistics_;
@


1.4
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d5 2
a6 1
# include <opentest/properties.h>
d63 1
a63 1
   Properties descriptionSpecific_;
d74 1
a74 1
   Properties inputFormat_;
d76 1
a76 1
   Properties outputFormat_;
d108 2
a109 2
   Properties input_;
   Properties expectedOutput_;
d130 1
a130 1
   Properties logSpecific_;
d142 2
a143 2
   Properties expectedSpecific_;
   Properties actualSpecific_;
d154 3
a156 3
   Properties input_;
   Properties expected_;
   Properties actual_;
d167 2
a168 2
   Properties statusSpecific_;
   Properties statistics_;
@


1.3
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@d7 1
@


1.2
log
@Fixed some missing pass by const ref methods.
@
text
@d22 1
a22 1
   virtual void runTests( const TestPlan &plan ) = 0;
@


1.1
log
@TestRunner / TestDriver communication interface
@
text
@d33 1
a33 1
   virtual void setTestDescriptions( TestDescriptions &tests ) = 0;
d49 1
a49 1
                               ResultStatus &status ) = 0;
@

