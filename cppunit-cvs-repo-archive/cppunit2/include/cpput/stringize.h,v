head	1.11;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.11
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.3
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.2
	TG_AFTER_REMOVING_TESTCONTEXT:1.2
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.2
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.11
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.12.20.55.46;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.07.22.43.07;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.04.08.11.25;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.05.12.43.24;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.05.12.41.18;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.15.07.45.42;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.11
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@// Defines the convertToString() & stringize() function use by assertions to output a value.
#ifndef CPPUT_STRINGIZE_H_INCLUDED
# define CPPUT_STRINGIZE_H_INCLUDED

# include <cpput/config.h>
# include <string>
# include <cpptl/stringtools.h>

/* How to:
 * - define a conversion function for a string type:
 *   overload the function std::string getStdString( MyStringType )
 *
 *   namespace CppUT { 
 *   inline std::string getStdString( const MyStringType &s ) {
 *      return s.str();
 *   } }
 *
 */



// 1) Is it a string ?
// std::string convertToString( ptr ) => Yes, convert to string & add quotes.
// NoToStringConversion convertToString( .. )
// stringize( impl::stringize( value, convertToString( ptr ) ) );
// 2) Is there an overloaded toString() function for that type
// std::string toString( ptr ); => Yes, convert to string using the function
// NoToStringConversion toString( ... );
// 3) Fall back DefaultStringizer.


namespace CppUT {

   /*! \brief A generic functor that can be used to convert a value into a string.
    * \ingroup group_assertions_support
    * It is used as default argument by function template that allow the user to
    * pass a specific functor to convert data to string.
    * \warning This class template should not be specialized. See stringize() for detail.
    */
   template<class ValueType>
   struct DefaultStringizer
   {
      std::string operator()( const ValueType &value ) const
      {
         return stringize( value );
      }
   };

   /*! \ingroup group_assertions_support
    */
   template<class ValueType>
   struct RefStringizer
   {
      std::string operator()( ValueType value ) const
      {
         return stringize( value );
      }
   };

   /*! \ingroup group_assertions_support
    */
   template<class ValueType>
   struct DerefStringizer
   {
      std::string operator()( ValueType value ) const
      {
         return stringize( *value );
      }
   };

// ------------------- convertToString -------------------------------
// User should overload getStdString() to support their own string types.
//
// IMPORTANT: to handle compiler that do not support function template ordering
// (CPPTL_NO_FUNCTION_TEMPLATE_ORDERING), such as vc++ 6.0.
// getStdString() must never be called with a 'by value' parameter.
// Passing by value would result in undefined behavior for non string type parameter
// 'eaten' by NotConvertibleToStdString convertToString( ... ).
// In practice, this means that a templated function accepting const ref parameters
// should be the caller. For example:
//
// template<class StringType1, class StringType2>
// void checkRegExMatched( const StringType1 &pattern,   // <= the const ref here ensure that
//                         const StringType2 &str )      // convertToString will only be passed reference.
// {
//    RegEx regex( CppUT::convertToString(&pattern ) );
//    CppUT::checkTrue( regex.matched( CppUT::convertToString( &str ) ) );
// }

   /*! \ingroup group_assertions_support
    */
   struct NotConvertibleToStdString {};

   /*! \ingroup group_assertions_support
    */
   inline std::string getStdString( const char *cstr )
   {
      return std::string( cstr );
   }

   /*! \ingroup group_assertions_support
    */
   inline std::string getStdString( const std::string &s )
   {
      return s;
   }

   /*! \ingroup group_assertions_support
    */
   inline std::string getStdString( const CppTL::ConstString &s )
   {
      return s.c_str();
   }

#ifdef CPPTL_NO_FUNCTION_TEMPLATE_ORDERING
   /*! \ingroup group_assertions_support
    */
   inline NotConvertibleToStdString getStdString( ... )
   {
      return NotConvertibleToStdString();
   }
#else
   /*! \ingroup group_assertions_support
    */
   template<class T>
   inline NotConvertibleToStdString getStdString( const T & )
   {
      return NotConvertibleToStdString();
   }
#endif

   /*! \ingroup group_assertions_support
    */
   template <class StringType>
   inline std::string convertToString( const StringType &s )
   {
      return getStdString( s );  // if you get a compilation error on this call, then getStdString() has not been overloaded for your string type.
   }


// ------------------- stringize -------------------------------
// If CPPUT_NO_DEFAULT_STRINGIZE is defined, the user is expected 
// to provide a function which accept the following types:
// template<class T>
// std::string defaultStringize( const T &value );

   struct NoToStringOverload {};

#ifdef CPPTL_NO_FUNCTION_TEMPLATE_ORDERING
   inline NoToStringOverload toString( ... )
   {
      return NoToStringOverload();
   }
#else
   template<class T>
   inline NoToStringOverload toString( const T & )
   {
      return NoToStringOverload();
   }
#endif

   /// \cond implementation_detail
   namespace Impl {

      template<typename ValueType>
      std::string toStringStringize( const ValueType &value, NoToStringOverload )
      {
         return defaultStringize( value );
      }

      template<typename ValueType>
      std::string toStringStringize( const ValueType &value, const std::string &str )
      {
         return str;
      }

      template<typename ValueType>
      std::string stringize( const ValueType &value, NotConvertibleToStdString )
      {
         return toStringStringize( value, toString( value ) );
      }

      template<typename ValueType>
      std::string stringize( const ValueType &value, const std::string &str )
      {
         return CppTL::quoteString( str ).c_str();
      }

   } // namespace Impl
   /// \endcond implementation_detail


   /*! \ingroup group_assertions_support
    */
   template<typename ValueType>
   std::string stringize( const ValueType &value )
   {
      return Impl::stringize( value, getStdString(&value) );
   }

} // namespace CPPUT


# ifndef CPPUT_NO_DEFAULT_STRINGIZE

#  ifndef CPPTL_NO_SSTREAM
#   include <sstream>
#  else // standard stream are not available, use the deprecated one
#   include <strstream>
#  endif

namespace CppUT {

   /*! \ingroup group_assertions_support
    */
   template<typename ValueType>
   std::string defaultStringize( const ValueType &value )
   {
#  ifndef CPPTL_NO_SSTREAM
         std::ostringstream os;
         os  <<  value;
         return os.str();
#  else // standard stream are not available, use the deprecated one
         std::ostrstream os;
         os  <<  value;
         return std::string( os.str(), os.pcount() );
#  endif
   }

} // namespace CPPUT

# endif


#endif // CPPUT_STRINGIZE_H_INCLUDED
@


1.10
log
@- added some documentation
- fixed tabs display in html output.
@
text
@d162 1
d190 2
@


1.9
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d35 1
a35 1
    *  \ingroup group_assertions_support
@


1.8
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d34 2
a35 1
   /** A generic functor that can be used to convert a value into a string.
d49 2
d60 2
d90 2
d94 2
d101 2
d108 2
d116 2
d123 2
d132 2
d190 2
d211 2
@


1.7
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@d48 18
@


1.6
log
@* fixed bug in lighttestrunner: called AbstractTestCase::run instead of runTest().
* fixed usage of incomplete SharedPtr in TestRunner.
@
text
@d9 23
d34 5
d49 1
a49 1
// User should overload convertToString() to support their own string types.
d51 3
a53 1
// IMPORTANT: convertToString() must never be called with a 'by value' parameter.
d63 2
a64 2
//    RegEx regex( CppUT::convertToString(pattern ) );
//    CppUT::checkTrue( regex.matched( CppUT::convertToString( str ) ) );
d69 1
a69 1
   inline std::string convertToString( const char *cstr )
d74 1
a74 1
   inline std::string convertToString( const std::string &s )
d79 1
a79 1
   inline std::string convertToString( const CppTL::ConstString &s )
d84 2
a85 1
   inline NotConvertibleToStdString convertToString( ... )
d89 13
d110 14
d128 12
d142 1
a142 1
         return defaultStringize( value );
d156 1
a156 1
      return Impl::stringize( value, convertToString(value) );
d172 2
a173 2
   template<class ValueType>
   struct StringizeTraits
a174 2
      static std::string stringize( const ValueType &value )
      {
a183 7
      }
   };

   template<typename ValueType>
   std::string defaultStringize( const ValueType &value )
   {
      return StringizeTraits<ValueType>::stringize( value );
@


1.5
log
@* use deprecated ostrstream if the standard one are not available.
@
text
@a8 1

@


1.4
log
@* use deprecated ostrstream if the standard one are not available.
@
text
@d115 1
a115 1
         return std::string( std::ostrstream::str(), pcount() );
@


1.3
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d95 5
a99 1
#  include <sstream>
d108 1
d112 5
@


1.2
log
@* made it possible to pass a functor for conversion of item to string
@
text
@d7 1
a11 4
   // implemented in assertstring.cpp
   std::string CPPUT_API quoteString( const std::string &str );


d50 5
d79 1
a79 1
         return quoteString( str );
@


1.1
log
@Initial revision
@
text
@d15 9
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
