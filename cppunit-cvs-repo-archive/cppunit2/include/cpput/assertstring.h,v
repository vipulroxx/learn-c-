head	1.7;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.5
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.3
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.2
	TG_AFTER_REMOVING_TESTCONTEXT:1.2
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.2
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2008.06.26.16.24.11;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.27.10.13.36;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.16.12.51;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.23;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.23;	author blep;	state Exp;
branches;
next	;


desc
@@


1.7
log
@* Added check version of string assertions
@
text
@#ifndef CPPUT_ASSERTSTRING_H_INCLUDED
# define CPPUT_ASSERTSTRING_H_INCLUDED

# include <cpput/assertcommon.h>

namespace CppUT {

   CheckerResult CPPUT_API checkStdStringStartsWith( const std::string &string,
                                                     const std::string &pattern,
                                                     const Message &message );

   CheckerResult CPPUT_API checkStdStringEndsWith( const std::string &string,
                                                   const std::string &pattern,
                                                   const Message &message );

   CheckerResult CPPUT_API checkStdStringContains( const std::string &string,
                                                   const std::string &pattern,
                                                   const Message &message );

   CheckerResult CPPUT_API checkStdStringEquals( const std::string &expected,
                                                 const std::string &actual,
                                                 const Message &message );

   template<typename String1
           ,typename String2>
   CheckerResult checkStringStartsWith( const String1 &string,
                                        const String2 &pattern,
                                        const Message &message = Message() )
   {
      return checkStdStringStartsWith( convertToString( string ),
                                       convertToString( pattern ),
                                       message );
   }

   template<typename String1
           ,typename String2>
   CheckerResult checkStringEndsWith( const String1 &string,
                                      const String2 &pattern,
                                      const Message &message = Message() )
   {
      return checkStdStringEndsWith( convertToString( string ),
                                     convertToString( pattern ),
                                     message );
   }

   template<typename String1
           ,typename String2>
   CheckerResult checkStringContains( const String1 &string,
                                      const String2 &pattern,
                                      const Message &message = Message() )
   {
      return checkStdStringContains( convertToString( string ),
                                     convertToString( pattern ),
                                     message );
   }


   template<typename String1
           ,typename String2>
   CheckerResult checkStringEquals( const String1 &expected,
                                    const String2 &actual,
                                    const Message &message = Message() )
   {
      return checkStdStringEquals( convertToString( expected ),
                                   convertToString( actual ),
                                   message );
   }


// string assertions

/*! \brief Asserts that a string starts with the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERTSTR_START   \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStringStartsWith

/*! \brief Asserts that a string ends with the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERTSTR_END     \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStringEndsWith

/*! \brief Asserts that a string contains the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERTSTR_CONTAIN \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStringContains

/*! \brief Asserts that two string are identical.
 * \ingroup group_assertions
 *
 * Useful to compare \c const \c char \c * or string of different C++ types
 * (MFC \c CString and \c std::string for example).
 */
# define CPPUT_ASSERTSTR_EQUAL   \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStringEquals



// string checks

/*! \brief Asserts that a string starts with the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_CHECKSTR_START   \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStringStartsWith

/*! \brief Asserts that a string ends with the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_CHECKSTR_END     \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStringEndsWith

/*! \brief Asserts that a string contains the specified character sequence.
 * \ingroup group_assertions
 */
# define CPPUT_CHECKSTR_CONTAIN \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStringContains

/*! \brief Asserts that two string are identical.
 * \ingroup group_assertions
 *
 * Useful to compare \c const \c char \c * or string of different C++ types
 * (MFC \c CString and \c std::string for example).
 */
# define CPPUT_CHECKSTR_EQUAL   \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStringEquals



} // namespace CppUT


#endif // CPPUT_ASSERTSTRING_H_INCLUDED
@


1.6
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@d104 36
@


1.5
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d8 15
a22 15
   void CPPUT_API checkStdStringStartsWith( const std::string &string,
                                            const std::string &pattern,
                                            const Message &message );

   void CPPUT_API checkStdStringEndsWith( const std::string &string,
                                          const std::string &pattern,
                                          const Message &message );

   void CPPUT_API checkStdStringContains( const std::string &string,
                                          const std::string &pattern,
                                          const Message &message );

   void CPPUT_API checkStdStringEquals( const std::string &expected,
                                        const std::string &actual,
                                        const Message &message );
d26 3
a28 3
   void checkStringStartsWith( const String1 &string,
                               const String2 &pattern,
                               const Message &message = Message() )
d30 3
a32 3
      checkStdStringStartsWith( convertToString( string ),
                                convertToString( pattern ),
                                message );
d37 3
a39 3
   void checkStringEndsWith( const String1 &string,
                             const String2 &pattern,
                             const Message &message = Message() )
d41 3
a43 3
      checkStdStringEndsWith( convertToString( string ),
                              convertToString( pattern ),
                              message );
d48 3
a50 3
   void checkStringContains( const String1 &string,
                             const String2 &pattern,
                             const Message &message = Message() )
d52 3
a54 3
      checkStdStringContains( convertToString( string ),
                              convertToString( pattern ),
                              message );
d60 3
a62 3
   void checkStringEquals( const String1 &expected,
                           const String2 &actual,
                           const Message &message = Message() )
d64 3
a66 3
      checkStdStringEquals( convertToString( expected ),
                            convertToString( actual ),
                            message );
@


1.4
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d4 1
a4 1
# include <cpput/assert.h>
@


1.3
log
@* use ConstString instead of std::string
* moved quoteString() from cpput/assertstring to cpptl/stringtools.h.
@
text
@d71 4
d79 3
d86 3
d93 6
@


1.2
log
@* added /Za setting to project to force conformance to ANSI C++
* fixed issues related to ANSI C++ conformance
* fixed bug in SliceEnumerator copy constructor & added test
@
text
@a6 12
/*
   inline std::string CPPUT_API convertToString( const std::string &string )
   {
      return string;
   }

   inline std::string CPPUT_API convertToString( const char *cstring )
   {
      return cstring;
   }
*/
   std::string CPPUT_API escape( const std::string &text );
@


1.1
log
@Initial revision
@
text
@d103 1
a103 1
#endif // CPPUT_ASSERTSTRING_H_INCLUDED@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
