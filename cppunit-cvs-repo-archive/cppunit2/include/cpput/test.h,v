head	1.12;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.12
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.5
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.4
	TG_AFTER_REMOVING_TESTCONTEXT:1.3
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.3
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2006.09.03.07.15.49;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.08.20.25.49;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.07.22.43.07;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.08.06.22.24.53;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.20.21.06.49;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.20.16.17.32;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.17.21.47.09;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.04.21.17.17;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- added support to declare test case association to a given group in test fixture.
@
text
@#ifndef CPPUT_TEST_H_INCLUDED
# define CPPUT_TEST_H_INCLUDED

# include <cpput/forwards.h>
# include <json/value.h>
# include <cpptl/conststring.h>
# include <cpptl/intrusiveptr.h>
# include <string>


namespace CppUT {

class TestVisitor;

/*! This class represents the data about a test.
 * \ingroup group_testcases
 *
 * It is the base class of AbstractTestCase and AbstractTestSuite.
 */
class CPPUT_API Test : public CppTL::IntrusiveCount
{
   // ensure that this class can only be derived by AbstractTestCase and
   // AbstractTestSuite.
   friend class AbstractTestCase;
   friend class AbstractTestSuite;
public:
   virtual ~Test()
   {
   }

   void setDescription( const std::string &description )
   {
      info_["configuration/description"] = description;
   }

   std::string description() const
   {
      return info_.get("configuration/description", "" ).asString();
   }

   std::string name() const
   {
      return info_.get( "configuration/name", "" ).asString();
   }

   void setTimeOut( double timeOutInSeconds )
   {
      info_["configuration/timeOut"] = timeOutInSeconds;
   }

   double timeOut() const
   {
      return info_.get( "configuration/timeOut", 0.0 ).asDouble();
   }

   void addToGroup( const std::string &groupName )
   {
      info_["configuration"]["groups"].append( groupName );
   }

   int groupCount() const
   {
      return info_["configuration"]["groups"].size();
   }

   std::string groupAt( unsigned int index ) const
   {
      return info_["configuration"]["groups"][index].asString();
   }

   /// @@warning You must never change the name of the test after
   /// registering the test or scheduling it for running.
   void setName( const std::string &name )
   {
      info_["configuration/name"] = name;
   }

   //OpenTest::PropertiesAccessor info() const
   //{
   //   return info_.accessor();
   //}

   /// @@warning You must never change the name of the test after
   /// registering the test or scheduling it for running.
   //Json::Value &info()
   //{
   //   return info_;
   //}

   /// Returns \c true if the class is derived from AbstractTestSuite.
   bool isTestSuite() const
   {
      return !isTestCase();
   }

   virtual void accept( TestVisitor &visitor ) = 0;

   /// Returns \c true if the class is derived from AbstractTestCase.
   virtual bool isTestCase() const = 0;

private:
   Test()
   {
      setName( "<undefined>" );
   }

   Test( const std::string &name )
   {
      setName( name );
   }

private:
   Json::Value info_;
};


} // namespace CppUT

#endif // CPPUT_TEST_H_INCLUDED
@


1.11
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d56 15
@


1.10
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d15 5
@


1.9
log
@* replaced include/opentest/properties.h with include/json/value.h
* replaced all occurrences of OpenTest::Value and OpenTest::Properties with Json::Value.
@
text
@d26 1
a26 1
   void setDescription( const CppTL::ConstString &description )
d31 1
a31 1
   CppTL::ConstString description() const
d33 1
a33 1
      return info_.get("configuration/description", "" ).asConstString();
d36 1
a36 1
   CppTL::ConstString name() const
d38 1
a38 1
      return info_.get( "configuration/name", "" ).asConstString();
d53 1
a53 1
   void setName( const CppTL::ConstString &name )
d87 1
a87 1
   Test( const CppTL::ConstString &name )
@


1.8
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d5 2
a6 1
# include <opentest/properties.h>
d65 1
a65 1
   //OpenTest::Properties &info()
d93 1
a93 1
   OpenTest::Properties info_;
@


1.7
log
@Added possibility to add test to a fixture and set its description and time-out (and other specifics).
@
text
@d32 1
a32 1
      return info().getValue("configuration/description", "" ).asString();
d37 1
a37 1
      return info().getValue( "configuration/name", "" ).asString();
d47 1
a47 1
      return info().getValue( "configuration/timeOut", 0.0 ).asReal();
d54 1
a54 1
      info()["configuration/name"] = name;
d57 4
a60 4
   OpenTest::PropertiesAccessor info() const
   {
      return info_.accessor();
   }
d64 4
a67 4
   OpenTest::Properties &info()
   {
      return info_;
   }
@


1.6
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@d25 10
d40 10
@


1.5
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d6 1
d14 1
a14 1
class CPPUT_API Test
@


1.4
log
@* added support for test descriptive data
@
text
@d24 1
a24 1
   std::string name() const
d31 1
a31 1
   void setName( const std::string &name )
d65 1
a65 1
   Test( const std::string &name )
@


1.3
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@d5 1
d26 1
a26 1
      return name_;
d33 13
a45 1
      name_ = name;
d62 1
a65 1
      : name_( name )
d67 1
d71 1
a71 1
   std::string name_;
@


1.2
log
@* added free function path()
@
text
@a3 1
# include <cpput/config.h>
d14 4
d19 3
a21 1
   virtual std::string name() const = 0;
d23 1
a23 17
   virtual void run( TestContext &context ) = 0;

   virtual void accept( TestVisitor &visitor ) = 0;

   virtual void setParentTest( Test &parentTest ) = 0;

   virtual Test *parentTest() const = 0;

   virtual int totalTestCount() const =0;
};


class CPPUT_API AbstractTest : public Test
{
public:
   AbstractTest()
      : parentTest_( 0 )
d25 1
d28 3
a30 3
   AbstractTest( const std::string &name )
      : name_( name )
      , parentTest_( 0 )
d32 1
d35 2
a36 2
// overridden from Test
   std::string name() const
d38 1
a38 1
      return name_;
d41 7
a47 1
   void setParentTest( Test &parentTest )
a48 1
      parentTest_ = &parentTest;
d51 2
a52 1
   Test *parentTest() const
a53 1
      return parentTest_;
a57 1
   Test *parentTest_;
a60 8
inline std::string CPPUT_API path( Test &test )
{
   if ( test.parentTest() )
      return path( *test.parentTest() ) + "/" + test.name();
   return test.name();
}


@


1.1
log
@Initial revision
@
text
@d66 8
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
