head	1.13;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.12
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.7
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.7
	TG_AFTER_REMOVING_TESTCONTEXT:1.5
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.5
	TG_BEFORE_REMOVING_TESTCONTEXT:1.5
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.08.09.05.05;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.07.22.43.07;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.06.07.18.48;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.26.11.43.17;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.23.22.08.45;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.10.21.17.23.22;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.06.15.07.45.42;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.04.03.14.51.21;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.16.12.51;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.23;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.23;	author blep;	state Exp;
branches;
next	;


desc
@@


1.13
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@#ifndef CPPUT_ASSERTENUM_H_INCLUDED
# define CPPUT_ASSERTENUM_H_INCLUDED

# include <cpput/assertcommon.h>
# include <cpptl/enumerator.h>
# include <functional>
# include <deque>

//todo: for sequence, list 'common' sequence part before expected & actual divergence

namespace CppUT
{
   template<class AType
           ,class BType>
   struct DefaultComparator
   {
      DefaultComparator() // Declaration needed to avoid bogus suncc warning.
      {
      }

      bool operator()( const AType &a, const BType &b ) const
      {
         return equalityTest( a, b );
      }
   };

   template<class AType
            ,class BType>
   struct DeRefComparator
   {
      bool operator()( const AType *a, const BType *b ) const
      {
         return a == b  ||  
                ( !a  &&  !b  &&  *a == *b );
      }
   };

   template<class AType
            ,class BType>
   struct RefComparator
   {
      bool operator()( AType a, BType b ) const
      {
         return equalityTest( a, b );
      }
   };

# ifndef CPPUT_NO_DEFAULT_ENUM_ITEM_STRINGIZE
   template<typename ItemType>
   std::string stringizeEnumItem( const ItemType &item )
   {
      return stringize( item );
   }
# endif // CPPUT_NO_DEFAULT_ENUM_ITEM_STRINGIZE


   /// \cond implementation_detail
   namespace Impl {

      enum { noDifference = -1 };

      template<class ExpectedEnumType
              ,class ActualEnumType
              ,class EqualityPredicate>
      unsigned int getSequenceDiffIndex( ExpectedEnumType expected, 
                                         ActualEnumType actual,
                                         EqualityPredicate comparator )
      {
         unsigned int diffIndex = 0;
         while ( expected.is_open() )
         {
            if ( !actual.is_open() )
               return diffIndex;
            if ( !comparator(expected.current(), actual.current() ) )
               return diffIndex;
            expected.advance();
            actual.advance();
            ++diffIndex;
         }
         if ( actual.is_open() )
            return diffIndex;
         return (unsigned int)noDifference;
      }


      template<class ExpectedSetType
               ,class ActualSetType
               ,class MissingSeqType
               ,class ExtraneousSeqType
               ,class EqualityPredicate>
      void getSetDifference( ExpectedSetType expectedEnum,
                             ActualSetType actualEnum,
                             MissingSeqType &missing,
                             ExtraneousSeqType &extraneous,
                             EqualityPredicate predicate )
      {
         for ( ; actualEnum.is_open(); actualEnum.advance() )
            extraneous.push_back( actualEnum.current() );

         for ( ; expectedEnum.is_open(); expectedEnum.advance() )
         {
            CPPTL_TYPENAME ExpectedSetType::value_type expectedItem = expectedEnum.current();
            bool found = false;
            CPPTL_TYPENAME ExtraneousSeqType::iterator it = extraneous.begin();
            for ( ; it != extraneous.end(); ++it )
            {
               const CPPTL_TYPENAME ExtraneousSeqType::value_type &actualItem = *it;
               if ( predicate( expectedItem, actualItem ) )
               {
                  it = extraneous.erase( it );
                  found = true;
                  break;
               }
            }

            if ( !found )
               missing.push_back( expectedItem );
         }
      }

   } // namespace Impl
   /// \endcond

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class ExpectedStringizer
           ,class ActualStringizer
           ,class EqualityPredicate>
   CheckerResult checkCustomHeterogeneousSequenceEqual( const ExpectedEnumerator &expected,
                                                        const ActualEnumerator &actual,
                                                        ExpectedStringizer expectedStringizer,
                                                        ActualStringizer actualStringizer,
                                                        EqualityPredicate comparator,
                                                        const Message &message )
   {
      CheckerResult result;
      unsigned int diffIndex = Impl::getSequenceDiffIndex( expected, 
                                                           actual, 
                                                           comparator );
      if ( diffIndex == Impl::noDifference )
         return result;

      typedef CppTL::SliceEnumerator<ExpectedEnumerator> ExpectedEnumeratorSlice;
      ExpectedEnumeratorSlice common = CppTL::Enum::slice( expected, 0, diffIndex );
      ExpectedEnumeratorSlice expectedDiff = CppTL::Enum::slice( expected, diffIndex );
      typedef CppTL::SliceEnumerator<ActualEnumerator> ActualEnumeratorSlice;
      ActualEnumeratorSlice actualDiff = CppTL::Enum::slice( actual, diffIndex );

      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "Sequences are not identical." ) );
      result.message_.add( translate( "Divergence position (0 based): " ) + stringize(diffIndex) );
      if ( common.is_open() )
         result.message_.add( translate( "Common:\n" ) + enumToStringCustom(common,  
                                                                            expectedStringizer) );
      result.message_.add( translate( "Expected:\n" ) + enumToStringCustom(expectedDiff, 
                                                                           expectedStringizer) );
      result.message_.add( translate( "Actual:\n" ) + enumToStringCustom(actualDiff, 
                                                                         actualStringizer) );
      return result;
   }

   template<class EnumeratorType
           ,class StringizerType
           ,class EqualityPredicate>
   CheckerResult checkCustomSequenceEqual( const EnumeratorType &expected,
                                           const EnumeratorType &actual,
                                           StringizerType stringizer,
                                           EqualityPredicate comparator,
                                           const Message &message )
   {
      return checkCustomHeterogeneousSequenceEqual( expected, actual,
                                                    stringizer, stringizer,
                                                    comparator, message );
   }

   template<class EnumeratorType
           ,class StringizerType
           ,class EqualityPredicate>
   CheckerResult checkCustomStringSequenceEqual( const EnumeratorType &expected,
                                                 const EnumeratorType &actual,
                                                 StringizerType stringizer,
                                                 const Message &message = Message() )
   {
      typedef CPPTL_TYPENAME EnumeratorType::value_type ValueType;
      DefaultComparator<ValueType,ValueType> comparator;
      return checkCustomHeterogeneousSequenceEqual( expected, actual,
                                                    stringizer, stringizer,
                                                    comparator, message );
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class EqualityPredicate>
   CheckerResult checkCustomEqualitySequenceEqual( const ExpectedEnumerator &expected,
                                                   const ActualEnumerator &actual,
                                                   EqualityPredicate comparator,
                                                   const Message &message = Message() )
   {
      typedef DefaultStringizer<CPPTL_TYPENAME ExpectedEnumerator::value_type> ExpectedStringizer;
      typedef DefaultStringizer<CPPTL_TYPENAME ActualEnumerator::value_type> ActualStringizer;
      return checkCustomHeterogeneousSequenceEqual( expected, actual,
                                                    ExpectedStringizer(), ActualStringizer(),
                                                    comparator, message );
   }


   template<class ExpectedEnumeratorType
           ,class ActualEnumeratorType>
   CheckerResult checkSequenceEqual( const ExpectedEnumeratorType &expected,
                                     const ActualEnumeratorType &actual,
                                     const Message &message  = Message() )
   {
      DefaultComparator<CPPTL_TYPENAME ExpectedEnumeratorType::value_type
                       ,CPPTL_TYPENAME ActualEnumeratorType::value_type> comparator;
      return checkCustomEqualitySequenceEqual( expected, actual, comparator, message );
   }

   template<class ExpectedEnumeratorType
           ,class ActualEnumeratorType
           ,class EqualityPredicate>
   CheckerResult checkCustomEqualityStlSequenceEqual( const ExpectedEnumeratorType &expected,
                                                      const ActualEnumeratorType &actual,
                                                      EqualityPredicate comparator,
                                                      const Message &message = Message() )
   {
      return checkCustomEqualitySequenceEqual( CppTL::Enum::container( expected ), 
                                               CppTL::Enum::container( actual ), 
                                               comparator, message );
   }

   template<class ExpectedEnumeratorType
           ,class ActualEnumeratorType>
   CheckerResult checkStlSequenceEqual( const ExpectedEnumeratorType &expected,
                                        const ActualEnumeratorType &actual,
                                        const Message &message  = Message() )
   {
      return checkSequenceEqual( CppTL::Enum::container( expected ), 
                                 CppTL::Enum::container( actual ), 
                                 message );
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class ExpectedStringizer
           ,class ActualStringizer
           ,class EqualityPredicate>
   CheckerResult checkCustomHeterogeneousSetEqual( const ExpectedEnumerator &expected,
                                                   const ActualEnumerator &actual,
                                                   ExpectedStringizer expectedStringizer,
                                                   ActualStringizer actualStringizer,
                                                   EqualityPredicate predicate,
                                                   const Message &message )
   {
      CheckerResult result;
      std::deque<CPPTL_TYPENAME ExpectedEnumerator::value_type> missing;
      std::deque<CPPTL_TYPENAME ActualEnumerator::value_type> extraneous;
      Impl::getSetDifference( expected, actual,
                              missing, extraneous,
                              predicate );
      if ( missing.empty()  &&  extraneous.empty() )
         return result;

      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "Sets do not contain the same items." ) );
      result.message_.add( translate( "Actual:\n" ) + enumToStringCustom(actual,actualStringizer) );
      if ( missing.size() > 0 )
         result.message_.add( translate( "Missing:\n" ) + 
                              enumToStringCustom( CppTL::Enum::container(missing),
                                                  expectedStringizer ) );
      if ( extraneous.size() > 0 )
         result.message_.add( translate( "Extraneous:\n" ) + 
                              enumToStringCustom( CppTL::Enum::container(extraneous), 
                                                  actualStringizer ) );
      return result;
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class ItemStringizer
           ,class EqualityPredicate>
   CheckerResult checkCustomSetEqual( const ExpectedEnumerator &expected,
                                      const ActualEnumerator &actual,
                                      ItemStringizer itemStringizer,
                                      EqualityPredicate comparator,
                                      const Message &message = Message() )
   {
      return checkCustomHeterogeneousSetEqual( expected, actual, 
                                               itemStringizer, itemStringizer, 
                                               comparator, message );
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class ItemStringizer>
   CheckerResult checkCustomStringSetEqual( const ExpectedEnumerator &expected,
                                            const ActualEnumerator &actual,
                                            ItemStringizer itemStringizer,
                                            const Message &message = Message() )
   {
      DefaultComparator<CPPTL_TYPENAME ExpectedEnumerator::value_type
                       ,CPPTL_TYPENAME ActualEnumerator::value_type> comparator;
      return checkCustomSetEqual( expected, actual, itemStringizer, comparator, message );
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator
           ,class EqualityPredicate>
   CheckerResult checkCustomEqualitySetEqual( const ExpectedEnumerator &expected,
                                              const ActualEnumerator &actual,
                                              EqualityPredicate comparator,
                                              const Message &message = Message() )
   {
      typedef DefaultStringizer<CPPTL_TYPENAME ExpectedEnumerator::value_type> ExpectedStringizer;
      typedef DefaultStringizer<CPPTL_TYPENAME ActualEnumerator::value_type> ActualStringizer;
      return checkCustomHeterogeneousSetEqual( expected, actual, 
                                               ExpectedStringizer(), ActualStringizer(),
                                               comparator, message );
   }

   template<class ExpectedEnumerator
           ,class ActualEnumerator>
   CheckerResult checkSetEqual( const ExpectedEnumerator &expected,
                                const ActualEnumerator &actual,
                                const Message &message = Message() )
   {
      DefaultComparator<CPPTL_TYPENAME ExpectedEnumerator::value_type
                       ,CPPTL_TYPENAME ActualEnumerator::value_type> comparator;
      return checkCustomEqualitySetEqual( expected, actual, comparator, message );
   }

   template<class ExpectedStlSet
           ,class ActualStlSet>
   CheckerResult checkStlSetEqual( const ExpectedStlSet &expected,
                                   const ActualStlSet &actual,
                                   const Message &message = Message() )
   {
      return checkSetEqual( CppTL::Enum::container( expected ), 
                            CppTL::Enum::container( actual ), 
                            message );
   }

   template<class ExpectedSetType
           ,class ActualSetType
           ,class EqualityPredicate>
   CheckerResult checkCustomEqualityStlSetEqual( const ExpectedSetType &expected,
                                                 const ActualSetType &actual,
                                                 EqualityPredicate predicate,
                                                 const Message &message = Message() )
   {
      return checkSetEqual( CppTL::Enum::container( expected ), 
                            CppTL::Enum::container( actual ), 
                            predicate, message );
   }


   template<class EnumeratorType
           ,class ItemStringizerType>
   std::string enumToStringCustom( EnumeratorType enumerator,
                                   ItemStringizerType itemStringizer,
                                   const std::string &separator = "; ",
                                   const std::string &begin = "{ ",
                                   const std::string &end = " }" )
   {
      std::string str;
      for ( ; enumerator.is_open(); enumerator.advance() )
      {
         std::string item = itemStringizer( enumerator.current() );
         if ( !str.empty() )
            str += separator;
         str += item;
      }
      return begin + str + end;
   }


   template<class EnumType>
   std::string enumToString( const EnumType &enumerator,
                             const std::string &separator = "; ",
                             const std::string &begin = "{ ",
                             const std::string &end = " }" )
   {
      return enumToStringCustom( enumerator, 
                                 DefaultStringizer<CPPTL_TYPENAME EnumType::value_type>(), 
                                 separator, 
                                 begin, 
                                 end );
   }

} // namespace CppUT


/*! \brief Asserts that two ordered sequence (list) are identical.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERT_SEQUENCE_EQUAL  \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkSequenceEqual

/*! \brief Asserts that two unordered sequence (set,bag) are identical.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERT_SET_EQUAL \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkSetEqual

/*! \brief Asserts that two STL ordered sequence are identical.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERT_STL_SEQUENCE_EQUAL  \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStlSequenceEqual

/*! \brief Asserts that two STL unordered sequence are identical.
 * \ingroup group_assertions
 */
# define CPPUT_ASSERT_STL_SET_EQUAL \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   ::CppUT::checkStlSetEqual


/*! \brief Checks that two ordered sequence (list) are identical.
 * \ingroup group_assertions
 */
# define CPPUT_CHECK_SEQUENCE_EQUAL  \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkSequenceEqual

/*! \brief Checks that two unordered sequence (set,bag) are identical.
 * \ingroup group_assertions
 */
# define CPPUT_CHECK_SET_EQUAL \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkSetEqual


/*! \brief Asserts that two STL ordered sequence are identical.
 * \ingroup group_assertions
 */
# define CPPUT_CHECK_STL_SEQUENCE_EQUAL  \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStlSequenceEqual

/*! \brief Checks that two STL unordered sequence are identical.
 * \ingroup group_assertions
 */
# define CPPUT_CHECK_STL_SET_EQUAL \
   CPPUT_BEGIN_CHECKING_MACRO() \
   ::CppUT::checkStlSetEqual

#endif // CPPUT_ASSERTENUM_H_INCLUDED

@


1.12
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d129 6
a134 6
   void checkCustomHeterogeneousSequenceEqual( const ExpectedEnumerator &expected,
                                               const ActualEnumerator &actual,
                                               ExpectedStringizer expectedStringizer,
                                               ActualStringizer actualStringizer,
                                               EqualityPredicate comparator,
                                               const Message &message )
d136 1
d141 1
a141 1
         return;
d149 4
a152 3
      Message newMessage( message );
      newMessage.add( translate( "Sequences are not identical." ) );
      newMessage.add( translate( "Divergence position (0 based): " ) + stringize(diffIndex) );
d154 7
a160 7
         newMessage.add( translate( "Common:\n" ) + enumToStringCustom(common,  
                                                                       expectedStringizer) );
      newMessage.add( translate( "Expected:\n" ) + enumToStringCustom(expectedDiff, 
                                                                      expectedStringizer) );
      newMessage.add( translate( "Actual:\n" ) + enumToStringCustom(actualDiff, 
                                                                    actualStringizer) );
      fail( newMessage );
d166 9
a174 9
   void checkCustomSequenceEqual( const EnumeratorType &expected,
                                  const EnumeratorType &actual,
                                  StringizerType stringizer,
                                  EqualityPredicate comparator,
                                  const Message &message )
   {
      checkCustomHeterogeneousSequenceEqual( expected, actual,
                                             stringizer, stringizer,
                                             comparator, message );
d180 4
a183 4
   void checkCustomStringSequenceEqual( const EnumeratorType &expected,
                                        const EnumeratorType &actual,
                                        StringizerType stringizer,
                                        const Message &message = Message() )
d187 3
a189 3
      checkCustomHeterogeneousSequenceEqual( expected, actual,
                                             stringizer, stringizer,
                                             comparator, message );
d195 4
a198 4
   void checkCustomEqualitySequenceEqual( const ExpectedEnumerator &expected,
                                          const ActualEnumerator &actual,
                                          EqualityPredicate comparator,
                                          const Message &message = Message() )
d202 3
a204 3
      checkCustomHeterogeneousSequenceEqual( expected, actual,
                                             ExpectedStringizer(), ActualStringizer(),
                                             comparator, message );
d210 3
a212 3
   void checkSequenceEqual( const ExpectedEnumeratorType &expected,
                            const ActualEnumeratorType &actual,
                            const Message &message  = Message() )
d216 1
a216 1
      checkCustomEqualitySequenceEqual( expected, actual, comparator, message );
d222 8
a229 8
   void checkCustomEqualityStlSequenceEqual( const ExpectedEnumeratorType &expected,
                                             const ActualEnumeratorType &actual,
                                             EqualityPredicate comparator,
                                             const Message &message  = Message() )
   {
      checkCustomEqualitySequenceEqual( CppTL::Enum::container( expected ), 
                                        CppTL::Enum::container( actual ), 
                                        comparator, message );
d234 7
a240 7
   void checkStlSequenceEqual( const ExpectedEnumeratorType &expected,
                               const ActualEnumeratorType &actual,
                               const Message &message  = Message() )
   {
      checkSequenceEqual( CppTL::Enum::container( expected ), 
                          CppTL::Enum::container( actual ), 
                          message );
d248 6
a253 6
   void checkCustomHeterogeneousSetEqual( const ExpectedEnumerator &expected,
                                          const ActualEnumerator &actual,
                                          ExpectedStringizer expectedStringizer,
                                          ActualStringizer actualStringizer,
                                          EqualityPredicate predicate,
                                          const Message &message )
d255 1
d262 1
a262 1
         return;
d264 4
a267 3
      Message newMessage( message );
      newMessage.add( translate( "Sets do not contain the same items." ) );
      newMessage.add( translate( "Actual:\n" ) + enumToStringCustom(actual,actualStringizer) );
d269 3
a271 3
         newMessage.add( translate( "Missing:\n" ) + 
                         enumToStringCustom( CppTL::Enum::container(missing),
                                             expectedStringizer ) );
d273 4
a276 4
         newMessage.add( translate( "Extraneous:\n" ) + 
                         enumToStringCustom( CppTL::Enum::container(extraneous), 
                                             actualStringizer ) );
      fail( newMessage );
d283 9
a291 9
   void checkCustomSetEqual( const ExpectedEnumerator &expected,
                             const ActualEnumerator &actual,
                             ItemStringizer itemStringizer,
                             EqualityPredicate comparator,
                             const Message &message = Message() )
   {
      checkCustomHeterogeneousSetEqual( expected, actual, 
                                        itemStringizer, itemStringizer, 
                                        comparator, message );
d297 4
a300 4
   void checkCustomStringSetEqual( const ExpectedEnumerator &expected,
                                   const ActualEnumerator &actual,
                                   ItemStringizer itemStringizer,
                                   const Message &message = Message() )
d304 1
a304 1
      checkCustomSetEqual( expected, actual, itemStringizer, comparator, message );
d310 4
a313 4
   void checkCustomEqualitySetEqual( const ExpectedEnumerator &expected,
                                     const ActualEnumerator &actual,
                                     EqualityPredicate comparator,
                                     const Message &message = Message() )
d317 3
a319 3
      checkCustomHeterogeneousSetEqual( expected, actual, 
                                        ExpectedStringizer(), ActualStringizer(),
                                        comparator, message );
d324 3
a326 3
   void checkSetEqual( const ExpectedEnumerator &expected,
                       const ActualEnumerator &actual,
                       const Message &message = Message() )
d330 1
a330 1
      checkCustomEqualitySetEqual( expected, actual, comparator, message );
d335 7
a341 7
   void checkStlSetEqual( const ExpectedStlSet &expected,
                          const ActualStlSet &actual,
                          const Message &message = Message() )
   {
      checkSetEqual( CppTL::Enum::container( expected ), 
                     CppTL::Enum::container( actual ), 
                     message );
d347 8
a354 8
   void checkCustomEqualityStlSetEqual( const ExpectedSetType &expected,
                                        const ActualSetType &actual,
                                        EqualityPredicate predicate,
                                        const Message &message = Message() )
   {
      checkSetEqual( CppTL::Enum::container( expected ), 
                     CppTL::Enum::container( actual ), 
                     predicate, message );
@


1.11
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d4 1
a4 1
# include <cpput/assert.h>
d57 1
d122 1
@


1.10
log
@* fixed compilation issue on linux with gcc
@
text
@d388 3
d395 3
d402 3
a404 1

d409 3
d417 3
d424 3
d432 3
d439 3
@


1.9
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d7 1
@


1.8
log
@* added CPPUT_CHECK* macros for enum based assertions
@
text
@d30 1
a30 1
      bool operator()( AType *a, BType *b ) const
d37 10
@


1.7
log
@* added default constructor to work around bogus warning on sun
@
text
@d394 18
@


1.6
log
@* removed warning about 'noDifference'
* added missing typename
@
text
@d16 4
@


1.5
log
@* moving CppUTTools library to CppTL library & namespace
* implemented new enumerator library providing both "any" enumerator and specific enumerator avoid virtual function cost
* fixed NoType declaration
@
text
@d44 2
d66 1
a66 1
         return noDifference;
d88 1
a88 1
            ExtraneousSeqType::iterator it = extraneous.begin();
d91 1
a91 1
               const ExtraneousSeqType::value_type &actualItem = *it;
a106 2
   enum { noDifference = -1 };

d122 1
a122 1
      if ( diffIndex == noDifference )
d236 2
a237 2
      std::deque<ExpectedEnumerator::value_type> missing;
      std::deque<ActualEnumerator::value_type> extraneous;
@


1.4
log
@* made it possible to pass a functor for conversion of item to string
@
text
@d5 1
a5 1
# include <cpput/enumerator.h>
d52 1
a52 1
         while ( expected.hasNext() )
d54 1
a54 1
            if ( !actual.hasNext() )
d56 1
a56 1
            if ( !comparator(expected.next(), actual.next() ) )
d58 2
d62 1
a62 1
         if ( actual.hasNext() )
d73 2
a74 2
      void getSetDifference( const ExpectedSetType &expectedEnumSet,
                             const ActualSetType &actualEnumSet,
d79 2
a80 4
         ExpectedSetType expectedEnum = expectedEnumSet.clone();
         ActualSetType actualEnum = actualEnumSet.clone();
         while ( actualEnum.hasNext() )
            extraneous.push_back( actualEnum.next() );
d82 1
a82 1
         while ( expectedEnum.hasNext() )
d84 1
a84 1
            ExpectedSetType::Type expectedItem = expectedEnum.next();
d119 2
a120 2
      unsigned int diffIndex = Impl::getSequenceDiffIndex( expected.clone(), 
                                                           actual.clone(), 
d125 5
a129 3
      ExpectedEnumerator common = enumSlice( expected, 0, diffIndex );
      ExpectedEnumerator expectedDiff = enumSlice( expected, diffIndex );
      ActualEnumerator actualDiff = enumSlice( actual, diffIndex );
d134 1
a134 1
      if ( common.length() > 0 )
d166 2
a167 1
      DefaultComparator<EnumeratorType::Type,EnumeratorType::Type> comparator;
d181 2
a182 2
      typedef DefaultStringizer<CPPUT_DEDUCED_TYPENAME ExpectedEnumerator::Type> ExpectedStringizer;
      typedef DefaultStringizer<CPPUT_DEDUCED_TYPENAME ActualEnumerator::Type> ActualStringizer;
d195 2
a196 2
      DefaultComparator<ExpectedEnumeratorType::Type
                       ,ActualEnumeratorType::Type> comparator;
d208 2
a209 1
      checkCustomEqualitySequenceEqual( enumStl( expected ), enumStl( actual ), 
d219 3
a221 1
      checkSequenceEqual( enumStl( expected ), enumStl( actual ), message );
d236 2
a237 2
      std::deque<ExpectedEnumerator::Type> missing;
      std::deque<ActualEnumerator::Type> extraneous;
d248 3
a250 2
         newMessage.add( translate( "Missing:\n" ) + enumToStringCustom(enumStl(missing),
                                                                        expectedStringizer) );
d252 3
a254 2
         newMessage.add( translate( "Extraneous:\n" ) + enumToStringCustom(enumStl(extraneous), 
                                                                           actualStringizer) );
d281 2
a282 2
      DefaultComparator<CPPUT_DEDUCED_TYPENAME ExpectedEnumerator::Type
                       ,CPPUT_DEDUCED_TYPENAME ActualEnumerator::Type> comparator;
d294 2
a295 2
      typedef DefaultStringizer<CPPUT_DEDUCED_TYPENAME ExpectedEnumerator::Type> ExpectedStringizer;
      typedef DefaultStringizer<CPPUT_DEDUCED_TYPENAME ActualEnumerator::Type> ActualStringizer;
d307 2
a308 2
      DefaultComparator<CPPUT_DEDUCED_TYPENAME ExpectedEnumerator::Type
                       ,CPPUT_DEDUCED_TYPENAME ActualEnumerator::Type> comparator;
d318 3
a320 1
      checkSetEqual( enumStl( expected ), enumStl( actual ), message );
d331 3
a333 1
      checkSetEqual( enumStl( expected ), enumStl( actual ), predicate, message );
d337 1
a337 1
   template<class EnumType
d339 1
a339 1
   std::string enumToStringCustom( const EnumType &enumerator,
a344 1
      EnumType enumToStringize = enumerator.clone();
d346 1
a346 1
      while ( enumToStringize.hasNext() )
d348 1
a348 1
         std::string item = itemStringizer( enumToStringize.next() );
d364 1
a364 1
                                 DefaultStringizer<CPPUT_DEDUCED_TYPENAME EnumType::Type>(), 
@


1.3
log
@* renamed Enumerator::getNext() to Enumerator::next()
@
text
@d46 1
a46 1
              ,class EqualityComparator>
d49 1
a49 1
                                         EqualityComparator comparator )
d107 11
a117 7
   template<class ExpectedSeqType
           ,class ActualSeqType
           ,class EqualityComparator>
   void checkSequenceEqual( const ExpectedSeqType &expected,
                            const ActualSeqType &actual,
                            EqualityComparator comparator,
                            const Message &message )
d125 3
a127 3
      ExpectedSeqType common = enumSlice( expected, 0, diffIndex );
      ExpectedSeqType expectedDiff = enumSlice( expected, diffIndex );
      ActualSeqType actualDiff = enumSlice( actual, diffIndex );
d133 6
a138 3
         newMessage.add( translate( "Common:\n" ) + enumToString(common) );
      newMessage.add( translate( "Expected:\n" ) + enumToString(expectedDiff) );
      newMessage.add( translate( "Actual:\n" ) + enumToString(actualDiff) );
d142 21
a162 7
   template<class ExpectedSeqType
           ,class ActualSeqType
           ,class EqualityComparator>
   void checkStlSequenceEqual( const ExpectedSeqType &expected,
                               const ActualSeqType &actual,
                               EqualityComparator comparator,
                               const Message &message  = Message() )
d164 4
a167 1
      checkSequenceEqual( enumStl( expected ), enumStl( actual ), comparator, message );
d170 7
a176 5
   template<class ExpectedSeqType
           ,class ActualSeqType>
   void checkStlSequenceEqual( const ExpectedSeqType &expected,
                               const ActualSeqType &actual,
                               const Message &message  = Message() )
d178 5
a182 1
      checkSequenceEqual( enumStl( expected ), enumStl( actual ), message );
d186 4
a189 4
   template<class ExpectedSeqType
           ,class ActualSeqType>
   void checkSequenceEqual( const ExpectedSeqType &expected,
                            const ActualSeqType &actual,
d192 3
a194 3
      DefaultComparator<ExpectedSeqType::Type
                       ,ActualSeqType::Type> comparator;
      checkSequenceEqual( expected, actual, comparator, message );
d197 25
a221 2
   template<class ExpectedSetType
           ,class ActualSetType
d223 6
a228 4
   void checkSetEqual( const ExpectedSetType &expected,
                       const ActualSetType &actual,
                       EqualityPredicate predicate,
                       const Message &message )
d230 2
a231 2
      std::deque<ExpectedSetType::Type> missing;
      std::deque<ActualSetType::Type> extraneous;
d240 1
a240 1
      newMessage.add( translate( "Actual:\n" ) + enumToString(actual) );
d242 2
a243 1
         newMessage.add( translate( "Missing:\n" ) + enumToString(enumStl(missing)) );
d245 2
a246 1
         newMessage.add( translate( "Extraneous:\n" ) + enumToString(enumStl(extraneous)) );
d250 47
a296 4
   template<class ExpectedSetType
           ,class ActualSetType>
   void checkSetEqual( const ExpectedSetType &expected,
                       const ActualSetType &actual,
d299 3
a301 3
      DefaultComparator<ExpectedSetType::Type
                       ,ActualSetType::Type> comparator;
      checkSetEqual( expected, actual, comparator, message );
d304 4
a307 4
   template<class ExpectedSetType
           ,class ActualSetType>
   void checkStlSetEqual( const ExpectedSetType &expected,
                          const ActualSetType &actual,
d316 4
a319 4
   void checkStlSetEqual( const ExpectedSetType &expected,
                          const ActualSetType &actual,
                          EqualityPredicate predicate,
                          const Message &message = Message() )
d325 7
a331 5
   template<class EnumType>
   std::string enumToString( const EnumType &enumerator,
                             const std::string &separator = "; ",
                             const std::string &begin = "{ ",
                             const std::string &end = " }" )
d337 1
a337 1
         std::string item = stringize( enumToStringize.next() );
d345 14
@


1.2
log
@* added /Za setting to project to force conformance to ANSI C++
* fixed issues related to ANSI C++ conformance
* fixed bug in SliceEnumerator copy constructor & added test
@
text
@d56 1
a56 1
            if ( !comparator(expected.getNext(), actual.getNext() ) )
d80 1
a80 1
            extraneous.push_back( actualEnum.getNext() );
d84 1
a84 1
            ExpectedSetType::Type expectedItem = expectedEnum.getNext();
d185 5
a189 4
      if ( expected.length() > 0 )
         newMessage.add( translate( "Missing:\n" ) + enumToString(expected) );
      if ( actual.length() > 0 )
         newMessage.add( translate( "Extraneous:\n" ) + enumToString(actual) );
d235 1
a235 1
         std::string item = stringize( enumToStringize.getNext() );
@


1.1
log
@Initial revision
@
text
@d71 2
a72 2
      void getSetDifference( ExpectedSetType &expectedEnum,
                             ActualSetType &actualEnum,
d77 2
d177 1
a177 1
      Impl::getSetDifference( expected.clone(), actual.clone(),
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
