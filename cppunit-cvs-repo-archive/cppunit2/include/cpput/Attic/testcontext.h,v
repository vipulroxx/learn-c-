head	1.10;
access;
symbols
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.8
	TG_BEFORE_REMOVING_TESTCONTEXT:1.7
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.10
date	2004.11.20.15.26.37;	author blep;	state dead;
branches;
next	1.9;

1.9
date	2004.11.20.15.06.59;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.17.21.47.09;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.19.41.19;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.04.19.33.38;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.04.07.55.37;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.04.06.43.53;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.03.22.36.14;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.07.22.40;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@#ifndef CPPUT_TESTCONTEXT_H_INCLUDED
# define CPPUT_TESTCONTEXT_H_INCLUDED

# include <cpput/forwards.h>
# include <cpput/testfailureguard.h>
# include <vector>


namespace CppUT {

class CPPUT_API TestContext
{
public:
   /// Returns \c true if the test was successful, \c false otherwise.
   bool run( AbstractTestCase &test );

   void appendGuard( const TestExceptionGuardPtr &guard );

   void removeLastGuard();

private:
   bool protect( const Functor0 &functor );

private:
   TestExceptionGuardChain guardsChain_;
};


} // namespace CppUT


#endif // CPPUT_TESTCONTEXT_H_INCLUDED
@


1.9
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@@


1.8
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@d11 1
a11 1
class CPPUT_API TestContext : private TestExceptionHandler
d14 2
a15 7
   TestContext();

   void run( AbstractTestCase &test );

   void add( TestListener &listener );

   void remove( TestListener &listener );
d19 1
a19 1
   void removeGuard();
d22 1
a22 9
   bool protect( Test &test,
                 const Functor0 &functor );

   void dispatchTestResult( TestResult &result );

   void dispatchTestSuccessResult( Test &test );

   // overridden from TestExceptionHandler
   void handleResultException( Test &test, const ResultException &e );
a25 5

   typedef std::vector<TestListener *> Listeners;
   Listeners listeners_;

   bool testSucceeded_;
@


1.7
log
@* renamed TestFailureGuard TestExceptionGuard.
@
text
@d16 1
a16 5
   void protectTestRun( Test &test, 
                        Functor1<TestContext *> runTest );

   bool protect( Test &test,
                 const Functor0 &functor );
d27 2
a28 5
   void dispatchTestEvent( Test &test, 
                           void (TestListener::*eventMethod)( Test &, TestContext &) );

   void dispatchSuiteEvent( AbstractTestSuite &suite, 
                            void (TestListener::*eventMethod)( AbstractTestSuite &, TestContext &) ) ;
@


1.6
log
@* renamed TestFailureHandler to TestExceptionHandler.
@
text
@d26 1
a26 1
   void appendGuard( const TestFailureGuardPtr &guard );
d45 1
a45 1
   TestFailureGuardChain guardsChain_;
@


1.5
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d11 1
a11 1
class CPPUT_API TestContext : private TestFailureHandler
d41 1
a41 1
   // overridden from TestFailureHandler
@


1.4
log
@* Replaced TestListener::testFailed() with TestListener::processTestResul(). TestResult can be either success or failure and is mutable: the callback can add structured data to the result.
* TestContext::protectTestRun() assumes test succeeded if no failing TestResult were dispatched during the test.
@
text
@d42 1
a42 3
   void handleAssertion( Test &failedTest, const AssertException &e );

   void handleFault( Test &failedTest, const FaultException &e );
@


1.3
log
@* renamed TestFailure to TestResult (can now be a success or a failure)
* renamed testfailure.h to testresult.h
* renamed testresult.cpp to testtestrunresult.cpp
@
text
@d37 3
a39 1
   void dispatchTestFailure( const TestResult &failure );
d51 2
@


1.2
log
@* integrated TestFailureGuardChain into TestContext
@
text
@d37 1
a37 1
   void dispatchTestFailure( const TestFailure &failure );
@


1.1
log
@Initial revision
@
text
@a3 1
# include <cpput/config.h>
d5 1
a5 2
# include <cpput/functor.h>
# include <cpput/testvisitor.h>
d11 1
a11 1
class CPPUT_API TestContext
d26 1
a26 3
private:
   bool defaultProtect( Functor0 functor,
                        Test &test );
d28 1
a28 5
   void addUncaughtException( Test &test, 
                              const Message &message );

   void addAssertion( Test &test,
                      const AssertException &e );
d30 1
d39 5
d45 2
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
