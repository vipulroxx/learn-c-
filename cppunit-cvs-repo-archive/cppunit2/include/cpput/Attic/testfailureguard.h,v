head	1.14;
access;
symbols
	TG_AFTER_REMOVING_TESTCONTEXT:1.12
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.10
	TG_BEFORE_REMOVING_TESTCONTEXT:1.10;
locks; strict;
comment	@ * @;


1.14
date	2005.02.22.21.26.53;	author blep;	state dead;
branches;
next	1.13;

1.13
date	2005.02.22.21.14.39;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2004.11.20.15.26.37;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.20.15.06.59;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2004.08.04.19.57.12;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.04.19.54.36;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.04.19.41.19;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.19.33.38;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.04.08.01.14;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.04.07.55.37;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.31.10.10.58;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.29.08.41.06;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.07.22.40;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.28.23.13.11;	author blep;	state Exp;
branches;
next	;


desc
@@


1.14
log
@* renamed testfailureguard.h/cpp to exceptionguard.h/cpp
@
text
@#ifndef CPPUT_TESTFAILUREGUARD_H_INCLUDED
# define CPPUT_TESTFAILUREGUARD_H_INCLUDED

# include <cpput/forwards.h>
# include <cpput/functor.h>
# include <deque>

/* Tests setUp(), tearDown(), run() call are protected by a ExceptionGuard.
 *
 * This guard chain ensures that any exceptions thrown by the call is caught and properly handled.
 * The default guard chain handles AssertionException (thrown when an assertion fails),
 * std::exception, and any other exception.
 * 
 * A ExceptionGuardElement can be added to the guard chain to handle exception type unknown
 * to the test framework which are not derived from std::exception (MFC CException * for example).
 */

namespace CppUT {

class CPPUT_API ExceptionGuardElement
{
public:
   struct Context;

   virtual ~ExceptionGuardElement()
   {
   }

   void setNextInChain( const ExceptionGuardElementPtr &deleguate );

   /// Returns \c false if a failure or a fault occurred, \c true otherwise.
   virtual bool protect( Context &context ) = 0;

protected:
   bool callNextInChain( Context &context );

private:
   ExceptionGuardElementPtr deleguate_;
};


/** Helpers to provide simple exception translation.
 */
template<class ExceptionType
        ,class Translator>
class ExceptionTranslatorGuard : public ExceptionGuardElement
{
public:
   ExceptionTranslatorGuard( Translator translator )
      : translator_( translator )
   {
   }

   // overridden from ExceptionGuardElement
   bool protect( Context &context )
   {
      try
      {
         return callNextInChain( context );
      }
      catch ( const ExceptionType &e )
      {
         translator_( e );
         return false;
      }
   }
private:
   Translator translator_;
};


/**
 * @@see registerExceptionTranslation() to easily register custom exception translator.
 */
class CPPUT_API ExceptionGuard
{
public:
   ExceptionGuard();

   void append( const ExceptionGuardElementPtr &guard );

   void removeLast();

   bool protect( Functor0 test ) const;

private:
   typedef std::deque<ExceptionGuardElementPtr> Guards;
   Guards guards_;
};



/** Register an exception translator.
 * @@todo provides some helper to generate faul result...
 * \code
 * static void translateMFCException( CException *e ) {
 *     TCHAR   szCause[255];
 *     ex.GetErrorMessage(szCause, 255);
 *     CString str( szCause );
 *
 *     OpenTest::Properties fault;
 *     fault["type"] = "unexpected exception";
 *     fault["exception_type"] = "CException";
 *     fault["message"].append( (const char *)str );
 *     TestInfo::appendFaultToResult( fault );
 * }    
 * \endcode
 */
template<class Translator
        ,class ExceptionType>
void registerExceptionTranslation( ExceptionGuard &guard,
                                   Translator translator,
                                   CppTL::Type<ExceptionType> )
{
   typedef ExceptionTranslatorGuard<ExceptionType,Translator> GuardType;
   guard.append( ExceptionGuardElementPtr( new GuardType( translator ) ) );
}


} // namespace CppUT

#endif // CPPUT_TESTFAILUREGUARD_H_INCLUDED
@


1.13
log
@* simplified TestExceptionGuard implementation
* renamed TestExceptionGuardChain to ExceptionGuard
* added facility to easily register an exception translator.
@
text
@@


1.12
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@d8 1
a8 1
/* Tests setUp(), tearDown(), run() call are protected by a TestExceptionGuardChain.
d14 1
a14 1
 * A TestExceptionGuard can be added to the guard chain to handle exception type unknown
d20 1
a20 1
class CPPUT_API TestExceptionGuard
d23 3
a25 1
   virtual ~TestExceptionGuard()
d29 1
a29 11
   void setNextInChain( const TestExceptionGuardPtr &deleguate );

   struct Context
   {
      Context( Functor0 test )
         : test_( test )
      {
      }

      Functor0 test_;
   };
d38 1
a38 1
   TestExceptionGuardPtr deleguate_;
d42 5
a46 1
class CPPUT_API TestExceptionGuardChain
d49 4
a52 1
   TestExceptionGuardChain();
d54 25
a78 1
   void appendGuard( const TestExceptionGuardPtr &guard );
d80 3
a82 1
   void removeLastGuard();
d87 1
a87 4
   void connectChain();

private:
   typedef std::deque<TestExceptionGuardPtr> Guards;
d92 28
@


1.11
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@d59 1
a59 1
   bool protect( Functor0 test );
@


1.10
log
@* renamed FailuresPropagationException to TestResultsPropagationException.
@
text
@a4 1
# include <cpput/resultexception.h>
a6 1
# include <stdexcept>
d9 1
a9 1
*
a19 12
// Test fault & assertion failure are forwarded to that handler.
class CPPUT_API TestExceptionHandler
{
public:
   virtual ~TestExceptionHandler()
   {
   }

   virtual void handleResultException( Test &test, const ResultException &e ) = 0;
};


d31 2
a32 6
      Context( TestExceptionHandler &exceptionHandler,
               Functor0 test, 
               Test &protectedTest )
         : exceptionHandler_( exceptionHandler )
         , test_( test )
         , protectedTest_( protectedTest )
a35 1
      TestExceptionHandler &exceptionHandler_;
a36 1
      Test &protectedTest_;
d57 3
a59 1
   void removeGuard();
a60 3
   bool protect( TestExceptionHandler &exceptionHandler,
                 Functor0 test, 
                 Test &protectedTest );
a69 40
class CPPUT_API TestResultsPropagationException : public std::exception
{
public:
   TestResultsPropagationException();

   virtual ~TestResultsPropagationException()	// CPPUT_STD_EXCEPTION_THROW_CLAUSE
   {
   }

   void addResult( Test &test, 
                   const ResultException &e );

   void handleFailures( TestExceptionHandler &handler ) const;

private:
   struct ResultData
   {
      ResultData( Test &test, const ResultException &e )
         : test_( test )
         , exception_( e )
      {
      }

      Test &test_;
      ResultException exception_;
   };

   std::deque<ResultData> results_;
};

/*
class CPPUT_API ThreadGuard : public TestExceptionGuardChain
{
public:
   ThreadGuard();
   ThreadGuard( const TestExceptionGuardChain &other );
};
*/


@


1.9
log
@* inlined TestData template
@
text
@d91 1
a91 1
class CPPUT_API FailuresPropagationException : public std::exception
d94 1
a94 1
   FailuresPropagationException();
d96 1
a96 1
   virtual ~FailuresPropagationException()	// CPPUT_STD_EXCEPTION_THROW_CLAUSE
@


1.8
log
@* renamed TestFailureGuard TestExceptionGuard.
@
text
@a21 16
namespace Impl {
   template<class ExceptionType>
   struct FailureData
   {
      FailureData( Test &failedTest, const ExceptionType &e )
         : failedTest_( failedTest )
         , exception_( e )
      {
      }

      Test &failedTest_;
      ExceptionType exception_;
   };
} // namespace Impl


d106 12
a117 1
   typedef Impl::FailureData<ResultException> ResultData;
@


1.7
log
@* renamed TestFailureHandler to TestExceptionHandler.
@
text
@d10 1
a10 1
/* Tests setUp(), tearDown(), run() call are protected by a TestFailureGuardChain.
d16 1
a16 1
 * A TestFailureGuard can be added to the guard chain to handle exception type unknown
d50 1
a50 1
class CPPUT_API TestFailureGuard
d53 1
a53 1
   virtual ~TestFailureGuard()
d57 1
a57 1
   void setNextInChain( const TestFailureGuardPtr &deleguate );
d82 1
a82 1
   TestFailureGuardPtr deleguate_;
d86 1
a86 1
class CPPUT_API TestFailureGuardChain
d89 1
a89 1
   TestFailureGuardChain();
d91 1
a91 1
   void appendGuard( const TestFailureGuardPtr &guard );
d102 1
a102 1
   typedef std::deque<TestFailureGuardPtr> Guards;
d127 1
a127 1
class CPPUT_API ThreadGuard : public TestFailureGuardChain
d131 1
a131 1
   ThreadGuard( const TestFailureGuardChain &other );
@


1.6
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d39 1
a39 1
class CPPUT_API TestFailureHandler
d42 1
a42 1
   virtual ~TestFailureHandler()
d61 1
a61 1
      Context( TestFailureHandler &failureHandler,
d64 1
a64 1
         : failureHandler_( failureHandler )
d70 1
a70 1
      TestFailureHandler &failureHandler_;
d95 1
a95 1
   bool protect( TestFailureHandler &failureHandler,
d119 1
a119 1
   void handleFailures( TestFailureHandler &handler ) const;
@


1.5
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d5 1
a5 1
# include <cpput/assertexception.h>
@


1.4
log
@* added FailuresPropagationException to propage test failure from multiple threads
@
text
@d46 1
a46 3
   virtual void handleAssertion( Test &failedTest, const AssertException &e ) = 0;

   virtual void handleFault( Test &failedTest, const FaultException &e ) =0;
d116 2
a117 7
   void addAssertion( Test &failedTest, 
                      const AssertException &e );

   void addFault( Test &failedTest, 
                  const FaultException &e );

   bool hasFailures() const;
d122 2
a123 4
   typedef Impl::FailureData<AssertException> AssertionData;
   typedef Impl::FailureData<FaultException> FaultData;
   std::deque<AssertionData> assertions_;
   std::deque<FaultData> faults_;
@


1.3
log
@* fixed bug when appending and removing TestFailureGuard
@
text
@d5 1
d8 1
d22 15
d108 37
@


1.2
log
@* integrated TestFailureGuardChain into TestContext
@
text
@d84 1
a84 1
   void connectLastInChain();
@


1.1
log
@* added TestFailureGuardChain and support classes
@
text
@a70 8
// catch CppUT::AssertionException, std::exception, ...
class CPPUT_API StandardTestFailureGuard : public TestFailureGuard
{
public: // overridden from TestFailureGuard
   bool protect( Context &context );
};


@

