head	1.3;
access;
symbols
	arelease:1.1.1.1 avendor:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.11.17.09.02.40;	author blep;	state dead;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.21;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@#ifndef CPPUT_SMARTPTR_H_INCLUDED
# define CPPUT_SMARTPTR_H_INCLUDED

# include <cpput/config.h>

// We use inheritance instead of the typedef in a struct to
// simulate the template typedef because the typedef in a struct
// trick does not support type deduction in template functions.


// If CPPUT_USE_BOOST_SHARED_PTR is defined, then we use boost::shared_ptr
// as our smart_pointer, otherwise we use a simple (partial) implementation
// of our own.
# ifndef CPPUT_USE_BOOST_SHARED_PTR

#  include <cpput/impl/atomiccounter.h>

namespace CppUT
{

   namespace Impl {

      struct StaticPointerCastTag {};

      /// Smart-pointer base class to avoid template code bloat
      class SmartPtrBase
      {
      public:
         long use_count() const
         {
            if ( count_ )
               return count_->count();
            return 0;
         }

         bool unique() const
         {
            return use_count() == 1;
         }

         operator bool() const
         {
            return p_ != 0;
         }

         bool operator !() const
         {
            return p_ == 0;
         }
      protected:
         SmartPtrBase()
            : p_( 0 )
            , count_( 0 )
         {
         }
         explicit SmartPtrBase( void *p )
            : p_( p )
            , count_( p ? createAtomicCounter( 1 ) : 0 )
         {
         }

         SmartPtrBase( void *p, 
                       AtomicCounter *count, 
                       StaticPointerCastTag )
            : p_( p )
            , count_( count )
         {
            count_->increment();
         }

         SmartPtrBase( const SmartPtrBase &other )
            : p_( other.p_ )
            , count_( other.count_ )
         {
            if ( p_ )
               count_->increment();
         }

         ~SmartPtrBase()
         {
            // subclass destructor should call releaseCount();
         }

         bool releaseCount()
         {
            if ( count_  &&  count_->decrement() == 0 )
            {
               delete count_;
               return true;
            }
            return false;
         }

         void swap( SmartPtrBase &other )
         {
            void *tmpP = p_;
            AtomicCounter *tmpCount = count_;
            p_ = other.p_;
            count_ = other.count_;
            other.p_ = tmpP;
            other.count_ = tmpCount;
         }

         void *get() const
         {
            return p_;
         }

         void *operator ->() const
         {
            // assert( p_ != 0 )
            return p_;
         }

      //private:     // Friend template function is not well supported
                     // Private access required by function staticPointerCast<>
      public:
         void *p_;
         AtomicCounter *count_;
      };

   } // namespace Impl
      
   template<class PointeeType>
   class SmartPtr : public Impl::SmartPtrBase
   {
   public:
      typedef SmartPtr<PointeeType> ThisType; 
      typedef Impl::SmartPtrBase SuperClass;

      SmartPtr()
      {
      }

      explicit SmartPtr( PointeeType *p )
         : Impl::SmartPtrBase( p )
      {
      }

      SmartPtr( PointeeType *p, 
                Impl::AtomicCounter *count, 
                Impl::StaticPointerCastTag )
         : Impl::SmartPtrBase( p, count, Impl::StaticPointerCastTag() )
      {
      }

      SmartPtr( const ThisType &other )
         : Impl::SmartPtrBase( other )
      {
      }

      ~SmartPtr()
      {
         if ( releaseCount() )
            delete p_;
      }

      void reset()
      {
         SmartPtr tmp;
         tmp.swap( *this );
      }

      void reset( PointeeType *p )
      {
         SmartPtr tmp( p );
         tmp.swap( *this );
      }

      PointeeType *get() const
      {
         return static_cast<PointeeType *>( SmartPtrBase::get() );
      }

      void swap( SmartPtr &other )
      {
         SuperClass::swap( other );
      }

      ThisType &operator =( const SmartPtr &other )
      {
         ThisType tmp( other );
         swap( tmp );
         return *this;
      }

      PointeeType &operator *() const
      {
         // assert( p_ != 0 )
         return *( static_cast<PointeeType *>( p_ ) );
      }

      PointeeType *operator ->() const
      {
         return static_cast<PointeeType *>( SuperClass::operator ->() );
      }
   };


   template<class TargetType, class SourceType>
   SmartPtr<TargetType>
   staticPointerCast( const SmartPtr<SourceType> &p )
   {
      TargetType *target = static_cast<TargetType *>( p.p_ );
      return SmartPtr<TargetType>( target, p.count_, 
                                   Impl::StaticPointerCastTag() );
   }

} // namespace CppUT

# else // ifndef CPPUT_USE_BOOST_SHARED_PTR

#  include <boost/shared_ptr.hpp>

namespace CppUT
{

   template<class PointeeType>
   class SmartPtr : public ::boost::shared_ptr<PointeeType>
   {
   public:
      typedef SmartPtr<PointeeType> ThisType; 

      SmartPtr()
      {
      }

      explicit SmartPtr( PointeeType *p )
         : ::boost::shared_ptr( p )
      {
      }

      SmartPtr( const ::boost::shared_ptr<PointeeType> &other )
         : ::boost::shared_ptr( other )
      {
      }

      ThisType &operator =( const ::boost::shared_ptr<PointeeType> &other )
      {
         return ::boost::shared_ptr<PointeeType>::operator =( other );
      }
   };


   template<class T, class U> 
   SmartPtr<T>
   staticPointerCast( const ::boost::shared_ptr<U> & r)
   {
	   return SmartPtr<T>( ::boost::static_pointer_cast<T>( r ) );
   }

} // namespace CppUT

# endif // ifndef CPPUT_USE_BOOST_SHARED_PTR

#endif // CPPUT_SMARTPTR_H_INCLUDED
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@@


1.1
log
@Initial revision
@
text
@d6 3
a8 23

// Forward declare boost::shared_ptr & 
// implement our staticPointerCast for boost::shared_ptr
# ifdef CPPUT_BOOST_FRIENDLY

namespace boost {
  template<class T> class shared_ptr;
} // namespace boost


namespace CppUT {

   template<class T, class U> 
   ::boost::shared_ptr<T>
   staticPointerCast( const ::boost::shared_ptr<U> & r)
   {
	   return ::boost::static_pointer_cast<T>( r );
   }

} // namespace CppUT

# endif // ifdef CPPUT_BOOST_FRIENDLY

d16 2
a20 22
   class AtomicCounter
   {
   public:
      virtual ~AtomicCounter()
      {
      }

      /// Increments the count and returns the incremented count
      virtual long increment() = 0;

      /// Decrements the count and returns the decremented count
      virtual long decrement() = 0;

      /// Returns the current value of the count
      virtual long count() = 0;
   };



   AtomicCounter *makeAtomicCounter( long initialValue );


d24 3
a26 3
      
      template<class PointeeType>
      class SmartPtrImpl
d29 1
a29 3
         SmartPtrImpl()
            : p_( 0 )
            , count_( 0 )
d31 3
d36 1
a36 3
         explicit SmartPtrImpl( PointeeType *p )
            : p_( p )
            , count_( p ? makeAtomicCounter( p, 1 ) : 0 )
d38 1
d41 1
a41 5
         SmartPtrImpl( PointeeType *p, 
                       AtomicCounter *count, 
                       StaticPointerCastTag )
            : p_( p )
            , count_( count )
d43 1
a43 1
            count_->increment;
d46 1
a46 3
         SmartPtrImpl( const SmartPtrImpl &other )
            : p_( other.p_ )
            , count_( other.count _)
d48 1
a48 2
            if ( p_ )
               count_->increment();
d50 4
a53 2

         ~SmartPtrImpl()
a54 5
            if ( count_  &&  count->decrement() == 0 )
            {
               delete p_;
               delete count_;
            }
d56 3
a58 2

         void reset()
a59 2
            SmartPtrImpl tmp;
            tmp.swap( *this );
d62 5
a66 1
         void reset( PointeeType *p )
d68 1
a68 2
            SmartPtrImpl tmp( p );
            tmp.swap( *this );
d71 3
a73 1
         PointeeType *get() const
d75 2
a76 1
            return p_;
d79 1
a79 1
         long use_count() const
d81 1
a81 3
            if ( count_ )
               return count_->count();
            return 0;
d84 1
a84 1
         bool unique() const
d86 6
a91 1
            return use_count() == 1;
d94 1
a94 1
         void swap( SmartPtrImpl &other )
d96 1
a96 1
            PointeeType *tmpP = p_;
d104 1
a104 1
         SmartPtrImpl &operator =( const SmartPtrImpl &other )
d106 1
a106 3
            SmartPtrImpl tmp( other );
            swap( *this, tmp );
            return *this;
d109 1
a109 7
         PointeeType &operator *() const
         {
            // assert( p_ != 0 )
            return *p_;
         }

         PointeeType *operator ->() const
a114 10
         operator bool() const
         {
            return p_ != 0;
         }

         bool operator !() const
         {
            return p_ == 0;
         }

d117 2
a118 1
         PointeeType *p_;
d123 7
d131 8
d140 29
d170 27
a196 4
   template<class PointeeType>
   struct SmartPtr
   {
      typedef Impl::SmartPtrImpl<PointeeType> Ptr;
d199 1
d201 2
a202 2
   Impl::SmartPtrImpl<TargetType>
   staticPointerCast( const Impl::SmartPtrImpl<SourceType> &p )
d205 2
a206 2
      return Impl::SmartPtrImpl<TargetType>( target, p.count_, 
                                             Impl::StaticPointerCastTag );
d209 1
a209 1
// namespace CppUT
d219 1
a219 1
   struct SmartPtr
d221 21
a241 1
      typedef ::boost::shared_ptr<PointeeType> Ptr;
d244 8
d256 1
a256 1
#endif // CPPUT_SMARTPTR_H_INCLUDED@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
