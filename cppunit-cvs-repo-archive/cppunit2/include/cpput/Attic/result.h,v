head	1.3;
access;
symbols
	arelease:1.1.1.1 avendor:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.08.03.22.20.27;	author blep;	state dead;
branches;
next	1.2;

1.2
date	2004.02.01.16.12.51;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* renamed Result to TestRunResult (and cpput/result.h to cpput/testrunresult.h)
@
text
@#ifndef CPPUT_RESULT_H_INCLUDED
# define CPPUT_RESULT_H_INCLUDED

# include <cpput/config.h>
# include <cpput/forwards.h>
# include <cpput/testlistener.h>
# include <cpput/testfailure.h>
# include <deque>

namespace CppUT {

class CPPUT_API Result : public TestListener
{
public:
   int testCount() const
   {
      return int(tests_.size());
   }

   int failureCount() const
   {
      return int(failures_.size());
   }

   const TestFailure &failureAt( int index ) const
   {
#if CPPUT_HAS_VECTOR_AT
      return failures_.at( index );
#else
      return failures_[ index ];
#endif
   }

   bool successful() const
   {
      return failures_.empty();
   }

// overridden from TestListener
   void testFailed( const TestFailure &failure,
                    TestContext &context )
   {
      failures_.push_back( failure );
   }

   void enterTest( Test &test, TestContext &context )
   {
      tests_.push_back( &test );
   }

private:
   typedef std::deque<TestFailure> Failures;
   Failures failures_;

   typedef std::deque<Test *> Tests;
   Tests tests_;
};


} // namespace CppUT



#endif // CPPUT_RESULT_H_INCLUDED
@


1.2
log
@* added /Za setting to project to force conformance to ANSI C++
* fixed issues related to ANSI C++ conformance
* fixed bug in SliceEnumerator copy constructor & added test
@
text
@@


1.1
log
@Initial revision
@
text
@d64 1
a64 1
#endif // CPPUT_RESULT_H_INCLUDED@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
