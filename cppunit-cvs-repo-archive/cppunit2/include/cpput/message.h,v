head	1.12;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.12
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.6
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.5
	TG_AFTER_REMOVING_TESTCONTEXT:1.4
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.3
	TG_BEFORE_REMOVING_TESTCONTEXT:1.3
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.12
date	2006.09.02.11.24.53;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.08.20.25.49;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.22.10.20;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.05.12.21.07;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.28.20.32.52;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.23.21.41.54;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.20.12.12.38;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.04.07.55.37;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.03.22.05.14;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.26;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.26;	author blep;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- added LazyMessage, a simple proxy class that avoid building Message until it is really needed (assertion failed).
@
text
@#ifndef CPPUT_MESSAGE_H_INCLUDED
# define CPPUT_MESSAGE_H_INCLUDED

# include <cpput/forwards.h>
# include <cpptl/conststring.h>
# include <vector>


namespace CppUT {

/*! \brief Carry informative message about a failed assertion.
 * \ingroup group_assertions
 */
class CPPUT_API Message
{
public:
   static Message none;

   Message();

   Message( const CppTL::StringBuffer &shortDescription );

   Message( const CppTL::StringConcatenator &shortDescription );

   Message( const CppTL::ConstString &shortDescription );

   Message( const std::string &shortDescription );

   Message( const char *shortDescription );

   bool empty() const;

   void insertAt( int index, 
                  const char *detail );

   void insertAt( int index, 
                  const std::string &detail );

   void insertAt( int index,
                  const Message &other );

   void add( const char *detail );   // needed to solve ambiguity due to implicit constructor

   void add( const std::string &detail );

   void add( const CppTL::ConstString &detail );

   void extend( const Message &other );

   int count() const;

   std::string at( int index ) const;

   std::string toString() const;

private:
   typedef std::vector<CppTL::ConstString> Details;
   Details details_;
};


class CPPUT_API LazyMessage
{
public:
   static LazyMessage none;

   LazyMessage();

   LazyMessage( const CppTL::StringBuffer &shortDescription );

   LazyMessage( const CppTL::StringConcatenator &shortDescription );

   LazyMessage( const CppTL::ConstString &shortDescription );

   LazyMessage( const std::string &shortDescription );

   LazyMessage( const char *shortDescription );

   LazyMessage( const Message &message );

   Message makeMessage() const;

private:
   union {
      const char *cz_;
      const std::string *stdString_;
      const CppTL::ConstString *constString_;
      const CppTL::StringConcatenator *concatenor_;
      const CppTL::StringBuffer *stringBuffer_;
      const Message *message_;
   } init_;
   enum Kind {
      defaultConstructor = 1,
      constChar,
      stdString,
      constString,
      concatenator,
      buffer,
      message
   };
   Kind kind_;
};

} // namespace CppUT


#endif // CPPUT_MESSAGE_H_INCLUDED

@


1.11
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d4 1
a4 1
# include <cpput/config.h>
a5 1
//# include <opentest/properties.h>
d11 3
d17 15
a31 33
   Message()
   {
   }

   Message( const CppTL::StringBuffer &shortDescription )
   {
      add( shortDescription );
   }

   Message( const CppTL::StringConcatenator &shortDescription )
   {
      add( shortDescription );
   }

   Message( const CppTL::ConstString &shortDescription )
   {
      add( shortDescription );
   }

   Message( const std::string &shortDescription )
   {
      add( shortDescription );
   }

   Message( const char *shortDescription )
   {
      add( shortDescription );
   }

   bool empty() const
   {
      return details_.empty();
   }
d34 1
a34 4
                  const char *detail )
   {
      insertAt( index, std::string(detail) );
   }
d37 1
a37 4
                  const std::string &detail )
   {
      details_.insert( details_.begin() + index, detail );
   }
d40 1
a40 51
                  const Message &other )
   {
      details_.insert( details_.begin() + index, 
                       other.details_.begin(),
                       other.details_.end() );
   }

   void add( const char *detail )   // needed to solve ambiguity due to implicit constructor
   {
      add( CppTL::ConstString(detail) );
   }

   void add( const std::string &detail )
   {
      details_.push_back( detail );
   }

   void add( const CppTL::ConstString &detail )
   {
      details_.push_back( detail );
   }

   void extend( const Message &other )
   {
      insertAt( int(details_.size()), other );
   }

   int count() const
   {
      return int(details_.size());
   }

   std::string at( int index ) const
   {
      return CPPTL_AT( details_, index ).str();
   }

   std::string toString() const
   {
      CppTL::StringBuffer message;
      Details::const_iterator it = details_.begin();
      Details::const_iterator itEnd = details_.end();

      while ( it != itEnd )
      {
         message += *it++;
         message += "\n";

         if ( it != itEnd )
            message += "- ";
      }
d42 13
a54 2
      return message.c_str();
   }
d62 42
@


1.10
log
@* replaced include/opentest/properties.h with include/json/value.h
* replaced all occurrences of OpenTest::Value and OpenTest::Properties with Json::Value.
@
text
@d34 5
d52 1
a52 1
      insertAt( index, CppTL::ConstString(detail) );
d56 1
a56 1
                  const CppTL::ConstString &detail )
d74 5
d94 1
a94 1
   CppTL::ConstString at( int index ) const
d96 1
a96 1
      return CPPTL_AT( details_, index );
d99 1
a99 1
   CppTL::ConstString toString() const
d114 1
a114 1
      return message;
d116 1
a116 9
/*
   OpenTest::Properties asProperties() const
   {
      OpenTest::Properties messages;
      for ( int index =0; index < details_.size(); ++index )
         messages.append( details_[index] );
      return messages;
   }
*/
@


1.9
log
@Rewrote failure reporting during test. It now provides more structure while still providing some flexibility.
@
text
@d6 1
a6 1
# include <opentest/properties.h>
d106 1
a106 1

d114 1
a114 1

@


1.8
log
@* added config macro CPPTL_NO_SSTREAM and CPPTL_NO_STL_SEQUENCE_AT for gcc 2.95
* added portability macro CPPTL_AT to access sequence container portably
@
text
@d6 1
d91 1
a91 1
      CppTL::ConstString message;
d107 7
a113 24
   //Properties &properties()
   //{
   //   return properties_;
   //}

   //const Properties &properties() const
   //{
   //   return properties_;
   //}

   //void setStatus( bool succeeded )
   //{
   //   properties().set( "cpput.status", succeeded );
   //}

   //void setResultType( const CppTL::ConstString &resultType )
   //{
   //   properties().set( "cpput.result_type", resultType );
   //}

   //bool hasResultType() const
   //{
   //   return properties().has( "cpput.result_type" );
   //}
a115 2
   //Properties properties_;

@


1.7
log
@* removed some warnings.
@
text
@d85 1
a85 1
      return details_.at( index );
@


1.6
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d75 1
a75 1
      insertAt( details_.size(), other );
@


1.5
log
@* commented out properties stuff as it will likely be taken over by open test properties.
@
text
@d5 1
a5 2
//# include <opentest/properties.h>
# include <string>
d18 11
a28 1
   Message( const std::string &shortDescription )
d46 1
a46 1
      insertAt( index, std::string(detail) );
d50 1
a50 1
                  const std::string &detail )
d65 1
a65 1
      add( std::string(detail) );
d68 1
a68 1
   void add( const std::string &detail )
d73 1
a73 1
   void add( const Message &other )
d83 1
a83 1
   std::string at( int index ) const
d88 1
a88 1
   std::string toString() const
d90 1
a90 1
      std::string message;
d121 1
a121 1
   //void setResultType( const std::string &resultType )
d134 1
a134 1
   typedef std::vector<std::string> Details;
@


1.4
log
@* removed ambiguity when called insertAt( const char *)
@
text
@d5 1
a5 1
# include <cpput/properties.h>
d97 24
a120 24
   Properties &properties()
   {
      return properties_;
   }

   const Properties &properties() const
   {
      return properties_;
   }

   void setStatus( bool succeeded )
   {
      properties().set( "cpput.status", succeeded );
   }

   void setResultType( const std::string &resultType )
   {
      properties().set( "cpput.result_type", resultType );
   }

   bool hasResultType() const
   {
      return properties().has( "cpput.result_type" );
   }
d123 1
a123 1
   Properties properties_;
@


1.3
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d35 6
@


1.2
log
@* test failure type is now parametrized. The framework recognize 'fault' and 'assertion', but the user can define any failure type.
* properties are now associated to the failure message and can be used to pass any structured data to the test report (such as run time...).
* TestFailure can now be either a success or a failure (need renaming).
* Next step is to send a generic TestResult event to listener, and collect TestResult identically for both successful and failing tests.
@
text
@d101 1
a101 1
   void setFailureType( const std::string &failureType )
d103 11
a113 1
      properties().set( "cpput.failure_type", failureType );
@


1.1
log
@Initial revision
@
text
@d5 1
d91 15
d107 2
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
