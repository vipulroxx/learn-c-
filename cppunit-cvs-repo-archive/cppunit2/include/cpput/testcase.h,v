head	1.16;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.14
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.8
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.7
	TG_AFTER_REMOVING_TESTCONTEXT:1.6
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.5
	TG_BEFORE_REMOVING_TESTCONTEXT:1.4
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2008.07.13.08.19.18;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2007.08.15.11.20.57;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.12.20.55.46;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.09.06.07.14.49;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.07.20.21.06.49;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.27.14.38.26;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.22.21.14.38;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.20.15.26.37;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.17.21.47.09;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.17.08.59.05;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.23.18.45.36;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.21;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.28;	author blep;	state Exp;
branches;
next	;


desc
@@


1.16
log
@- Added core framework for resource handling to test case, resource registry and test info. Not integrated with the test runner and no unit tests yet.
@
text
@#ifndef CPPUT_TESTCASE_H_INCLUDED
# define CPPUT_TESTCASE_H_INCLUDED

# include <cpput/forwards.h>
# include <cpptl/functor.h>
# include <cpput/resource.h>
# include <cpput/test.h>
# include <string>
# include <set>
# include <vector>


namespace CppUT {

/*! \brief An abstract test case that can be run.
 * \ingroup group_testcases
 */
class CPPUT_API AbstractTestCase : public Test
{
public:
   AbstractTestCase( const std::string &name );

   /*! \brief Indicates that the test case requires the specified resource.
    *
    * The specified resource will be acquired before calling setUp() and
    * will be at the earliest after calling tearDown().
    *
    * \param resourceName Name of the resource to acquire.
    * \see ResourceHandlerRegistry, getResource().
    */
   void requireResource( const std::string &resourceName );

   /*! \brief Prepare the acquisition of resource at the beginning of the test run.
    *
    * This must be called at the beginning of the test run for each test case.
    * It allows couting how many time a resource will be used and during
    * the test run, determining when a resource is no longer needed to free it.
    *
    * A ResourceLazyPtr is obtained for each required resource via the
    * ResourceHandlerRegistry.
    */
   void prepareResourceAcquisition();

   /*! \brief Run the test case using the default ExceptionGuard.
    *
    * The default exception guard only detect 
    * 
    */
   bool runTest();

   /*! \brief Run the test case using the specified ExceptionGuard.
    *
    * Call TestInfo::startNewTest() before starting the test.
    * Then, setUp(), run() and finally tearDown() are called. run() is only called
    * if setUp() did not failed (no assertion or exception failed during setUp()
    * call).
    *
    * \param guardsChain Call to setUp(), run() and tearDown() are made through the
    *                    specified exception guard. This allow capturing and extracting
    *                    information for failure report from exception 
    *                    that do not subclass std::exception.
    */
   bool runTest( const ExceptionGuard &guardsChain );

public: // overridden from Test
   void accept( TestVisitor &visitor );

   /// Returns \c true if the class is derived from AbstractTestCase.
   bool isTestCase() const;

// Those member functions are public to allow decoration of setUp/run/tearDown
public:
   virtual void setUp();

   virtual void run() = 0;

   virtual void tearDown();

private:
   /*! \brief Acquires and setup the resource required by the test case.
    * Notes: If you decorate the test case, you must ensure
    * that you also decorate call to acquireTestResource().
    * \return \c true if all resources were acquired, \c false otherwise.
    */
   virtual void acquireTestResources( bool &allResourceAcquired );

   /*! \brief 
    */
   void setUpTestResources();

   void tearDownTestResources();

private:
   typedef std::set<ResourceName> ResourceNames;
   /// Required resource names
   ResourceNames resourceNames_;
   typedef std::vector<ResourceLazyPtr> RequiredResources;
   RequiredResources requiredResources_;
};


/*! \brief A test case that can be run.
 * \ingroup group_testcases
 */
class CPPUT_API TestCase : public AbstractTestCase
{
public:
   TestCase( const CppTL::Functor0 &run,
             const std::string &name );

   TestCase( const CppTL::Functor0 &setUp,
             const CppTL::Functor0 &run,
             const CppTL::Functor0 &tearDown,
             const std::string &name );

public: // overridden from AbstractTestCase
   void setUp();

   void run();

   void tearDown();

private:
   CppTL::Functor0 setUp_;
   CppTL::Functor0 run_;
   CppTL::Functor0 tearDown_;
};



/*! \brief Creates a TestCase with the specified name and run functor.
 * \ingroup group_testcases
 */
TestPtr CPPUT_API makeTestCase( void (*run)(),
                                const std::string &name );


/*! \brief Creates a TestCase with the specified name and run functor.
 * \ingroup group_testcases
 */
TestPtr CPPUT_API makeTestCase( const CppTL::Functor0 &run,
                                const std::string &name );


/*! \brief Creates a TestCase with the specified name and setUp, run, and tearDown functor.
 * \ingroup group_testcases
 */
TestPtr CPPUT_API makeTestCase( const CppTL::Functor0 &setUp,
                                const CppTL::Functor0 &run,
                                const CppTL::Functor0 &tearDown,
                                const std::string &name );

/*! \brief Creates a TestCase with the specified name that will always fail.
 * \ingroup group_testcases
 *
 * The test case run body simply call CPPUT_FAIL() with the specified message.
 *
 * This is useful for example when a TestSuite is created from input data 
 * and those an invalid or inaccessible. A failing test case can be added to
 * the suite to report the error.
 */
TestPtr CPPUT_API makeFailingTestCase( const std::string &name,
                                       const Message &message );

/*! \brief Creates a TestCase using a fixture-like object.
 * \ingroup group_testcases
 *
 * The test case will delegate implementation of AbstractTestCase setUp() and
 * tearDown() to method of the same name on the given \c fixture object.
 */
template<typename FixtureType>
TestPtr makeFixtureTestCase( const CppTL::IntrusivePtr<FixtureType> &fixture,
                             const CppTL::Functor0 &run,
                             const std::string &name )
{
   /// @@todo Use traits to get smart-pointer type and allow for any type of smart-pointer
   return makeTestCase( CppTL::memfn0( fixture, &FixtureType::setUp ),
                        run,
                        CppTL::memfn0( fixture, &FixtureType::tearDown ),
                        name );
}


} // namespace CppUT

#endif // CPPUT_TESTCASE_H_INCLUDED
@


1.15
log
@   Added support for light test fixture (a la CppUnitLite).
See lightfixture.h and example/light_fixture.
   Added support for direct declaration and registration of test in plain C
function. See testfunction.h and example/test_function.
@
text
@d6 1
d9 2
d23 26
d51 2
a52 1
   /*! \brief Run the test case.
d57 5
d71 1
d78 21
@


1.14
log
@- added some documentation
- fixed tabs display in html output.
@
text
@d77 7
@


1.13
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d12 1
a12 1
/*! An abstract test case that can be run.
d45 1
a45 1
/*! A test case that can be run.
d74 1
a74 1
/*! Creates a TestCase with the specified name and run functor.
d81 1
a81 1
/*! Creates a TestCase with the specified name and setUp, run, and tearDown functor.
d89 1
a89 1
/*! Creates a TestCase with the specified name that will always fail.
d101 1
a101 1
/*! Creates a TestCase using a fixture-like object.
@


1.12
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d12 3
a14 1

d45 3
d73 4
d81 3
d89 9
d101 6
a106 1
/// @@todo Use traits to get smart-pointer type and allow for any type of smart-pointer
d112 1
@


1.11
log
@* added CPPTL_ARRAY_SIZE
* added typedef LargestInt and LargestUnsignedInt
@
text
@d16 1
a16 1
   AbstractTestCase( const CppTL::ConstString &name );
d47 1
a47 1
             const CppTL::ConstString &name );
d52 1
a52 1
             const CppTL::ConstString &name );
d69 1
a69 1
                                const CppTL::ConstString &name );
d75 1
a75 1
                                const CppTL::ConstString &name );
d77 1
a77 1
TestPtr CPPUT_API makeFailingTestCase( const CppTL::ConstString &name,
d84 1
a84 1
                             const CppTL::ConstString &name )
@


1.10
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@a17 1
   /// @@warning: TestInfo::startNewTest() must be called before each test
d20 6
a25 1
   /// @@warning: TestInfo::startNewTest() must be called before each test
@


1.9
log
@* changed cppunit 2 to use the new functors (cpptl/functor.h). bind_cfn & bind_memfn simplified some of the test code.
@
text
@a6 1
# include <cpptl/sharedptr.h>
d76 1
d78 1
a78 1
TestPtr makeFixtureTestCase( const CppTL::SharedPtr<FixtureType> &fixture,
@


1.8
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d5 1
a5 1
# include <cpput/functor.h>
d43 1
a43 1
   TestCase( const Functor0 &run,
d46 3
a48 3
   TestCase( const Functor0 &setUp,
             const Functor0 &run,
             const Functor0 &tearDown,
d59 3
a61 3
   Functor0 setUp_;
   Functor0 run_;
   Functor0 tearDown_;
d65 1
a65 1
TestPtr CPPUT_API makeTestCase( const Functor0 &run,
d69 3
a71 3
TestPtr CPPUT_API makeTestCase( const Functor0 &setUp,
                                const Functor0 &run,
                                const Functor0 &tearDown,
d79 1
a79 1
                             const Functor0 &run,
d82 1
a82 1
   return makeTestCase( makeMemFn0<FixtureType>( fixture, &FixtureType::setUp ),
d84 1
a84 1
                        makeMemFn0<FixtureType>( fixture, &FixtureType::tearDown ),
@


1.7
log
@* simplified TestExceptionGuard implementation
* renamed TestExceptionGuardChain to ExceptionGuard
* added facility to easily register an exception translator.
@
text
@d17 1
a17 1
   AbstractTestCase( const std::string &name );
d44 1
a44 1
             const std::string &name );
d49 1
a49 1
             const std::string &name );
d66 1
a66 1
                                const std::string &name );
d72 1
a72 1
                                const std::string &name );
d74 1
a74 1
TestPtr CPPUT_API makeFailingTestCase( const std::string &name,
d80 1
a80 1
                             const std::string &name )
@


1.6
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@d23 1
a23 1
   bool runTest( const TestExceptionGuardChain &guardsChain );
@


1.5
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@a3 1
# include <cpput/config.h>
d19 6
@


1.4
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@d15 1
a15 1
class CPPUT_API AbstractTestCase : public AbstractTest
d20 1
a20 3
// overridden from AbstractTest
   void run( TestContext &context );

d23 2
a24 4
   int totalTestCount() const;

private:
   void runTest( TestContext *context );
d26 1
d29 1
a29 1
   virtual void doRun() = 0;
d46 1
a46 1
private: // overridden from AbstractTestCase
d49 1
a49 1
   void doRun();
@


1.3
log
@* added makeFailingTestCase()
@
text
@d8 1
a8 1
# include <cpput/smartptr.h>
d76 1
a76 1
TestPtr makeFixtureTestCase( const SmartPtr<FixtureType> &fixture,
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d72 3
@


1.1
log
@Initial revision
@
text
@d63 2
a64 2
TestCasePtr CPPUT_API makeTestCase( const Functor0 &run,
                                    const std::string &name );
d67 4
a70 20
TestCasePtr CPPUT_API makeTestCase( const Functor0 &setUp,
                                    const Functor0 &run,
                                    const Functor0 &tearDown,
                                    const std::string &name );

# ifndef CPPUT_USE_BOOST_SHARED_PTR

template<typename FixtureType>
TestCasePtr makeFixtureTestCase( 
			   const Impl::SmartPtrImpl<FixtureType> &fixture,
               const Functor0 &run,
               const std::string &name )
{
   return makeTestCase( makeMemFn0<FixtureType>( fixture, &FixtureType::setUp ),
                        run,
                        makeMemFn0<FixtureType>( fixture, &FixtureType::tearDown ),
                        name );
}

# else // ifndef CPPUT_USE_BOOST_SHARED_PTR
d73 3
a75 4
TestCasePtr makeFixtureTestCase( 
			   const boost::shared_ptr<FixtureType> &fixture,
               const Functor0 &run,
               const std::string &name )
a82 1
# endif
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
