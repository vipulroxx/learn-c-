head	1.22;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.20
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.14
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.13
	TG_AFTER_REMOVING_TESTCONTEXT:1.11
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.11
	TG_BEFORE_REMOVING_TESTCONTEXT:1.9
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.22
date	2008.07.13.08.19.18;	author blep;	state Exp;
branches;
next	1.21;

1.21
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	1.20;

1.20
date	2005.11.08.21.50.33;	author blep;	state Exp;
branches;
next	1.19;

1.19
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.18;

1.18
date	2005.08.10.21.34.29;	author blep;	state Exp;
branches;
next	1.17;

1.17
date	2005.08.06.22.24.53;	author blep;	state Exp;
branches;
next	1.16;

1.16
date	2005.07.20.21.06.49;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2005.02.27.15.47.37;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2005.02.27.10.14.28;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2005.02.26.11.52.22;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2005.02.22.21.14.37;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.18.09.20.34;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.17.21.47.09;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.17.08.59.05;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2004.11.15.08.25.39;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.19.41.19;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.04.19.33.38;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.04.07.55.37;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.22.36.14;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.01.28.23.13.52;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.21;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.26;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.26;	author blep;	state Exp;
branches;
next	;


desc
@@


1.22
log
@- Added core framework for resource handling to test case, resource registry and test info. Not integrated with the test runner and no unit tests yet.
@
text
@#ifndef CPPUT_FORWARDS_H_INCLUDED
# define CPPUT_FORWARDS_H_INCLUDED

# include <cpptl/forwards.h>
# include <cpput/config.h>

namespace CppUT {

class AbortingAssertionException;
class AbstractTestCase;
class AbstractTestSuite;
class Message;
class StandardTestExceptionGuard;
class Test;
class TestCase;
class TestExtendedData;
class TestExtendedDataList;
class ExceptionGuardElement;
class ExceptionGuard;
class TestSuite;
class TestVisitor;

// testinfo.h
class CheckerResult;
class TestInfo;
class TestResultUpdater;

// resource.h
typedef CppTL::Any Resource;
typedef unsigned int ResourceId;
class AcquiredResourceHandle;
class ResourceHandler;
class ResourceHandlerRegistry;
class ResourceInstance;
class ResourceLazyPtr;
typedef CppTL::ConstString ResourceName;

// for ...
typedef CppTL::IntrusivePtr<AbstractTestCase> AbstractTestCasePtr;
typedef CppTL::IntrusivePtr<AbstractTestSuite> AbstractTestSuitePtr;
typedef CppTL::IntrusivePtr<ExceptionGuardElement> ExceptionGuardElementPtr;
typedef CppTL::IntrusivePtr<Test> TestPtr;
typedef CppTL::IntrusivePtr<TestInfo> TestInfoPtr;
typedef CppTL::IntrusivePtr<TestSuite> TestSuitePtr;
typedef CppTL::IntrusivePtr<TestResultUpdater> TestResultUpdaterPtr;

// for resource.h
typedef CppTL::IntrusivePtr<ResourceHandler> ResourceHandlerPtr;
typedef CppTL::IntrusivePtr<ResourceInstance> ResourceInstancePtr;
typedef CppTL::IntrusivePtr<AcquiredResourceHandle> AcquiredResourceHandlePtr;


} // namespace CppUT



#endif // CPPUT_FORWARDS_H_INCLUDED
@


1.21
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@d28 11
d47 5
@


1.20
log
@Now using InstrusivePtr.
@
text
@d20 5
a26 2
class TestSuite;
class TestVisitor;
@


1.19
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d27 1
a27 1
typedef CppTL::SharedPtr<ExceptionGuardElement> ExceptionGuardElementPtr;
@


1.18
log
@* Replaced function in namespace TestInfo by exposing the TestInfoData class and renaming it TestInfo. TestInfo in now an exposed per thread singleton.
* startNewTest() is now called from TestCase::runTest() instead of being the test runner responsability. There still a few call to this method in cpput bootstrap test (which use assertion without run a test case).
@
text
@a33 3
TestSuitePtr CPPUT_API makeTestSuite( const CppTL::ConstString &name );


@


1.17
log
@Added possibility to add test to a fixture and set its description and time-out (and other specifics).
@
text
@d20 1
a20 1
class TestInfoData;
d29 1
a29 1
typedef CppTL::SharedPtr<TestInfoData> TestInfoDataPtr;
d31 1
a31 1
typedef CppTL::SharedPtr<TestResultUpdater> TestResultUpdaterPtr;
@


1.16
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@d16 2
@


1.15
log
@* extracted MiniTestRunner from registry test.
@
text
@d23 2
a24 2
typedef CppTL::SharedPtr<AbstractTestCase> AbstractTestCasePtr;
typedef CppTL::SharedPtr<AbstractTestSuite> AbstractTestSuitePtr;
d26 1
a26 1
typedef CppTL::SharedPtr<Test> TestPtr;
d28 1
a28 1
typedef CppTL::SharedPtr<TestSuite> TestSuitePtr;
@


1.14
log
@* removed unncessary dependencies
@
text
@d23 3
a26 1
typedef CppTL::SharedPtr<ExceptionGuardElement> ExceptionGuardElementPtr;
d28 1
a28 1
typedef CppTL::SharedPtr<AbstractTestSuite> AbstractTestSuitePtr;
a29 1
typedef CppTL::SharedPtr<TestSuite> TestSuitePtr;
@


1.13
log
@* updated to reflect the current content.
@
text
@d4 1
a5 2
# include <cpptl/sharedptr.h>
# include <string>
d31 1
a31 1
TestSuitePtr CPPUT_API makeTestSuite( const std::string &name );
@


1.12
log
@* simplified TestExceptionGuard implementation
* renamed TestExceptionGuardChain to ExceptionGuard
* added facility to easily register an exception translator.
@
text
@a12 4
class AssertException;
class FailureException;
class FaultException;
class Location;
a13 1
class ResultException;
a14 1
class SuccessException;
a16 3
class TestContext;
class TestResult;
class TestExceptionHandler;
a19 1
class TestListener;
@


1.11
log
@* started implementing assertion support for both checking and aborting assertion
* TestInfo to send incremental update on the test result to the test driver (logging...)
@
text
@d26 2
a27 2
class TestExceptionGuard;
class TestExceptionGuardChain;
d35 1
a35 1
typedef CppTL::SharedPtr<TestExceptionGuard> TestExceptionGuardPtr;
@


1.10
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@d10 1
d28 1
d30 1
d36 1
d38 1
@


1.9
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@d10 1
@


1.8
log
@* added forward declaration for AbstractTestSuitePtr
@
text
@d4 2
a5 1
# include <cpput/smartptr.h>
d30 4
a33 4
typedef SmartPtr<Test> TestPtr;
typedef SmartPtr<TestExceptionGuard> TestExceptionGuardPtr;
typedef SmartPtr<AbstractTestSuite> AbstractTestSuitePtr;
typedef SmartPtr<TestSuite> TestSuitePtr;
@


1.7
log
@* renamed TestFailureGuard TestExceptionGuard.
@
text
@d31 1
@


1.6
log
@* renamed TestFailureHandler to TestExceptionHandler.
@
text
@d16 1
a16 1
class StandardTestFailureGuard;
d23 2
a24 2
class TestFailureGuard;
class TestFailureGuardChain;
d30 1
a30 1
typedef SmartPtr<TestFailureGuard> TestFailureGuardPtr;
@


1.5
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d22 1
a22 1
class TestFailureHandler;
@


1.4
log
@* renamed TestFailure to TestResult (can now be a success or a failure)
* renamed testfailure.h to testresult.h
* renamed testresult.cpp to testtestrunresult.cpp
@
text
@d11 1
d15 1
d17 1
@


1.3
log
@* added new classes
@
text
@d18 1
a18 1
class TestFailure;
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d11 1
d14 1
d19 3
d27 1
a27 1
typedef SmartPtr<TestCase> TestCasePtr;
@


1.1
log
@Initial revision
@
text
@d21 3
a23 3
typedef SmartPtr<Test>::Ptr TestPtr;
typedef SmartPtr<TestCase>::Ptr TestCasePtr;
typedef SmartPtr<TestSuite>::Ptr TestSuitePtr;
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
