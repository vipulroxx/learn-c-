head	1.3;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.3
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.2
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.1.1.1
	TG_AFTER_REMOVING_TESTCONTEXT:1.1.1.1
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.1.1.1
	TG_BEFORE_REMOVING_TESTCONTEXT:1.1.1.1
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.29;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.29;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@#ifndef CPPUT_TRANSLATE_H_INCLUDED
# define CPPUT_TRANSLATE_H_INCLUDED

# include <cpput/config.h>
# include <cpptl/conststring.h>


namespace CppUT {

/// Translate the specified message
inline std::string CPPUT_API translate( const char *message )
{
   return message;
}


} // namespace CppUT


#endif // CPPUT_TRANSLATE_H_INCLUDED
@


1.2
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d11 1
a11 1
inline CppTL::ConstString CPPUT_API translate( const char *message )
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
# include <string>
d11 1
a11 1
inline std::string CPPUT_API translate( const char *message )
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
