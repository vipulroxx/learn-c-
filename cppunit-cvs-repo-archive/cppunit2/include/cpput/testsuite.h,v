head	1.9;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.9
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.4
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.3
	TG_AFTER_REMOVING_TESTCONTEXT:1.3
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.3
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.9
date	2006.06.05.12.02.56;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.11.12.20.55.46;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.11.23.23.48;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.20.21.06.49;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.02.27.10.15.41;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.17.21.47.09;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.21;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.29;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.29;	author blep;	state Exp;
branches;
next	;


desc
@@


1.9
log
@* added CppTL:SmallMap, a std::map like container that use a sorted vector to hold item.
@
text
@#ifndef CPPUT_TESTSUITE_H_INCLUDED
# define CPPUT_TESTSUITE_H_INCLUDED

# include <cpput/test.h>
# include <deque>


namespace CppUT {

/*! \brief An abstract test suite that represents a collection of Test.
 * \ingroup group_testcases
 */
class CPPUT_API AbstractTestSuite : public Test
{
public:
   AbstractTestSuite();

   AbstractTestSuite( const std::string &name );

   virtual int testCount() const = 0;

   virtual TestPtr testAt( int index ) const = 0;

public: // overridden from Test
   void accept( TestVisitor &visitor );

   /// Returns \c true if the class is derived from AbstractTestCase.
   bool isTestCase() const;
};


/*! \brief A test suite that represents a collection of Test.
 * \ingroup group_testcases
 */
class CPPUT_API TestSuite : public AbstractTestSuite
{
public:
   TestSuite( const std::string &name );

   void add( const TestPtr &test );

   void add( const TestSuitePtr &test );

// overridden from AbstractTestSuite
   int testCount() const;

   TestPtr testAt( int index ) const;

private:
   typedef std::deque<TestPtr> Tests;
   Tests tests_;
};


/*! \brief Creates a TestSuite with the specified name.
 * \ingroup group_testcases
 */
TestSuitePtr CPPUT_API makeTestSuite( const std::string &name );

} // namespace CppUT



#endif // CPPUT_TESTSUITE_H_INCLUDED
@


1.8
log
@- added some documentation
- fixed tabs display in html output.
@
text
@d50 1
a50 1
    typedef std::deque<TestPtr> Tests;
@


1.7
log
@Rough documentation: placed most function/class/macro in group.
@
text
@d10 1
a10 1
/*! An abstract test suite that represents a collection of Test.
d32 1
a32 1
/*! A test suite that represents a collection of Test.
d55 1
a55 1
/*! Creates a TestSuite with the specified name.
@


1.6
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d10 3
d32 3
a34 1

d55 3
@


1.5
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@d15 1
a15 1
   AbstractTestSuite( const CppTL::ConstString &name );
d33 1
a33 1
   TestSuite( const CppTL::ConstString &name );
d50 1
a50 1
TestSuitePtr CPPUT_API makeTestSuite( const CppTL::ConstString &name );
@


1.4
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@a36 2
// notes: should we defines this only if smart-pointer does not
// have templated constructor ?
@


1.3
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@d15 1
a15 1
   AbstractTestSuite( const std::string &name );
d33 1
a33 1
   TestSuite( const std::string &name );
d52 1
a52 1
TestSuitePtr CPPUT_API makeTestSuite( const std::string &name );
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d10 1
a10 1
class CPPUT_API AbstractTestSuite : public AbstractTest
d21 1
a21 1
// overridden from AbstractTest
d24 2
a25 6
   void run( TestContext &context );

   int totalTestCount() const;

private:
   virtual void runTests( TestContext *context ) = 0;
d47 1
a47 3
   void runTests( TestContext *context );

   typedef std::deque<TestPtr> Tests;
@


1.1
log
@Initial revision
@
text
@d41 4
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
