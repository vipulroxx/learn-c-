head	1.8;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.7
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.2
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.1;
locks; strict;
comment	@ * @;


1.8
date	2008.07.13.08.09.52;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2006.06.05.12.02.56;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.07.20.21.06.49;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.04.08.09.30;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.03.20.48.54;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.27.14.38.25;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.27.10.14.03;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.26.13.44.14;	author blep;	state Exp;
branches;
next	;


desc
@@


1.8
log
@- Added any.h to forwards.
@
text
@#ifndef CPPTL_FORWARDS_H_INCLUDED
# define CPPTL_FORWARDS_H_INCLUDED

# include <cpptl/config.h>

namespace CppTL {

// any.h
class Any;
class AnyBadCast;

// atomiccounter.h
class AtomicCounter;

// conststring.h
class ConstCharView;
class ConstString;
class StringBuffer;
class StringConcatenator;

// enumerator.h
template<class ValueType>
class AnyEnumerator;

// functor.h
class Functor0;
template<class ReturnType> 
class Functor0R;

// intrusiveptr.h
class IntrusiveCount;
template<class PointeeType>
class IntrusivePtr;

// reflection.h
class Attribut;
class Class;
class Method;

// scopedptr.h
template<class PointeeType>
class ScopedPtr;
template<class PointeeType>
class ScopedArray;

// sharedptr.h
template<class PointeeType>
class SharedPtr;

// _stlimpl.h
template<class T>
class MallocAllocator;

template<class T>
struct LessPred;

} // namespace CppTL



#endif // CPPTL_FORWARDS_H_INCLUDED
@


1.7
log
@* added CppTL:SmallMap, a std::map like container that use a sorted vector to hold item.
@
text
@d8 4
@


1.6
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@d46 3
d50 2
@


1.5
log
@* updated forward declarations
* ScopedPtr and SharedPtr now use checked delete (check if type is complete)
* added checkedDelete() and checkedArrayDelete() to config.h
* added ScopedPtr and ScopedArray.
@
text
@d26 5
@


1.4
log
@* moved reflection implementation details in Impl namespace
* added reflection support for attribut
@
text
@d12 1
d15 1
a20 4
// sharedptr.h
template<class PointeeType>
class SharedPtr;

d31 10
@


1.3
log
@* changed cppunit 2 to use the new functors (cpptl/functor.h). bind_cfn & bind_memfn simplified some of the test code.
@
text
@d28 6
@


1.2
log
@* added ConstString and StringBuffer
@
text
@d25 2
@


1.1
log
@* added simple ConstString implementation
@
text
@d13 1
@

