head	1.3;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.3;
locks; strict;
comment	@ * @;


1.3
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.06.18.36.46;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.28.21.36.20;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@#ifndef CPPTL_TYPENAME_H_INCLUDED
# define CPPTL_TYPENAME_H_INCLUDED

# include <cpptl/forwards.h>
# include <cpptl/conststring.h>
# ifndef CPPTL_NO_RTTI
#  include <cpptl/stringtools.h>
#  include <typeinfo>
# endif

// AIX: demangle library
// http://publib.boulder.ibm.com/infocenter/pseries/index.jsp?topic=/com.ibm.vacpp7a.doc/proguide/ref/demangle.htm

namespace CppTL {

# ifndef CPPTL_NO_RTTI
   inline std::string CPPUT_API 
   demangleTypeInfoName( const std::type_info &type )
   {
      CppTL::ConstString typeName( type.name() );
      const int classKeywordLength = 6;
      size_type startIndex = 0;
      if ( typeName.substr( 0, classKeywordLength ) == "class " )
         startIndex = classKeywordLength;
      while ( startIndex < typeName.length()  &&  isDigit( typeName[startIndex] ) )
         ++startIndex;
      return typeName.substr(startIndex).str();
   }
#endif

   template<class AType>
   std::string getTypeName( CppTL::Type<AType>, 
                            const char *hint )
   {
# ifndef CPPTL_NO_RTTI
      return demangleTypeInfoName( typeid( AType ) );
# else
      return hint;
# endif
   }


   template<typename Object>
   std::string getObjectTypeName( const Object &object,
                                  const char *hint )
   {
# ifndef CPPTL_NO_RTTI
      return demangleTypeInfoName( typeid(object) );
# else
      return hint;
# endif
   }

} // namespace CppUT


#endif // CPPTL_TYPENAME_H_INCLUDED
@


1.2
log
@* added reference to AIX demangle API.
@
text
@d17 1
a17 1
   inline CppTL::ConstString CPPUT_API 
d27 1
a27 1
      return typeName.substr(startIndex);
d32 2
a33 2
   CppTL::ConstString getTypeName( CppTL::Type<AType>, 
                                   const char *hint )
d44 2
a45 2
   CppTL::ConstString getObjectTypeName( const Object &object,
                                         const char *hint )
@


1.1
log
@* moved cpput/typehelper.h to cpptl/typename.h
* renamed helper functions: getObjectTypeName(), getTypeName() and demangleTypeInfoName()
* With mingw, typeinfo name is correctly extracted (skip initial digits)
* added automatic detection of the presence of RTTI with msvc.
@
text
@d11 3
@

