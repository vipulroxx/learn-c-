head	1.2;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.2
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.1
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.1;
locks; strict;
comment	@# @;


1.2
date	2005.07.02.20.27.35;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.27.09.53.20;	author blep;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* Added a simple test runner that does not rely on the open test framework to run cppunit2 tests.
* added CppTL::ConstCharView to wrapper const char *strings.
* added CppTL::quoteMultiLineString()
* string assertion output actual and expected using quoteMultiLineString().
* added serialize unit test for basic Properties
* opentest tests now use the LightTestRunner.
@
text
@source = """inline CppTL::StringConcatenator 
operator +( %sleft, %sright ) {
   return CppTL::StringConcatenator( left, right );
}
"""
csz = 'const char *'
std_string = 'const std::string &'
types = [ csz, "const CppTL::ConstString &", "const CppTL::StringConcatenator &", "const CppTL::StringBuffer &", "const CppTL::ConstCharView &" ]
for left in xrange(0,len(types)):
    start = (left == 0) and 1 or 0
    for right_type in types[start:]:
        print  source % ( types[left], right_type )
    print

print '# ifndef CPPTL_CONSTSTRING_NO_STDSTRING'
types = types[1:] + [std_string]
for left_type in types:
    for right_type in types:
        if (left_type != std_string and right_type != std_string) or left_type == right_type:
            continue
        print  source % ( left_type, right_type )
print '# endif'
@


1.1
log
@* small generator for operator + implementation.
@
text
@d8 1
a8 1
types = [ csz, "const CppTL::ConstString &", "const CppTL::StringConcatenator &", "const CppTL::StringBuffer &" ]
@

