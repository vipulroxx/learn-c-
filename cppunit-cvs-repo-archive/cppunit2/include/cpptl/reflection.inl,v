head	1.6;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.5;
locks; strict;
comment	@# @;


1.6
date	2007.08.16.15.51.04;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.05.13.44.50;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.04.22.18.14;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.03.20.48.54;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.03.08.14.23;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@   Added initial support for column fixture supported by fitness. Still missing
automatic type convertion and correct reporting of error with regard to
originating cell.
@
text
@#ifndef CPPTL_REFLECTION_INL_INCLUDED
# define CPPTL_REFLECTION_INL_INCLUDED

namespace CppTL {

// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////
// Class Class
// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////

   inline
   Class &
   Class::create( const ConstString &name,
                  TypeId type )
   {
      ClassPtr class_( new Class( name, type ) );
      registry()[ name ] = class_;
      return *class_;
   }

   inline
   const Class *
   Class::findClass( const ConstString &name )
   {
      ClassesByName::const_iterator it = registry().find( name );
      if ( it == registry().end() )
         return 0;
      return it->second.get();
   }

   inline
   Class::Class( const ConstString &name,
                 TypeId type )
      : name_( name )
      , type_( type )
   {
   }

   inline
   Class::ClassesByName &
   Class::registry()
   {
      static ClassesByName classes_;
      return classes_;
   }

   inline
   ConstString 
   Class::getName() const
   {
      return name_;
   }

   inline
   const Method *
   Class::findMethod( const ConstString &name ) const
   {
      MethodsByName::const_iterator it = methodsByName_.find( name );
      if ( it == methodsByName_.end() )
         return 0;
      return it->second.get();
   }

   inline
   void 
   Class::addMethod( const ConstString &name, 
                     const Impl::Invokable &invokable )
   {
      MethodPtr method( new Method( name, invokable ) );
      methodsByName_[name] = method;
   }

   inline
   const Attribut *
   Class::findAttribut( const ConstString &name ) const
   {
      AttributsByName::const_iterator it = attributsByName_.find( name );
      if ( it == attributsByName_.end() )
         return 0;
      return it->second.get();
   }


   inline
   void 
   Class::addAttribut( const ConstString &name, 
                       const Impl::AttributAccessorPtr &accessor )
   {
      AttributPtr attribut( new Attribut( name, accessor ) );
      attributsByName_[name] = attribut;
   }

// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////
// Class Method
// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////

inline
Method::Method( const ConstString &name,
                const Impl::Invokable &invokable )
   : name_( name )
   , invokable_( invokable )
{
}


inline
Any
Method::invoke( const Any &object,
                const MethodParameters &args ) const
{
   Any result;
   Impl::MethodCall call( *this, object, args, result );
   invokable_.invoke( call );
   return result;
}


inline
ConstString 
Method::getName() const
{
   return name_;
}


inline
size_type 
Method::getArgCount() const
{
   return size_type(invokable_.argTypes_.size());
}


inline
TypeId 
Method::getArgType( size_type index ) const
{
   return CPPTL_AT( invokable_.argTypes_, index);
}


inline
TypeId 
Method::getReturnType() const
{
   return typeId( Type<void>() );
}


inline
AnyEnumerator<TypeId> 
Method::getArgTypes() const
{
   return Enum::anyContainer( invokable_.argTypes_, Type<TypeId>() );
}


// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////
// Class Attribut
// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////

inline
Attribut::Attribut( const ConstString &name,
                    const Impl::AttributAccessorPtr &accessor )
   : name_( name )
   , accessor_( accessor )
{
}


inline
ConstString 
Attribut::getName() const
{
   return name_;
}


inline
TypeId 
Attribut::getType() const
{
   return accessor_->getType();
}


inline
void 
Attribut::set( const Any &object, 
               const Any &value ) const
{
   accessor_->set( object, value );
}


inline
Any 
Attribut::get( const Any &object ) const
{
   return accessor_->get( object );
}


// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////
// Class Invokable
// //////////////////////////////////////////////////////////////////
// //////////////////////////////////////////////////////////////////

/// \cond implementation_detail
namespace Impl {

   inline
   Invokable::Invokable( const InvokableBasePtr &invokable )
      : invokable_( invokable )
      , returnType_( typeId( Type<void>() ) )
   {
   }

   inline
   void 
   Invokable::invoke( MethodCall &call ) const
   {
      invokable_->invoke( call );
   }

} // namespace Impl
/// \endcond


} // namespace CppTL


#endif // CPPTL_REFLECTION_INL_INCLUDED
@


1.5
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d133 1
a133 1
   return invokable_.argTypes_.size();
@


1.4
log
@* added portability macro CPPTL_AT to access sequence container portably
@
text
@d215 1
d233 3
@


1.3
log
@* fixed bad return statement in void Functor.
@
text
@d141 1
a141 1
   return invokable_.argTypes_.at(index);
@


1.2
log
@* moved reflection implementation details in Impl namespace
* added reflection support for attribut
@
text
@d197 1
a197 1
   return accessor_->set( object, value );
@


1.1
log
@* Simple reflection support
@
text
@d4 1
a4 1
namespace CppTL { namespace Reflect {
d68 1
a68 1
                     const Invokable &invokable )
d74 20
d102 1
a102 1
                const Invokable &invokable )
d110 1
a110 1
void 
d112 1
a112 2
                const ArgValues &args,
                Any &result ) const
d114 2
a115 1
   MethodCall call( *this, object, args, result );
d117 1
d160 1
d163 1
a163 1
// Class Invokable
d168 19
a186 3
Invokable::Invokable( const InvokableBasePtr &invokable )
   : invokable_( invokable )
   , returnType_( typeId( Type<void>() ) )
d188 1
d191 1
d194 2
a195 1
Invokable::invoke( MethodCall &call ) const
d197 1
a197 1
   invokable_->invoke( call );
d200 33
a232 1
} } // namespace CppTL { namespace Reflect {
@

