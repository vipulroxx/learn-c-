head	1.4;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.4;
locks; strict;
comment	@ * @;


1.4
date	2005.03.05.13.44.50;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.05.10.15.12;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.03.05.09.41.00;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.04.07.30.32;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@* added portability macro CPPTL_AT to access sequence container portably
@
text
@// This script is generated by the python script reflectionimpl.py
// Do not edit.
#ifndef CPPTL_REFLECTIONIMPL10_H_INCLUDED
# define CPPTL_REFLECTIONIMPL10_H_INCLUDED

namespace CppTL { namespace Impl {

   template< class Object >
   class Invokable0 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)(  );

      Invokable0( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return >
   class Invokable0R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)(  );

      Invokable0R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object >
   class InvokableConst0 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)(  ) const;

      InvokableConst0( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return >
   class InvokableConst0R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)(  ) const;

      InvokableConst0R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)(  );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1 >
   class Invokable1 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1 );

      Invokable1( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1 >
   class Invokable1R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1 );

      Invokable1R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1 >
   class InvokableConst1 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1 ) const;

      InvokableConst1( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1 >
   class InvokableConst1R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1 ) const;

      InvokableConst1R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2 >
   class Invokable2 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2 );

      Invokable2( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2 >
   class Invokable2R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2 );

      Invokable2R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2 >
   class InvokableConst2 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2 ) const;

      InvokableConst2( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2 >
   class InvokableConst2R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2 ) const;

      InvokableConst2R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3 >
   class Invokable3 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3 );

      Invokable3( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
   class Invokable3R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3 );

      Invokable3R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3 >
   class InvokableConst3 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3 ) const;

      InvokableConst3( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
   class InvokableConst3R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3 ) const;

      InvokableConst3R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class Invokable4 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 );

      Invokable4( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
   class Invokable4R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4 );

      Invokable4R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class InvokableConst4 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 ) const;

      InvokableConst4( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
   class InvokableConst4R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4 ) const;

      InvokableConst4R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class Invokable5 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 );

      Invokable5( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class Invokable5R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 );

      Invokable5R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class InvokableConst5 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const;

      InvokableConst5( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class InvokableConst5R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const;

      InvokableConst5R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class Invokable6 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 );

      Invokable6( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class Invokable6R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 );

      Invokable6R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class InvokableConst6 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const;

      InvokableConst6( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class InvokableConst6R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const;

      InvokableConst6R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class Invokable7 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 );

      Invokable7( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class Invokable7R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 );

      Invokable7R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class InvokableConst7 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const;

      InvokableConst7( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class InvokableConst7R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const;

      InvokableConst7R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class Invokable8 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 );

      Invokable8( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class Invokable8R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 );

      Invokable8R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class InvokableConst8 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const;

      InvokableConst8( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class InvokableConst8R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const;

      InvokableConst8R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class Invokable9 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 );

      Invokable9( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class Invokable9R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 );

      Invokable9R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class InvokableConst9 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const;

      InvokableConst9( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class InvokableConst9R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const;

      InvokableConst9R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class Invokable10 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 );

      Invokable10( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class Invokable10R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 );

      Invokable10R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class InvokableConst10 : public InvokableBase
   {
   public:
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const;

      InvokableConst10( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   
   template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class InvokableConst10R : public InvokableBase
   {
   public:
      typedef Return (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const;

      InvokableConst10R( Member member )
         : member_( member )
      {
      }

      void invoke( MethodCall &call ) const
      {
         Object &object = *any_cast( call.holder_, Type<Object *>() );
         call.result_ = (object.*member_)( any_cast( CPPTL_AT( call.args_, 0 ), Type<Arg1>() )
            ,any_cast( CPPTL_AT( call.args_, 1 ), Type<Arg2>() )
            ,any_cast( CPPTL_AT( call.args_, 2 ), Type<Arg3>() )
            ,any_cast( CPPTL_AT( call.args_, 3 ), Type<Arg4>() )
            ,any_cast( CPPTL_AT( call.args_, 4 ), Type<Arg5>() )
            ,any_cast( CPPTL_AT( call.args_, 5 ), Type<Arg6>() )
            ,any_cast( CPPTL_AT( call.args_, 6 ), Type<Arg7>() )
            ,any_cast( CPPTL_AT( call.args_, 7 ), Type<Arg8>() )
            ,any_cast( CPPTL_AT( call.args_, 8 ), Type<Arg9>() )
            ,any_cast( CPPTL_AT( call.args_, 9 ), Type<Arg10>() ) );
      }

   private:
      Member member_;
   };
   


template< class Arg>
void setReturnType( Invokable &invokable, Type<Arg> )
{
   invokable.returnType_ = typeId( Type<Arg>() );
}

template< class Arg1 >
void registerArgTypes( Invokable &invokable, Type<Arg1> )
{
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
}

template< class Arg1, class Arg2 >
void registerArgTypes( Invokable &invokable, Type<Arg1>, Type<Arg2> )
{
   registerArgTypes( invokable, Type<Arg1>() );
   registerArgTypes( invokable, Type<Arg2>() );

}

template< class Arg1, class Arg2, class Arg3 >
void registerArgTypes( Invokable &invokable, Type<Arg1>, Type<Arg2>, Type<Arg3> )
{
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   registerArgTypes( invokable, Type<Arg3>() );

}



template< class Object >
Invokable makeInvokable( void (Object::*member)(  ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable0< Object >( member ) ) );
   return invokable;
}

template< class Object, class Return >
Invokable makeInvokableR( Return (Object::*member)(  ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable0R< Object, Return >( member ) ) );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object >
Invokable makeInvokable( void (Object::*member)(  ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst0< Object >( member ) ) );
   return invokable;
}

template< class Object, class Return >
Invokable makeInvokableR( Return (Object::*member)(  ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst0R< Object, Return >( member ) ) );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1 >
Invokable makeInvokable( void (Object::*member)( Arg1 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable1< Object, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   return invokable;
}

template< class Object, class Return, class Arg1 >
Invokable makeInvokableR( Return (Object::*member)( Arg1 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable1R< Object, Return, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1 >
Invokable makeInvokable( void (Object::*member)( Arg1 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst1< Object, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   return invokable;
}

template< class Object, class Return, class Arg1 >
Invokable makeInvokableR( Return (Object::*member)( Arg1 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst1R< Object, Return, Arg1 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable2< Object, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable2R< Object, Return, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst2< Object, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst2R< Object, Return, Arg1, Arg2 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable3< Object, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable3R< Object, Return, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst3< Object, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst3R< Object, Return, Arg1, Arg2, Arg3 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable4< Object, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable4R< Object, Return, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst4< Object, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst4R< Object, Return, Arg1, Arg2, Arg3, Arg4 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable5< Object, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable5R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst5< Object, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst5R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable6< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable6R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst6< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst6R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable7< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable7R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst7< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst7R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable8< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable8R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst8< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst8R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable9< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable9R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst9< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst9R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable10< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) )
{
   Invokable invokable( InvokableBasePtr( new Invokable10R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}

template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokable( void (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst10< Object, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   return invokable;
}

template< class Object, class Return, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
Invokable makeInvokableR( Return (Object::*member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const )
{
   Invokable invokable( InvokableBasePtr( new InvokableConst10R< Object, Return, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 >( member ) ) );
   registerArgTypes( invokable, Type<Arg1>(), Type<Arg2>(), Type<Arg3>() );
   registerArgTypes( invokable, Type<Arg4>(), Type<Arg5>(), Type<Arg6>() );
   registerArgTypes( invokable, Type<Arg7>(), Type<Arg8>(), Type<Arg9>() );
   registerArgTypes( invokable, Type<Arg10>() );
   setReturnType( invokable, Type<Return>() );
   return invokable;
}


} // namespace Impl
} // namespace CppTL

#endif // CPPTL_REFLECTIONIMPL10_H_INCLUDED
@


1.3
log
@* added support for reflection of method with return value
@
text
@d106 1
a106 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() ) );
d127 1
a127 1
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() ) );
d148 1
a148 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() ) );
d169 1
a169 1
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() ) );
d190 2
a191 2
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() ) );
d212 2
a213 2
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() ) );
d234 2
a235 2
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() ) );
d256 2
a257 2
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() ) );
d278 3
a280 3
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() ) );
d301 3
a303 3
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() ) );
d324 3
a326 3
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() ) );
d347 3
a349 3
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() ) );
d370 4
a373 4
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d394 4
a397 4
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d418 4
a421 4
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d442 4
a445 4
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d466 5
a470 5
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d491 5
a495 5
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d516 5
a520 5
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d541 5
a545 5
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d566 6
a571 6
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d592 6
a597 6
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d618 6
a623 6
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d644 6
a649 6
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d670 7
a676 7
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d697 7
a703 7
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d724 7
a730 7
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d751 7
a757 7
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d778 8
a785 8
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d806 8
a813 8
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d834 8
a841 8
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d862 8
a869 8
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d890 9
a898 9
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d919 9
a927 9
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d948 9
a956 9
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d977 9
a985 9
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d1006 10
a1015 10
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() )
            ,any_cast( call.args_.at(9), Type<Arg10>() ) );
d1036 10
a1045 10
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() )
            ,any_cast( call.args_.at(9), Type<Arg10>() ) );
d1066 10
a1075 10
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() )
            ,any_cast( call.args_.at(9), Type<Arg10>() ) );
d1096 10
a1105 10
         call.result_ = (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
            ,any_cast( call.args_.at(1), Type<Arg2>() )
            ,any_cast( call.args_.at(2), Type<Arg3>() )
            ,any_cast( call.args_.at(3), Type<Arg4>() )
            ,any_cast( call.args_.at(4), Type<Arg5>() )
            ,any_cast( call.args_.at(5), Type<Arg6>() )
            ,any_cast( call.args_.at(6), Type<Arg7>() )
            ,any_cast( call.args_.at(7), Type<Arg8>() )
            ,any_cast( call.args_.at(8), Type<Arg9>() )
            ,any_cast( call.args_.at(9), Type<Arg10>() ) );
@


1.2
log
@* added support for reflection of const methods
* factorised parameter type registration for better template function reuse.
@
text
@d29 21
d71 21
d113 21
d155 21
d198 22
d242 22
d287 23
d324 374
a697 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d699 5
a703 1
            ,any_cast( call.args_.at(2), Type<Arg3>() ) );
d710 2
a711 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class Invokable4 : public InvokableBase
d714 1
a714 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 );
d716 1
a716 1
      Invokable4( Member member )
d727 4
a730 1
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d737 2
a738 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4 >
   class InvokableConst4 : public InvokableBase
d741 1
a741 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4 ) const;
d743 1
a743 1
      InvokableConst4( Member member )
d751 1
a751 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d754 4
a757 1
            ,any_cast( call.args_.at(3), Type<Arg4>() ) );
d764 2
a765 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class Invokable5 : public InvokableBase
d768 1
a768 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 );
d770 1
a770 1
      Invokable5( Member member )
d782 4
a785 1
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d792 2
a793 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5 >
   class InvokableConst5 : public InvokableBase
d796 1
a796 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5 ) const;
d798 1
a798 1
      InvokableConst5( Member member )
d806 1
a806 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d810 4
a813 1
            ,any_cast( call.args_.at(4), Type<Arg5>() ) );
d820 2
a821 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class Invokable6 : public InvokableBase
d824 1
a824 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 );
d826 1
a826 1
      Invokable6( Member member )
d839 3
a841 1
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d848 2
a849 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6 >
   class InvokableConst6 : public InvokableBase
d852 1
a852 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6 ) const;
d854 1
a854 1
      InvokableConst6( Member member )
d862 1
a862 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d867 3
a869 1
            ,any_cast( call.args_.at(5), Type<Arg6>() ) );
d876 2
a877 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class Invokable7 : public InvokableBase
d880 1
a880 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 );
d882 1
a882 1
      Invokable7( Member member )
d896 3
a898 1
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d905 2
a906 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7 >
   class InvokableConst7 : public InvokableBase
d909 1
a909 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7 ) const;
d911 1
a911 1
      InvokableConst7( Member member )
d919 1
a919 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d925 3
a927 1
            ,any_cast( call.args_.at(6), Type<Arg7>() ) );
d934 2
a935 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class Invokable8 : public InvokableBase
d938 1
a938 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 );
d940 1
a940 1
      Invokable8( Member member )
d955 2
a956 1
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d963 2
a964 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8 >
   class InvokableConst8 : public InvokableBase
d967 1
a967 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8 ) const;
d969 1
a969 1
      InvokableConst8( Member member )
d977 1
a977 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d984 2
a985 1
            ,any_cast( call.args_.at(7), Type<Arg8>() ) );
d992 2
a993 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class Invokable9 : public InvokableBase
d996 1
a996 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 );
d998 1
a998 1
      Invokable9( Member member )
d1014 2
a1015 1
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d1022 2
a1023 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9 >
   class InvokableConst9 : public InvokableBase
d1026 1
a1026 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9 ) const;
d1028 1
a1028 1
      InvokableConst9( Member member )
d1036 1
a1036 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d1044 2
a1045 1
            ,any_cast( call.args_.at(8), Type<Arg9>() ) );
d1053 1
a1053 1
   class Invokable10 : public InvokableBase
d1056 1
a1056 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 );
d1058 1
a1058 1
      Invokable10( Member member )
d1082 2
a1083 2
   template< class Object, class Arg1, class Arg2, class Arg3, class Arg4, class Arg5, class Arg6, class Arg7, class Arg8, class Arg9, class Arg10 >
   class InvokableConst10 : public InvokableBase
d1086 1
a1086 1
      typedef void (Object::*Member)( Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10 ) const;
d1088 1
a1088 1
      InvokableConst10( Member member )
d1096 1
a1096 1
         (object.*member_)( any_cast( call.args_.at(0), Type<Arg1>() )
d1114 5
d1148 2
d1151 5
d1163 2
d1166 5
d1179 2
d1182 6
d1196 2
d1199 6
d1213 2
d1216 6
d1230 2
d1233 6
d1247 2
d1250 6
d1264 2
d1267 6
d1282 2
d1285 7
d1301 2
d1304 7
d1320 2
d1323 7
d1339 2
d1342 7
d1358 2
d1361 7
d1377 2
d1380 7
d1397 2
d1400 8
d1418 2
d1421 8
d1439 2
d1442 8
d1460 2
d1463 8
d1481 2
d1484 8
d1502 2
d1505 8
d1524 2
d1527 9
d1547 2
d1550 9
@


1.1
log
@* extracted invokable subclass in a specific generated header.
@
text
@d29 21
d71 21
d114 22
d159 23
d206 24
d255 25
d306 26
d359 27
d414 28
d471 29
d530 54
d595 8
d607 11
a617 1
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
d625 11
a635 2
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
d643 11
a653 3
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
d661 13
a673 4
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
d681 13
a693 5
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
d701 13
a713 6
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg6>() ) );
d721 15
a735 7
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg6>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg7>() ) );
d743 15
a757 8
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg6>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg7>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg8>() ) );
d765 15
a779 9
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg6>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg7>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg8>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg9>() ) );
d787 17
a803 10
   invokable.argTypes_.push_back( typeId( Type<Arg1>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg2>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg3>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg4>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg5>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg6>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg7>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg8>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg9>() ) );
   invokable.argTypes_.push_back( typeId( Type<Arg10>() ) );
@

