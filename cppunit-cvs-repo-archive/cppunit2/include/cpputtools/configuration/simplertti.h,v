head	1.1;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.1
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.1
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.1
	TG_AFTER_REMOVING_TESTCONTEXT:1.1
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.1
	TG_BEFORE_REMOVING_TESTCONTEXT:1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.06.14.23.31.25;	author blep;	state Exp;
branches;
next	;


desc
@@


1.1
log
@* adding cpputtools library, command line options among other thing (for test runners). In progress.
@
text
@#ifndef CPPUTTOOLS_CONFIGURATION_SIMPLERTTI_H_INCUDED
# define CPPUTTOOLS_CONFIGURATION_SIMPLERTTI_H_INCUDED

# include "errors.h"
# include <typeinfo>

namespace CppUTTools { namespace CommandLineOptions {

typedef const std::type_info *OptionTypeId;

template<class TheType>
struct Type {};

template<class OptionType>
OptionTypeId optionTypeId( Type<OptionType> );

void checkBadCast( const OptionTypeId &type1, 
                   const OptionTypeId &type2 );


// RTTI functions
// //////////////////////////////////////////////////////////////////

template<class OptionType>
OptionTypeId optionTypeId( Type<OptionType> )
{
   return &typeid( OptionType );
}

inline void checkBadCast( const OptionTypeId &type1, 
                          const OptionTypeId &type2 )
{
   if ( *type1 != *type2 )
      throw BadCastOptionError( "Incorrect get or set call on option value." );
}


} } // namespace CommandLineOptions

#endif // CPPUTTOOLS_CONFIGURATION_SIMPLERTTI_H_INCUDED
@
