head	1.3;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.3;
locks; strict;
comment	@// @;


1.3
date	2005.11.07.22.43.06;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.08.22.07.57;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.03.01.22.17.41;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@#include <examples/common/examplecommon.h>
#include <cpput/testcase.h>


// Checking assertion do not abort the test uppon failure:
// all the failing assertions below will be reported by the test framework
static void testBasicCheckingAssertion()
{
   CPPUT_CHECK( 1 == 2, "1 is not equal to 2..."  );
   CPPUT_CHECK_EXPR( 1 + 2 == 4 );
   CPPUT_CHECK_FALSE( 1 == 1, "1 is equal to 1..."  );
   CPPUT_CHECK_EXPR_FALSE( 1 + 1 == 2 );
   CPPUT_CHECK_EQUAL( 1, 2 );
   CPPUT_CHECK_NOT_EQUAL( 34, 34 );
}



int main( int argc, const char *argv[] )
{
   CppUT::TestSuitePtr allSuite = CppUT::makeTestSuite( "All tests" );
   allSuite->add( CppUT::makeTestCase( CppTL::cfn0( &testBasicCheckingAssertion ), 
                                       "testBasicCheckingAssertion" ) );
   return runExampleTests( argc, argv, allSuite.get() );
}
@


1.2
log
@* Centralized test running logic in examples/common/examplecommon.h
@
text
@a2 2
#include <opentest/texttestdriver.h>
#include <opentest/properties.h>
@


1.1
log
@* added example that demonstrate the checking assertions.
@
text
@d1 1
a2 3
#include <cpput/testsuite.h>
#include <cpput/testrunner.h>    // cppunit2 testrunner for opentest
#include <cpput/assert.h>
d26 1
a26 8
   CppUT::TestRunner runner;
   CppUT::AbstractTestSuitePtr rootSuite = 
      CppTL::staticPointerCast<CppUT::AbstractTestSuite>( allSuite );
   runner.setRootSuite( rootSuite );

   OpenTest::TextTestDriver driver( runner );
   bool sucessful = driver.run();
   return sucessful ? 0 : 1;
@

