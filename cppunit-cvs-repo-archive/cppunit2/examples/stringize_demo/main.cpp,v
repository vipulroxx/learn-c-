head	1.3;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.3;
locks; strict;
comment	@// @;


1.3
date	2005.11.08.20.25.49;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.07.22.43.07;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.06.07.47.36;	author blep;	state Exp;
branches;
next	;


desc
@@


1.3
log
@* replaced include/opentest/properties.h with include/json/value.h
* replaced all occurrences of OpenTest::Value and OpenTest::Properties with Json::Value.
@
text
@#include <examples/common/examplecommon.h>
#include <cpput/testcase.h>
#include <cpptl/stringtools.h>
#include <cpput/assertenum.h>
#include <deque>

namespace ExampleNamespace {

struct WeirdType
{
   WeirdType( int x ) 
      : x_( x ) 
   {
   }

   bool operator ==( const WeirdType &other ) const
   {
      return x_ == other.x_;
   }

   int x_;
};

}

namespace CppUT {
   /// We override this function so that CppUnit know how to convert
   /// WeirType instance into a string.
   inline std::string toString( const ExampleNamespace::WeirdType &v )
   {
      return CppTL::ConstString("WeirdType: x_=" + CppTL::toString( v.x_ )).str();
   }
} 


static void testStringize()
{
   CPPUT_CHECK_EQUAL( ExampleNamespace::WeirdType(5678), ExampleNamespace::WeirdType(1234) );

   std::deque<ExampleNamespace::WeirdType> a, b;
   b.push_back( ExampleNamespace::WeirdType( 1234 ) );
   b.push_back( ExampleNamespace::WeirdType( 4567 ) );
   CPPUT_CHECK_STL_SEQUENCE_EQUAL( a, b );
}



int main( int argc, const char *argv[] )
{
   CppUT::TestSuitePtr allSuite = CppUT::makeTestSuite( "All tests" );
   allSuite->add( CppUT::makeTestCase( CppTL::cfn0( &testStringize ), 
                                       "testStringize" ) );
   return runExampleTests( argc, argv, allSuite.get() );
}
@


1.2
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@a2 1
#include <opentest/properties.h>
d4 1
a5 1
#include <cpput/assertenum.h>
@


1.1
log
@* small demo that demonstrate how conversion to string can be customized.
@
text
@a2 1
#include <opentest/texttestdriver.h>
@

