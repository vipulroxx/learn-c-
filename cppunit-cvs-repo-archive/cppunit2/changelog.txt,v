head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	2007.08.16.15.51.04;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.15.17.35.39;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.15.11.20.57;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	;


desc
@@


1.4
log
@   Added initial support for column fixture supported by fitness. Still missing
automatic type convertion and correct reporting of error with regard to
originating cell.
@
text
@* 2007/08/16 blep
   Added initial support for column fixture supported by fitness. Still missing 
automatic type convertion and correct reporting of error with regard to 
originating cell.

* 2007/08/15 blep
   Added support for light test fixture (a la CppUnitLite). 
See lightfixture.h and example/light_fixture.
   Added support for direct declaration and registration of test in plain C 
function. See testfunction.h and example/test_function.
   Added initial support for table fixture (still like cell value automatic
conversion, but it is usable).

* 2007/08/14 blep
   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to 
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an 
example to update your custom assertion code.

@


1.3
log
@   Added initial support for table fixture (still like cell value automatic
conversion, but it is usable).
@
text
@d1 5
@


1.2
log
@   Added support for light test fixture (a la CppUnitLite).
See lightfixture.h and example/light_fixture.
   Added support for direct declaration and registration of test in plain C
function. See testfunction.h and example/test_function.
@
text
@d6 2
@


1.1
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@d1 6
d11 2
a12 2
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.
@

