head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.5;

1.5
date	2006.06.05.12.05.58;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2006.03.10.08.30.33;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2006.03.08.22.01.21;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.08.08.18.42;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.07.23.02.58;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#include <opentest/sharedmemorytransport.h>
#ifndef OPENTEST_NO_SHAREDMEMORYTRANSPORT
# define WIN32_LEAN_AND_MEAN 
# define NOGDI
# define NOUSER
# define NOKERNEL
# define NOSOUND
# define NOMINMAX
# define BLENDFUNCTION void    // for mingw & gcc  
# include <windows.h>
# include <assert.h>

static void log( const char *prefix, const char *format, va_list args )
{
   char buffer[16384];
   int prefixLength = int( strlen(prefix) );
   assert( prefixLength < sizeof(buffer)-1 );
   strcpy( buffer, prefix );
   _vsnprintf( buffer + prefixLength, sizeof(buffer) - prefixLength -2, format, args );
   size_t offset = strlen(buffer);
   buffer[ offset ] = '\n';
   buffer[offset + 1] = 0;
   printf( "%s", buffer );
}

static void logSlave( const char *format, ... )
{
   va_list args;
   va_start( args, format );
   log( "{slave} ", format, args );
   va_end( args );
}

static void logMaster( const char *format, ... )
{
   va_list args;
   va_start( args, format );
   log( "{master} ", format, args );
   va_end( args );
}

class MessageTransmitionTester : private OpenTest::RemoteMessageServer
{
public:
   MessageTransmitionTester( OpenTest::MessageTransport &transport, const char *id )
      : received_( 0 )
      , sent_( 0 )
      , id_( id) 
      , maxCount_( 3 )
      , transport_( transport )
   {
   }

   void loopUntilDone()
   {
      while ( !done() )
         handleLoop();
   }

   bool done() const
   {
      return sent_ >= maxCount_  &&  received_ >= maxCount_;
   }

   void handleLoop()
   {
      if ( sent_ < maxCount_ )
      {
         ++sent_;
         log("sent");
         OpenTest::RemoteMessagePtr message( new OpenTest::RemoteMessage( OpenTest::runnerMessageStopTest ) );
         transport_.sendMessage( message );
      }

      if ( received_ < maxCount_ )
      {
         transport_.dispatchReceivedMessages( *this );
      }
   }

public: // overridden from RemoteMessageServer
   void dispatchMessage( const OpenTest::RemoteMessagePtr &message )
   {
      ++received_;
      log("received");
   }

private:
   void log( const char *event ) const
   {
      printf( "==========> [%s] message %s (e:%d, r:%d)\n", id_, event, sent_, received_ );
   }

   int received_;
   int sent_;
   const char *id_;
   const int maxCount_;
   OpenTest::MessageTransport &transport_;
};



class DualTransportMessageTransmitionTester
{
public:
   DualTransportMessageTransmitionTester( OpenTest::MessageTransport &masterTransport, 
                                          OpenTest::MessageTransport &slaveTransport )
      : master_( masterTransport, "master" )
      , slave_( slaveTransport, "slave" )
   {
   }

   void loopUntilDone()
   {
      while ( !master_.done()  &&  !slave_.done() )
      {
         master_.handleLoop();
         slave_.handleLoop();
      }
   }

private:
   MessageTransmitionTester master_;
   MessageTransmitionTester slave_;
};


static int runAsSlave( int argc, const char *argv[] )
{
   DebugBreak();
   OpenTest::SharedMemoryConfig config;
   config.log_ = logSlave;
   OpenTest::SharedMemoryTransport transport( argv[2], config );
   MessageTransmitionTester tester( transport, "slave" );
   tester.loopUntilDone();
   return 0;
}


// Spawn a child process and establish a shared memory connection by specifying the
// shared memory region name on the command-line
int runAsMasterOrSlave( int argc, const char *argv[] )
{
   printf( "Command argv[0]: %s\n", argv[0] );
   if ( argc > 1 )
      printf( "Command argv[1]: %s\n", argv[1] );
   printf( "Command line:%s\n", GetCommandLine() );

   for ( int index =1; index < argc; ++index )
      if ( std::string("--slave") == argv[index] )
         return runAsSlave( argc, argv );

   OpenTest::SharedMemoryConfig config;
   config.log_ = logMaster;
   OpenTest::SharedMemoryTransport transport( config );

   std::string childCommandLine( GetCommandLine() );
   childCommandLine += " --slave ";
   childCommandLine += transport.transportName();

   // Create a child process and pass the anymous shared memory file handle
   // in StdIn.

   SECURITY_ATTRIBUTES saAttr; 
   saAttr.nLength = sizeof(SECURITY_ATTRIBUTES); 
   saAttr.bInheritHandle = TRUE; // inherit handle
   saAttr.lpSecurityDescriptor = NULL; 

   STARTUPINFO si;
   PROCESS_INFORMATION pi;

   ZeroMemory( &si, sizeof(si) );
   si.cb = sizeof(si);
   ZeroMemory( &pi, sizeof(pi) );

   // Start the child process. 
   if( !CreateProcess( NULL, // No module name (use command line). 
      (LPTSTR)childCommandLine.c_str(), // Command line. 
      NULL,             // Process handle not inheritable. 
      NULL,             // Thread handle not inheritable. 
      FALSE,            // Set handle inheritance to FALSE. 
      0,                // No creation flags. 
      NULL,             // Use parent's environment block. 
      NULL,             // Use parent's starting directory. 
      &si,              // Pointer to STARTUPINFO structure.
      &pi )             // Pointer to PROCESS_INFORMATION structure.
   ) 
   {
      printf( "CreateProcess failed." );
      return 1;
   }

   MessageTransmitionTester tester( transport, "master" );
   tester.loopUntilDone();

   // Wait until child process exits.
   WaitForSingleObject( pi.hProcess, INFINITE );

   // Close process and thread handles. 
   CloseHandle( pi.hProcess );
   CloseHandle( pi.hThread );

   return 0;
}


int main( int argc, const char *argv[] )
{
   //runAsMasterOrSlave( argc, argv );

   // Run both master and slave in the same process for easier debugging.
   OpenTest::SharedMemoryConfig configMaster;
   configMaster.log_ = logMaster;
   OpenTest::SharedMemoryTransport masterTransport( configMaster );

   OpenTest::SharedMemoryConfig configSlave;
   configSlave.log_ = logSlave;
   configSlave.singleProcessMasterTransport_ = &masterTransport;
   OpenTest::SharedMemoryTransport slaveTransport( masterTransport.transportName(), configSlave );

   DualTransportMessageTransmitionTester tester( masterTransport, slaveTransport );
   //DualTransportMessageTransmitionTester tester( masterTransport, masterTransport );
   tester.loopUntilDone();
   return 0;
}

#else
int main( int argc, const char *argv[] )
{
   return 0;      // shared memory transport not supported
}
#endif
@


1.5
log
@* a bit of clean-up
@
text
@@


1.4
log
@* fixed bad 'Byte' typedef causing bad memory access.
@
text
@d16 1
a16 1
   int prefixLength = strlen(prefix);
d91 1
a91 1
      printf( "[%s] => message %s (e:%d, r:%d)\n", id_, event, sent_, received_ );
@


1.3
log
@* took out the DuplicateHandle used for reference couting (a different handle was returned, and the previous handle became invalid). Explicit life cycle management is used instead.
@
text
@d118 1
a118 1
//         slave_.handleLoop();
d218 1
d222 1
@


1.2
log
@* master and slave can now run in the same process, allowing for easier debugging.
@
text
@d11 1
d15 9
a23 3
   printf( "%s", prefix );
   vprintf( format, args );
   printf( "\n" );
d118 1
a118 1
         slave_.handleLoop();
@


1.1
log
@* added end to end test for shared memory transport.
@
text
@d12 14
a25 1
static const char *logPrefix = "";
d27 1
a27 1
static void log( const char *format, ... )
d31 1
a31 3
   printf( "%s", logPrefix );
   vprintf( format, args );
   printf( "\n" );
d42 2
d45 16
a60 2
      const int maxCount = 3;
      while ( sent_ < maxCount  ||  received_ < maxCount )
d62 5
a66 12
         if ( sent_ < maxCount )
         {
            ++sent_;
            log("sent");
            OpenTest::RemoteMessagePtr message( new OpenTest::RemoteMessage( OpenTest::runnerMessageStopTest ) );
            transport.sendMessage( message );
         }

         if ( received_ < maxCount )
         {
            transport.dispatchReceivedMessages( *this );
         }
d68 3
d90 28
a123 1
   logPrefix = "{slave} ";
d125 1
a125 1
   config.log_ = log;
d127 2
a128 1
   MessageTransmitionTester dummy( transport, "slave" );
d133 3
a135 1
int main( int argc, const char *argv[] )
a145 1
   logPrefix = "{master} ";
d147 1
a147 1
   config.log_ = log;
d186 2
a187 1
   MessageTransmitionTester dummy( transport, "master" );
d199 19
@

