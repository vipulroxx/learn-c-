head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.4;

1.4
date	2006.03.06.21.04.10;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.11.17.16.09;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.14.21.28.09;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.24.19.43.22;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#include <opentest/interfaces.h>
#include <opentest/serializer.h>

namespace OpenTest {


Stream &
TestDescriptionCommon::serialize( Stream &stream ) const
{
   return stream << name_
                 << description_
                 << descriptionSpecific_;
}


Stream &
TestDescriptionCommon::unserialize( Stream &stream )
{
   return stream >> name_
                 >> description_
                 >> descriptionSpecific_;
}


Stream &
TestCaseDescription::serialize( Stream &stream ) const
{
   TestDescriptionCommon::serialize( stream );
   return stream << inputFormatName_ 
                 << inputFormat_
                 << outputFormatName_
                 << outputFormat_;
}


Stream &
TestCaseDescription::unserialize( Stream &stream )
{
   TestDescriptionCommon::unserialize( stream );
   return stream >> inputFormatName_ 
                 >> inputFormat_
                 >> outputFormatName_
                 >> outputFormat_;
}


Stream &
TestSuiteDescription::serialize( Stream &stream ) const
{
   TestDescriptionCommon::serialize( stream );
   return serializeSTLSequence( stream, children_ );
}

Stream &
TestSuiteDescription::unserialize( Stream &stream )
{
   TestDescriptionCommon::unserialize( stream );
   return unserializeSTLSequence( stream, children_ );
}


Stream &
TestDescriptions::serialize( Stream &stream ) const
{
   serializeSTLMap( stream, testCases_ );
   return serializeSTLMap( stream, testSuites_ );
}

Stream &
TestDescriptions::unserialize( Stream &stream )
{
   TestId key;
   unserializeSTLMap( stream, testCases_, key, CppTL::Type<TestCaseDescription>() );
   return unserializeSTLMap( stream, testSuites_, key, CppTL::Type<TestSuiteDescription>() );
}


Stream &
TestPlan::serialize( Stream &stream ) const
{
   TestCaseDescription::serialize( stream );
   return stream << testCase_ 
                 << input_ 
                 << expectedOutput_;
}

Stream &
TestPlan::unserialize( Stream &stream )
{
   TestCaseDescription::unserialize( stream );
   return stream >> testCase_ 
                 >> input_ 
                 >> expectedOutput_;
}


Stream &
TestPlans::serialize( Stream &stream ) const
{
   return serializeSTLSequence( stream, testPlans_ );
}

Stream &
TestPlans::unserialize( Stream &stream )
{
   return unserializeSTLSequence( stream, testPlans_ );
}


Stream &
ResultLog::serialize( Stream &stream ) const
{
   return stream << log_;
}

Stream &
ResultLog::unserialize( Stream &stream )
{
   return stream >> log_;
}

Stream &
ResultAssertion::serialize( Stream &stream ) const
{
   return stream << assertionType_ 
                 << assertionFormat_ 
                 << message_
                 << specific_
                 << isIgnoredFailure_;
}

Stream &
ResultAssertion::unserialize( Stream &stream )
{
   return stream >> assertionType_ 
                 >> assertionFormat_ 
                 >> message_ 
                 >> specific_ 
                 >> isIgnoredFailure_;
}

Stream &
ResultInputOutput::serialize( Stream &stream ) const
{
   return stream << inputFormat_ 
                 << outputFormat_ 
                 << input_ 
                 << expected_ 
                 << actual_;
}

Stream &
ResultInputOutput::unserialize( Stream &stream )
{
   return stream >> inputFormat_ 
                 >> outputFormat_ 
                 >> input_ 
                 >> expected_ 
                 >> actual_;
}

Stream &
ResultStatus::serialize( Stream &stream ) const
{
   return stream << status_ 
                 << statusSpecific_ 
                 << statistics_;
}

Stream &
ResultStatus::unserialize( Stream &stream )
{
   return stream >> status_ 
                 >> statusSpecific_ 
                 >> statistics_;
}


} // namespace OpenTest
@


1.4
log
@* fixed compilation issue with msvc6
@
text
@@


1.3
log
@* rough sketch of a working OpenTest driver with CppUT adaptor for TestRunner.
@
text
@d73 2
a74 2
   unserializeSTLMap( stream, testCases_, key );
   return unserializeSTLMap( stream, testSuites_, key );
@


1.2
log
@- simplified interface a bit
@
text
@d10 1
a10 2
   return stream << id_ 
                 << name_
d19 1
a19 2
   return stream >> id_ 
                 >> name_
d65 2
a66 2
   serializeSTLSequence( stream, testCases_ );
   return serializeSTLSequence( stream, testSuites_ );
d72 3
a74 2
   unserializeSTLSequence( stream, testCases_ );
   return unserializeSTLSequence( stream, testSuites_ );
@


1.1
log
@TestRunner / TestDriver communication interface
@
text
@d114 1
a114 2
   return stream << log_ 
                 << logSpecific_;
d120 1
a120 2
   return stream >> log_ 
                 >> logSpecific_;
d128 3
a130 3
                 << message_ 
                 << expectedSpecific_ 
                 << actualSpecific_;
d139 2
a140 2
                 >> expectedSpecific_ 
                 >> actualSpecific_;
a166 1
                 << subStatus_ 
a174 1
                 >> subStatus_ 
@

