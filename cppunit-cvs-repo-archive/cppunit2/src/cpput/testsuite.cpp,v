head	1.10;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.10
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.6
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.5
	TG_AFTER_REMOVING_TESTCONTEXT:1.5
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.3
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.10
date	2005.11.08.21.44.55;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.07.20.21.06.51;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.03.05.12.29.39;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.27.14.38.27;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.02.27.10.17.05;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.20.15.26.38;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.17.21.47.10;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.17.08.59.34;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.22;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches;
next	;


desc
@@


1.10
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@#include <cpput/testsuite.h>
#include <cpput/testvisitor.h>


namespace CppUT {

// Class AbstractTestCase
// ////////////////////////////////////////////////////////////////////

AbstractTestSuite::AbstractTestSuite()
{
}


AbstractTestSuite::AbstractTestSuite( const std::string &name )
   : Test( name )
{
}


void
AbstractTestSuite::accept( TestVisitor &visitor )
{
   visitor.visitTestSuite( *this );
}

bool 
AbstractTestSuite::isTestCase() const
{
   return false;
}



// Class TestSuite
// ////////////////////////////////////////////////////////////////////

TestSuite::TestSuite( const std::string &name )
   : AbstractTestSuite( name )
{
}


int 
TestSuite::testCount() const
{
   return tests_.size();
}


TestPtr
TestSuite::testAt( int index ) const
{
   return CPPTL_AT( tests_, index );
}


void 
TestSuite::add( const TestPtr &test )
{
   tests_.push_back( test );
}


void 
TestSuite::add( const TestSuitePtr &testSuite )
{
   TestPtr test( testSuite.get() );
   add( test );
}


TestSuitePtr makeTestSuite( const std::string &name )
{
   return TestSuitePtr( new TestSuite( name ) );
}


} // namespace CppUT
@


1.9
log
@* Added IntrusivePtr, a reference counted smart-pointer
* Changed Test hierarchy and TestFixture to use IntrusivePtr instead of SharedPtr (this allows simple upcasting).
@
text
@d15 1
a15 1
AbstractTestSuite::AbstractTestSuite( const CppTL::ConstString &name )
d38 1
a38 1
TestSuite::TestSuite( const CppTL::ConstString &name )
d73 1
a73 1
TestSuitePtr makeTestSuite( const CppTL::ConstString &name )
@


1.8
log
@* added config macro CPPTL_NO_SSTREAM and CPPTL_NO_STL_SEQUENCE_AT for gcc 2.95
* added portability macro CPPTL_AT to access sequence container portably
@
text
@d66 1
a66 1
TestSuite::add( const TestSuitePtr &test )
d68 2
a69 1
   add( CppTL::staticPointerCast<Test>( test ) );
@


1.7
log
@* changed cppunit 2 to use the new functors (cpptl/functor.h). bind_cfn & bind_memfn simplified some of the test code.
@
text
@d54 1
a54 5
#ifdef CPPUT_HAS_VECTOR_AT
   return tests_.at( index );
#else
   return tests_[ index ];
#endif
@


1.6
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@a1 1
#include <cpput/functor.h>
@


1.5
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@d16 1
a16 1
AbstractTestSuite::AbstractTestSuite( const std::string &name )
d39 1
a39 1
TestSuite::TestSuite( const std::string &name )
d77 1
a77 1
TestSuitePtr makeTestSuite( const std::string &name )
@


1.4
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@a2 1
#include <cpput/testcontext.h>
@


1.3
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@d18 1
a18 1
   : AbstractTest( name )
d29 2
a30 3

void 
AbstractTestSuite::run( TestContext &context )
d32 1
a32 3
   context.protect( *this, bind1( makeMemFn1( this, 
                                              &AbstractTestSuite::runTests ),
                                  &context ) );
a35 10
int 
AbstractTestSuite::totalTestCount() const
{
   int total = 0;
   int count = testCount();
   for ( int index = 0; index < count; ++index )
      total += testAt( index )->totalTestCount();
   return total;
}

a67 1
   test->setParentTest( *this );
a77 13
void 
TestSuite::runTests( TestContext *context )
{
   Tests::iterator it = tests_.begin();
   Tests::iterator itEnd = tests_.end();
   while ( it != itEnd )
   {
      const TestPtr &test = *it++;
      test->run( *context );
   }
}


@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d88 1
a88 1
   add( staticPointerCast<Test>( test ) );
@


1.1
log
@Initial revision
@
text
@d86 7
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
