head	1.17;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.15
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.9
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.8
	TG_AFTER_REMOVING_TESTCONTEXT:1.6
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.3
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.17
date	2008.07.13.08.19.20;	author blep;	state Exp;
branches;
next	1.16;

1.16
date	2007.08.15.11.20.57;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2005.11.11.20.54.15;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2005.11.08.21.44.55;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.10.21.34.29;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.08.22.10.21;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.27.14.38.27;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.27.10.17.05;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.22.21.26.49;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.22.21.14.39;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.20.15.26.38;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.20.15.07.00;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.17.21.47.10;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.06.23.18.45.35;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.22;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches;
next	;


desc
@@


1.17
log
@- Added core framework for resource handling to test case, resource registry and test info. Not integrated with the test runner and no unit tests yet.
@
text
@#include <cpput/testcase.h>
#include <cpput/assertcommon.h>
#include <cpput/exceptionguard.h>
#include <cpptl/functor.h>
#include <cpput/message.h>
#include <cpput/resource.h>
#include <cpput/testvisitor.h>


namespace CppUT {



// Class AbstractTestCase
// ////////////////////////////////////////////////////////////////////


AbstractTestCase::AbstractTestCase( const std::string &name )
   : Test( name )
{
}


void 
AbstractTestCase::accept( TestVisitor &visitor )
{
   visitor.visitTestCase( *this );
}


bool 
AbstractTestCase::isTestCase() const
{
   return true;
}


bool 
AbstractTestCase::runTest()
{
   ExceptionGuard guardsChain;
   return runTest( guardsChain );
}


bool 
AbstractTestCase::runTest( const ExceptionGuard &guardsChain )
{
   TestInfo &testInfo = TestInfo::threadInstance();
   testInfo.startNewTest();

   // Protect resource acquisition in the of a resource constructor
   // throw an exception.
   bool allResourceAcquired = false;
   bool resourceAcquired = guardsChain.protect( 
      CppTL::bind( 
         CppTL::memfn1( this, &AbstractTestCase::acquireTestResources ),
         CppTL::ref( allResourceAcquired ) ) );
   if ( resourceAcquired )
   {
      bool initialized = guardsChain.protect( 
         CppTL::memfn0( this, &AbstractTestCase::setUp ) );

      if ( initialized )
      {
         guardsChain.protect( CppTL::memfn0( this, &AbstractTestCase::run ) );
         guardsChain.protect( CppTL::memfn0( this, &AbstractTestCase::tearDown) );
      }
   }

   // Tear down and releases resources "allocated" for the test.
   testInfo.discardTestResources();

   return !TestInfo::threadInstance().testStatus().hasFailed();
}


void 
AbstractTestCase::setUp()
{
}


void 
AbstractTestCase::tearDown()
{
}


void 
AbstractTestCase::requireResource( const std::string &resourceName )
{
   resourceNames_.insert( resourceName );
}


void
AbstractTestCase::prepareResourceAcquisition()
{
   requiredResources_.clear();
   requiredResources_.reserve( resourceNames_.size() );

   // For each required resource, we obtain a lazy reference on the resource.
   // This does not instantiate the resource but indicates future usage of the
   // resource. This is used to allow destruction of the resource as soon as 
   // all tests requiring it have been executed.
   ResourceHandlerRegistry &registry = ResourceHandlerRegistry::instance();
   ResourceNames::iterator itEnd = resourceNames_.end();
   for ( ResourceNames::iterator it = resourceNames_.begin(); 
         it != itEnd;
         ++it )
   {
      const ResourceName &resourceName = *it;
      ResourceLazyPtr resource = registry.getResource( resourceName );
      requiredResources_.push_back( resource );
   }
}


void
AbstractTestCase::acquireTestResources( bool &allResourceAcquired )
{
   // Notes that the resources are acquired in the order they are stored in the map,
   // that is, in the order of the resource name.
   // This is important to ensure that multiple resources acquisition is always done
   // in the same order to avoid dead-lock when resources are acquired concurrently.
   TestInfo &testInfo = TestInfo::threadInstance();
   RequiredResources::iterator itEnd = requiredResources_.end();
   for ( RequiredResources::iterator it = requiredResources_.begin(); 
         it != itEnd;
         ++it )
   {
      ResourceLazyPtr &resourceRef = *it;
      // Obtains a reference on an actual instance of the resource.
      // The resource is instantiated if required.
      // Notes: resource constructor may throw an exception.
      AcquiredResourceHandlePtr resource = resourceRef.acquire();
      if ( !resource )  
      {
         allResourceAcquired = false;
         return;  // No resource handler defined for the resource
      }
      testInfo.addResource( resource );
      resource->setUp();
   }
   allResourceAcquired = true;
}



// Class TestCase
// ////////////////////////////////////////////////////////////////////
   
TestCase::TestCase( const CppTL::Functor0 &run,
                    const std::string &name )
   : AbstractTestCase( name )
   , run_( run )
{
}


TestCase::TestCase( const CppTL::Functor0 &setUp,
                    const CppTL::Functor0 &run,
                    const CppTL::Functor0 &tearDown,
                    const std::string &name )
   : AbstractTestCase( name )
   , setUp_( setUp )
   , run_( run )
   , tearDown_( tearDown )
{
}


void 
TestCase::setUp()
{
   if ( setUp_ )
      setUp_();
}


void 
TestCase::run()
{
   if ( run_ )
      run_();
}


void 
TestCase::tearDown()
{
   if ( tearDown_ )
      tearDown_();
}


TestPtr CPPUT_API makeTestCase( void (*run)(),
                                const std::string &name )
{
   return TestPtr( new TestCase( CppTL::cfn0(run), name ) );
}


TestPtr makeTestCase( const CppTL::Functor0 &run,
                      const std::string &name )
{
  return TestPtr( new TestCase( run, name ) );
}


TestPtr makeTestCase( const CppTL::Functor0 &setUp,
                      const CppTL::Functor0 &run,
                      const CppTL::Functor0 &tearDown,
                      const std::string &name )
{
  return TestPtr( new TestCase( setUp, run, tearDown, name ) );
}



namespace {
   class FailingTestCase : public CppUT::AbstractTestCase
   {
   public:
      FailingTestCase( const std::string &name,
                       const CppUT::Message &message ) 
         : CppUT::AbstractTestCase( name )
         , message_( message )
      {
      }
   private: // overridden from AbstractTestCase
      void run()
      {
         CPPUT_FAIL( message_ );
      }

      Message message_;
   };
}


TestPtr CPPUT_API makeFailingTestCase( const std::string &name,
                                       const Message &message )
{
   return TestPtr( new FailingTestCase( name, message ) );
}


} // namespace CppUT

@


1.16
log
@   Added support for light test fixture (a la CppUnitLite).
See lightfixture.h and example/light_fixture.
   Added support for direct declaration and registration of test in plain C
function. See testfunction.h and example/test_function.
@
text
@d3 1
d6 1
a6 1
#include <cpput/exceptionguard.h>
d45 1
d49 2
a50 3
   TestInfo::threadInstance().startNewTest();
   bool initialized = guardsChain.protect( CppTL::memfn0( this, 
                                                          &AbstractTestCase::setUp ) );
d52 8
a59 1
   if ( initialized )
d61 8
a68 2
      guardsChain.protect( CppTL::memfn0( this, &AbstractTestCase::run ) );
      guardsChain.protect( CppTL::memfn0( this, &AbstractTestCase::tearDown) );
d71 3
d90 60
@


1.15
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d121 6
@


1.14
log
@- added unit tests for TestInfo
- fixed bug in CPPUT_IGNORE_FAILURE and exception guard.
- added 'isIgnoredFailure' to Assertion.
- lighttestrunner now print ignored failure and skipped tests.
@
text
@d2 1
a2 1
#include <cpput/assert.h>
@


1.13
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d57 1
a57 1
   return !TestInfo::threadInstance().getUpdatedTestStatus().hasFailed();
@


1.12
log
@* Replaced function in namespace TestInfo by exposing the TestInfoData class and renaming it TestInfo. TestInfo in now an exposed per thread singleton.
* startNewTest() is now called from TestCase::runTest() instead of being the test runner responsability. There still a few call to this method in cpput bootstrap test (which use assertion without run a test case).
@
text
@d17 1
a17 1
AbstractTestCase::AbstractTestCase( const CppTL::ConstString &name )
d78 1
a78 1
                    const CppTL::ConstString &name )
d88 1
a88 1
                    const CppTL::ConstString &name )
d123 1
a123 1
                      const CppTL::ConstString &name )
d132 1
a132 1
                      const CppTL::ConstString &name )
d143 1
a143 1
      FailingTestCase( const CppTL::ConstString &name,
d160 1
a160 1
TestPtr CPPUT_API makeFailingTestCase( const CppTL::ConstString &name,
@


1.11
log
@Rewrote failure reporting during test. It now provides more structure while still providing some flexibility.
@
text
@d47 1
d57 1
a57 1
   return !TestInfo::getUpdatedTestStatus().hasFailed();
@


1.10
log
@* changed cppunit 2 to use the new functors (cpptl/functor.h). bind_cfn & bind_memfn simplified some of the test code.
@
text
@d56 1
a56 1
   return !TestInfo::testHasFailed();
@


1.9
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d3 1
a3 1
#include <cpput/functor.h>
d47 2
a48 2
   bool initialized = guardsChain.protect( makeMemFn0( this, 
                                                       &AbstractTestCase::setUp ) );
d52 2
a53 2
      guardsChain.protect( makeMemFn0( this, &AbstractTestCase::run ) );
      guardsChain.protect( makeMemFn0( this, &AbstractTestCase::tearDown) );
d76 1
a76 1
TestCase::TestCase( const Functor0 &run,
d84 3
a86 3
TestCase::TestCase( const Functor0 &setUp,
                    const Functor0 &run,
                    const Functor0 &tearDown,
d121 2
a122 2
TestPtr makeTestCase( const Functor0 &run,
                          const CppTL::ConstString &name )
d128 4
a131 4
TestPtr makeTestCase( const Functor0 &setUp,
                          const Functor0 &run,
                          const Functor0 &tearDown,
                          const CppTL::ConstString &name )
@


1.8
log
@* renamed testfailureguard.h/cpp to exceptionguard.h/cpp
@
text
@d17 1
a17 1
AbstractTestCase::AbstractTestCase( const std::string &name )
d77 1
a77 1
                    const std::string &name )
d87 1
a87 1
                    const std::string &name )
d122 1
a122 1
                          const std::string &name )
d131 1
a131 1
                          const std::string &name )
d142 1
a142 1
      FailingTestCase( const std::string &name,
d159 1
a159 1
TestPtr CPPUT_API makeFailingTestCase( const std::string &name,
@


1.7
log
@* simplified TestExceptionGuard implementation
* renamed TestExceptionGuardChain to ExceptionGuard
* added facility to easily register an exception translator.
@
text
@d5 1
a5 1
#include <cpput/testfailureguard.h>
@


1.6
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@d40 1
a40 1
   TestExceptionGuardChain guardsChain;
d45 1
a45 1
AbstractTestCase::runTest( const TestExceptionGuardChain &guardsChain )
@


1.5
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@d5 1
a5 1
#include <cpput/testcontext.h>
d37 23
@


1.4
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@d2 1
d4 1
d128 1
a128 1
         throw CppUT::AssertException( message_ );
@


1.3
log
@* added makeFailingTestCase()
@
text
@d16 1
a16 1
   : AbstractTest( name )
a21 7
AbstractTestCase::run( TestContext &context )
{
   context.protectTestRun( *this, makeMemFn1( this, &AbstractTestCase::runTest ) );
}


void 
d28 2
a29 9
int 
AbstractTestCase::totalTestCount() const
{
   return 1;
}


void 
AbstractTestCase::runTest( TestContext *context )
d31 1
a31 10
   bool initialized = context->protect( *this, 
                                   makeMemFn0( this, 
                                               &AbstractTestCase::setUp ) );

   if ( initialized )
   {
      context->protect( *this, makeMemFn0( this, &AbstractTestCase::doRun ) );
      context->protect( *this,
                        makeMemFn0( this, &AbstractTestCase::tearDown) );
   }
d80 1
a80 1
TestCase::doRun()
d124 1
a124 1
      void doRun()
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d135 29
@


1.1
log
@Initial revision
@
text
@d119 1
a119 1
TestCasePtr makeTestCase( const Functor0 &run,
d122 1
a122 1
  return TestCasePtr( new TestCase( run, name ) );
d126 1
a126 1
TestCasePtr makeTestCase( const Functor0 &setUp,
d131 1
a131 1
  return TestCasePtr( new TestCase( setUp, run, tearDown, name ) );
a136 93










/*   
   
TestCase::TestCase( const Functor0 &run,
          const std::string &name )
   : AbstractTest( name )
   , run_( run )
{
}


TestCase::TestCase( const Functor0 &setUp,
          const Functor0 &run,
          const Functor0 &tearDown,
          const std::string &name )
   : AbstractTest( name )
   , setUp_( setUp )
   , run_( run )
   , tearDown_( tearDown )
{
}


void 
TestCase::run( TestContext &context )
{
   context.protectTestRun( *this, makeMemFn1( this, &TestCase::runTest ) );
}


void 
TestCase::accept( TestVisitor &visitor )
{
   visitor.visitTestCase( *this );
}


int 
TestCase::totalTestCount() const
{
   return 1;
}


void 
TestCase::runTest( TestContext *context )
{
   bool initialized = true;

   if ( setUp_ )
      initialized = context->protect( *this, setUp_ );

   if ( initialized )
   {
      if ( run_ )
         context->protect( *this, run_ );

      if ( tearDown_ )
         context->protect( *this, tearDown_ );
   }
}


TestCasePtr makeTestCase( const Functor0 &run,
                          const std::string &name )
{
  return TestCasePtr( new TestCase( run, name ) );
}


TestCasePtr makeTestCase( const Functor0 &setUp,
                          const Functor0 &run,
                          const Functor0 &tearDown,
                          const std::string &name )
{
  return TestCasePtr( new TestCase( setUp, run, tearDown, name ) );
}


} // namespace CppUT


*/

@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
