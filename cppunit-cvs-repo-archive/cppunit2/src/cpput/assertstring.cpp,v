head	1.5;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.4
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.3
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.2
	TG_AFTER_REMOVING_TESTCONTEXT:1.2
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.2
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.5
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.07.02.20.27.36;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.27.10.13.37;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.01.16.12.56;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.31;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.31;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@#include <cpput/assertstring.h>
#include <algorithm>

namespace CppUT {

CheckerResult 
checkStdStringStartsWith( const std::string &string,
                          const std::string &pattern,
                          const Message &message )
{
   CheckerResult result;
   if ( string.substr( 0, pattern.length() ) != pattern )
   {
      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "String does not start with the expected pattern." ) );
      result.message_.add( translate( "Expected start: " ) + CppTL::quoteMultiLineString( pattern ) );
      result.message_.add( translate( "Actual string:  " ) + CppTL::quoteMultiLineString( string ) );
   }
   return result;
}


CheckerResult 
checkStdStringEndsWith( const std::string &string,
                        const std::string &pattern,
                        const Message &message )
{
   CheckerResult result;
   if ( string.length() < pattern.length()  ||
        string.substr( string.length() - pattern.length() ) != pattern )
   {
      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "String does not end with the expected pattern." ) );
      result.message_.add( translate( "Expected end:  " ) + CppTL::quoteMultiLineString( pattern ) );
      result.message_.add( translate( "Actual string: " ) + CppTL::quoteMultiLineString( string ) );
   }
   return result;
}


CheckerResult 
checkStdStringContains( const std::string &string,
                        const std::string &pattern,
                        const Message &message )
{
   CheckerResult result;
   if ( string.find( pattern ) == std::string::npos )
   {
      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "String does not contain the expected pattern." ) );
      result.message_.add( translate( "Expected pattern: " ) + CppTL::quoteMultiLineString( pattern ) );
      result.message_.add( translate( "Actual string: " ) + CppTL::quoteMultiLineString( string ) );
   }
   return result;
}


CheckerResult 
checkStdStringEquals( const std::string &expected,
                      const std::string &actual,
                      const Message &message )
{
   CheckerResult result;
   if ( actual != expected )
   {
      unsigned int differenceIndex = 0;
      while ( differenceIndex < actual.length()  &&  
              differenceIndex < expected.length()  &&
              actual[differenceIndex] == expected[differenceIndex] )
      {
         ++differenceIndex;
      }

      std::string common = expected.substr( 0, differenceIndex );
      std::string actualTail = actual.substr( differenceIndex );
      std::string expectedTail = expected.substr( differenceIndex );

      result.setFailed();
      result.message_ = message;
      result.message_.add( translate( "Strings are not equal." ) );
      if ( !common.empty() )
         result.message_.add( translate( "Common: " ) + CppTL::quoteMultiLineString( common ) );
      result.message_.add( translate( "Divergence position (0 based): " ) + stringize( differenceIndex ) );
      result.message_.add( translate( "Expected (at divergence): " ) + CppTL::quoteMultiLineString( expectedTail ) );
      result.message_.add( translate( "Actual (at divergence):   " ) + CppTL::quoteMultiLineString( actualTail ) );
   }
   return result;
}

} // namespace CppUT
@


1.4
log
@* Added a simple test runner that does not rely on the open test framework to run cppunit2 tests.
* added CppTL::ConstCharView to wrapper const char *strings.
* added CppTL::quoteMultiLineString()
* string assertion output actual and expected using quoteMultiLineString().
* added serialize unit test for basic Properties
* opentest tests now use the LightTestRunner.
@
text
@d6 1
a6 1
void 
d11 10
a20 8
   if ( string.substr( 0, pattern.length() ) == pattern )
      return;

   Message newMessage( message );
   newMessage.add( translate( "String does not start with the expected pattern." ) );
   newMessage.add( translate( "Expected start: " ) + CppTL::quoteMultiLineString( pattern ) );
   newMessage.add( translate( "Actual string:  " ) + CppTL::quoteMultiLineString( string ) );
   fail( newMessage );
d24 1
a24 1
void 
d29 11
a39 9
   if ( string.length() >= pattern.length()  &&
        string.substr( string.length() - pattern.length() ) == pattern )
      return;

   Message newMessage( message );
   newMessage.add( translate( "String does not end with the expected pattern." ) );
   newMessage.add( translate( "Expected end:  " ) + CppTL::quoteMultiLineString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + CppTL::quoteMultiLineString( string ) );
   fail( newMessage );
d43 1
a43 1
void 
d48 10
a57 8
   if ( string.find( pattern ) != std::string::npos )
      return;

   Message newMessage( message );
   newMessage.add( translate( "String does not contain the expected pattern." ) );
   newMessage.add( translate( "Expected pattern: " ) + CppTL::quoteMultiLineString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + CppTL::quoteMultiLineString( string ) );
   fail( newMessage );
d61 1
a61 1
void 
d66 2
a67 7
   if ( actual == expected )
      return;

   unsigned int differenceIndex = 0;
   while ( differenceIndex < actual.length()  &&  
           differenceIndex < expected.length()  &&
           actual[differenceIndex] == expected[differenceIndex] )
d69 20
a88 1
      ++differenceIndex;
d90 1
a90 13

   std::string common = expected.substr( 0, differenceIndex );
   std::string actualTail = actual.substr( differenceIndex );
   std::string expectedTail = expected.substr( differenceIndex );

   Message newMessage( message );
   newMessage.add( translate( "Strings are not equal." ) );
   if ( !common.empty() )
      newMessage.add( translate( "Common: " ) + CppTL::quoteMultiLineString( common ) );
   newMessage.add( translate( "Divergence position (0 based): " ) + stringize( differenceIndex ) );
   newMessage.add( translate( "Expected (at divergence): " ) + CppTL::quoteMultiLineString( expectedTail ) );
   newMessage.add( translate( "Actual (at divergence):   " ) + CppTL::quoteMultiLineString( actualTail ) );
   fail( newMessage );
@


1.3
log
@* use ConstString instead of std::string
* moved quoteString() from cpput/assertstring to cpptl/stringtools.h.
@
text
@d16 2
a17 2
   newMessage.add( translate( "Expected start: " ) + CppTL::quoteString( pattern ) );
   newMessage.add( translate( "Actual string:  " ) + CppTL::quoteString( string ) );
d33 2
a34 2
   newMessage.add( translate( "Expected end:  " ) + CppTL::quoteString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + CppTL::quoteString( string ) );
d49 2
a50 2
   newMessage.add( translate( "Expected pattern: " ) + CppTL::quoteString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + CppTL::quoteString( string ) );
d78 1
a78 1
      newMessage.add( translate( "Common: " ) + CppTL::quoteString( common ) );
d80 2
a81 2
   newMessage.add( translate( "Expected (at divergence): " ) + CppTL::quoteString( expectedTail ) );
   newMessage.add( translate( "Actual (at divergence):   " ) + CppTL::quoteString( actualTail ) );
@


1.2
log
@* added /Za setting to project to force conformance to ANSI C++
* fixed issues related to ANSI C++ conformance
* fixed bug in SliceEnumerator copy constructor & added test
@
text
@d16 2
a17 2
   newMessage.add( translate( "Expected start: " ) + quoteString( pattern ) );
   newMessage.add( translate( "Actual string:  " ) + quoteString( string ) );
d33 2
a34 2
   newMessage.add( translate( "Expected end:  " ) + quoteString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + quoteString( string ) );
d49 2
a50 2
   newMessage.add( translate( "Expected pattern: " ) + quoteString( pattern ) );
   newMessage.add( translate( "Actual string: " ) + quoteString( string ) );
d78 1
a78 1
      newMessage.add( translate( "Common: " ) + quoteString( common ) );
d80 2
a81 2
   newMessage.add( translate( "Expected (at divergence): " ) + quoteString( expectedTail ) );
   newMessage.add( translate( "Actual (at divergence):   " ) + quoteString( actualTail ) );
a84 58

std::string hex( unsigned int value )
{
  static const char *digit = "0123456789abcdef";
  std::string hexa;
  do
  {
    hexa += digit[ value & 15 ];
    value /= 16;
  }
  while ( value != 0 );

  std::reverse( hexa.begin(), hexa.end() );
  return hexa;
}


std::string escapeControl( char c )
{
  if ( c == '\n' )
    return "\\n";
  else if ( c == '\t' )
    return "\\t";
  else if ( c == '\r' )
    return "\\r";
  else if ( c == '\v' )
    return "\\v";
  return "\\x" + hex( (unsigned)c );
}


std::string escape( char c )
{
  if ( c >=0  &&  c < 32 )
    return escapeControl( c );
  else if ( c == '\\' )
    return "\\\\";
  return std::string( 1, c );
}


// need to expose some of those utility functions...
std::string escape( const std::string &text )
{
  std::string escaped;
  escaped.reserve( text.length() + 16 );
  std::string::const_iterator it = text.begin();
  while ( it != text.end() )
    escaped += escape( *it++ );
  return escaped;
}


std::string quoteString( const std::string &str )
{
   return "\"" + escape(str) + "\"";
}

@


1.1
log
@Initial revision
@
text
@d143 1
a143 1
} // namespace CppUT {@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
