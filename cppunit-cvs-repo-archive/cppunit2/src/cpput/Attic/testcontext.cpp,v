head	1.11;
access;
symbols
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.9
	TG_BEFORE_REMOVING_TESTCONTEXT:1.8
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.11
date	2004.11.20.15.26.38;	author blep;	state dead;
branches;
next	1.10;

1.10
date	2004.11.20.15.07.00;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2004.11.17.21.47.10;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.04.19.41.19;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.08.01.15;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.04.07.55.43;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.04.06.43.57;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.03.22.36.15;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.03.22.05.15;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.07.22.44;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches;
next	;


desc
@@


1.11
log
@* Removed TestContext.
* TestContext/AbstractTestCase: moved responsibility of running the test to AbstractTestCase.
@
text
@#include <cpput/testcontext.h>
#include <cpput/testcase.h>
#include <cpput/testinfo.h>


namespace CppUT {


bool
TestContext::run( AbstractTestCase &test )
{
   bool initialized = protect( makeMemFn0( &test, &AbstractTestCase::setUp ) );

   if ( initialized )
   {
      protect( makeMemFn0( &test, &AbstractTestCase::run ) );
      protect( makeMemFn0( &test, &AbstractTestCase::tearDown) );
   }

   return !TestInfo::testHasFailed();
}


bool 
TestContext::protect( const Functor0 &functor )
{
   return guardsChain_.protect( functor );
}


void 
TestContext::appendGuard( const TestExceptionGuardPtr &guard )
{
   guardsChain_.appendGuard( guard );
}

void 
TestContext::removeLastGuard()
{
   guardsChain_.removeLastGuard();
}


} // namespace CppUT
@


1.10
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@@


1.9
log
@* started removing TestDriver stuff from CppUnit 2
* Removed Test::run(), Test::totalTestCount and Test::parent
* User can only subclass AbstractTestSuite or AbstractTestCase.
* AbstractTest has been inlined into Test
* Test no longer have parent
* Removed TestListener::enterTest() & TestListener::exitTest()
* Moved responsibility of running TestCase from AbstractTestCase to TestContext::run( AbstractTestCase &test ).
* Removed method related to suite and enter/exit event from TestContext.
* Disabled some unit tests (rely on running test which will change again shortly)
@
text
@a1 1
#include <cpput/resultexception.h>
d3 1
a3 7
#include <cpput/testlistener.h>
#include <cpput/testresult.h>
#include <cpput/testsuite.h>
#include <cpput/testvisitor.h>
#include <cpput/message.h>
#include <cpput/typehelper.h>
#include <algorithm>
d9 1
a9 7
TestContext::TestContext()
   : testSucceeded_( true )
{
}


void 
d12 1
a12 4
   testSucceeded_ = true;
   
   bool initialized = protect( test, makeMemFn0( &test, 
                                                 &AbstractTestCase::setUp ) );
d16 2
a17 2
      protect( test, makeMemFn0( &test, &AbstractTestCase::run ) );
      protect( test, makeMemFn0( &test, &AbstractTestCase::tearDown) );
d20 1
a20 2
   if ( testSucceeded_ )
      dispatchTestSuccessResult( test );
d25 1
a25 9
TestContext::protect( Test &test,
                      const Functor0 &functor )
{
   return guardsChain_.protect( *this, functor, test );
}


void 
TestContext::add( TestListener &listener )
d27 1
a27 16
   listeners_.push_back( &listener );
}


void 
TestContext::remove( TestListener &listener )
{
   while ( true )
   {
      Listeners::iterator it = std::find( listeners_.begin(), 
                                          listeners_.end(),
                                          &listener );
      if ( it == listeners_.end() )
         break;
      listeners_.erase( it );
   }
d38 1
a38 34
TestContext::removeGuard()
{
   guardsChain_.removeGuard();
}


void 
TestContext::dispatchTestResult( TestResult &result )
{
   if ( result.failed() )
      testSucceeded_ = false;

   Listeners::const_iterator it = listeners_.begin();
   Listeners::const_iterator itEnd = listeners_.end();
   while ( it != itEnd )
   {
      TestListener &listener = **it++;
      listener.processTestResult( result, *this );
   }
}


void 
TestContext::dispatchTestSuccessResult( Test &test )
{
   Message message;
   message.setStatus( true );
   TestResult result( test, message );
   dispatchTestResult( result );
}


void 
TestContext::handleResultException( Test &test, const ResultException &e )
d40 1
a40 2
   TestResult result( test, e.message(), e.location() );
   dispatchTestResult( result );
@


1.8
log
@* renamed TestFailureGuard TestExceptionGuard.
@
text
@d3 2
a5 1
#include <cpput/testlistener.h>
d23 1
a23 2
TestContext::protectTestRun( Test &test, 
                             Functor1<TestContext *> runTest )
d26 3
d30 5
a34 3
   dispatchTestEvent( test, &TestListener::enterTest );

   guardsChain_.protect( *this, bind1( runTest, this ), test );
a37 2

   dispatchTestEvent( test, &TestListener::exitTest );
a84 28
TestContext::dispatchTestEvent( Test &test, 
                                void (TestListener::*eventMethod)( Test &, TestContext &) )
{
   Listeners::const_iterator it = listeners_.begin();
   Listeners::const_iterator itEnd = listeners_.end();
   while ( it != itEnd )
   {
      TestListener &listener = **it++;
      (listener.*eventMethod)( test, *this );
   }
}


void 
TestContext::dispatchSuiteEvent( AbstractTestSuite &suite, 
                                 void (TestListener::*eventMethod)( AbstractTestSuite &, TestContext &) )
{
   Listeners::const_iterator it = listeners_.begin();
   Listeners::const_iterator itEnd = listeners_.end();
   while ( it != itEnd )
   {
      TestListener &listener = **it++;
      (listener.*eventMethod)( suite, *this );
   }
}


void 
@


1.7
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d69 1
a69 1
TestContext::appendGuard( const TestFailureGuardPtr &guard )
@


1.6
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d2 1
a2 1
#include <cpput/assertexception.h>
@


1.5
log
@* Replaced TestListener::testFailed() with TestListener::processTestResul(). TestResult can be either success or failure and is mutable: the callback can add structured data to the result.
* TestContext::protectTestRun() assumes test succeeded if no failing TestResult were dispatched during the test.
@
text
@d129 2
a130 1
   TestResult result( test, message, true );
d136 1
a136 1
TestContext::handleAssertion( Test &failedTest, const AssertException &e )
d138 1
a138 12
   Message message = e.message();
   message.setFailureType( "assertion" );
   TestResult result( failedTest, message, e.location(), false );
   dispatchTestResult( result );
}

void 
TestContext::handleFault( Test &failedTest, const FaultException &e )
{
   Message message = e.message();
   message.setFailureType( "fault" );
   TestResult result( failedTest, e.message(), e.location(), false );
@


1.4
log
@* renamed TestFailure to TestResult (can now be a success or a failure)
* renamed testfailure.h to testresult.h
* renamed testresult.cpp to testtestrunresult.cpp
@
text
@d16 1
d25 2
d31 3
d110 1
a110 1
TestContext::dispatchTestFailure( const TestResult &failure )
d112 3
d120 1
a120 1
      listener.testFailed( failure, *this );
d126 9
d139 2
a140 2
   TestResult failure( failedTest, message, e.location(), false );
   dispatchTestFailure( failure );
d148 2
a149 2
   TestResult failure( failedTest, e.message(), e.location(), false );
   dispatchTestFailure( failure );
@


1.3
log
@* test failure type is now parametrized. The framework recognize 'fault' and 'assertion', but the user can define any failure type.
* properties are now associated to the failure message and can be used to pass any structured data to the test report (such as run time...).
* TestFailure can now be either a success or a failure (need renaming).
* Next step is to send a generic TestResult event to listener, and collect TestResult identically for both successful and failing tests.
@
text
@d3 1
a3 1
#include <cpput/testfailure.h>
d104 1
a104 1
TestContext::dispatchTestFailure( const TestFailure &failure )
d121 1
a121 1
   TestFailure failure( failedTest, message, e.location(), false );
d130 1
a130 1
   TestFailure failure( failedTest, e.message(), e.location(), false );
@


1.2
log
@* integrated TestFailureGuardChain into TestContext
@
text
@d119 3
a121 1
   TestFailure failure( failedTest, e.message(), e.location() );
d128 3
a130 1
   TestFailure failure( failedTest, e.message(), e.location() );
@


1.1
log
@Initial revision
@
text
@d6 1
d26 1
a26 1
   protect( test, bind1( runTest, this ) );
d36 1
a36 1
   return defaultProtect( functor, test );
a61 28
bool 
TestContext::defaultProtect( Functor0 functor, 
                             Test &test )
{
   try
   {
      functor();
      return true;
   }
   catch ( const AssertException &e )
   {
      addAssertion( test, e );
   }
   catch ( const std::exception &e )
   {
      Message message( "unexpected exception caught" );
      message.add( "Type: " + extractObjectType( e, "std::exception" ) );
      message.add( std::string("What: ") + e.what() );
      addUncaughtException( test, message );
   } catch ( ... ) {
      Message message( "unexpected unknown exception caught" );
      addUncaughtException( test, message );
   }

   return false;
}


d63 1
a63 2
TestContext::addUncaughtException( Test &test,
                                   const Message &message )
d65 1
a65 2
   TestFailure failure( test, message );
   dispatchTestFailure( failure );
a67 1

d69 1
a69 2
TestContext::addAssertion( Test &test,
                           const AssertException &e )
d71 1
a71 2
   TestFailure failure( test, e.message(), e.location() );
   dispatchTestFailure( failure );
d116 15
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
