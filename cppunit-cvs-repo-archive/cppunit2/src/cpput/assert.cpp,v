head	1.20;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.19
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.8
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.7
	TG_AFTER_REMOVING_TESTCONTEXT:1.6
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.4
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.20
date	2007.08.14.17.30.52;	author blep;	state Exp;
branches;
next	1.19;

1.19
date	2006.09.02.11.24.53;	author blep;	state Exp;
branches;
next	1.18;

1.18
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.17;

1.17
date	2005.11.11.20.54.15;	author blep;	state Exp;
branches;
next	1.16;

1.16
date	2005.11.09.20.04.06;	author blep;	state Exp;
branches;
next	1.15;

1.15
date	2005.11.08.21.44.54;	author blep;	state Exp;
branches;
next	1.14;

1.14
date	2005.09.06.07.21.05;	author blep;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.10.21.34.29;	author blep;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.10.07.45.23;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.08.22.10.21;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.03.06.18.45.38;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.28.22.14.03;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.27.10.17.05;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.21.22.28.54;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.20.15.07.00;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.20.12.17.51;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.04.08.42.27;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.04.08.01.15;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.31.10.58.51;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.31;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.31;	author blep;	state Exp;
branches;
next	;


desc
@@


1.20
log
@   Modified assertion implementation to force evaluation of user
condition expression first, while preserving delegation to
function, overloading and optional parameters feature.
   See CPPUT_BEGIN_ASSERTION_MACRO() documentation in testinfo.h for an example
to update your custom assertion code.

   New implementation rely on operator evaluation order and operator overloading. The trick is documented in CPPUT_BEGIN_ASSERTION_MACRO().
@
text
@# include <cpput/assertcommon.h>
# include <cpput/message.h>
# include <cpput/stringize.h>
# include <cpput/translate.h>


namespace CppUT
{


CheckerResult 
pass()
{
   return CheckerResult();
}


CheckerResult 
fail()
{
   return fail( translate("Assertion Failed") );
}


CheckerResult 
fail( const LazyMessage &message )
{
   CheckerResult result;
   result.setFailed();
   result.message_ = message.makeMessage();
   return result;
}


CheckerResult 
checkTrue( bool shouldBeTrue,
           const LazyMessage &message )
{
   CheckerResult result;
   if ( !shouldBeTrue )
   {
      result.message_ = message.makeMessage();
      result.message_.insertAt( 0, translate( "expression did not evaluate to true." ) );
      result.setFailed();
   }
   return result;
}


CheckerResult 
checkFalse( bool shouldBeFalse,
            const LazyMessage &message )
{
   CheckerResult result;
   if ( shouldBeFalse )
   {
      result.message_ = message.makeMessage();
      result.message_.insertAt( 0, translate( "expression did not evaluate to false." ) );
      result.setFailed();
   }
   return result;
}


CheckerResult 
checkAssertionFail( bool assertionFailed,
                    const LazyMessage &message )
{
   CheckerResult result;
   if ( !assertionFailed )
   {
      result.message_ = Message( translate( "Assertion expression did not fail as expected." ) );
      result.message_.extend( message.makeMessage() );
      result.setFailed();
   }
   return result;
}


CheckerResult 
checkAssertionPass( bool assertionFailed,
                    const LazyMessage &message )
{
   CheckerResult result;
   if ( assertionFailed )
   {
      result.message_ = Message( translate( "Assertion expression did not pass as expected." ) );
      result.message_.extend( message.makeMessage() );
      result.setFailed();
   }
   return result;
}


void
buildEqualityFailedMessage( CheckerResult &result,
                            const std::string &expected,
                            const std::string &actual,
                            const LazyMessage &message )
{
   result.setFailed();
   result.message_ = message.makeMessage();
   result.message_.add( translate( "Equality assertion failed." ) );
   result.message_.add( translate( "Expected: " ) + expected );
   result.message_.add( translate( "Actual  : " ) + actual );
}


void
buildUnequalityFailedMessage( CheckerResult &result,
                              const std::string &expected,
                              const std::string &actual,
                              const LazyMessage &message )
{
   result.setFailed();
   result.message_ = message.makeMessage();
   result.message_.add( translate( "Unequality assertion failed (expected & actual should be different)." ) );
   result.message_.add( translate( "Expected: " ) + expected );
   result.message_.add( translate( "Actual  : " ) + actual );
}


CheckerResult 
checkDoubleEquals( double expected, 
                   double actual, 
                   double tolerance, 
                   const LazyMessage &message )
{
   CheckerResult result;
   double diff = expected - actual;
   if ( diff < 0 )
      diff = -diff;
   if ( diff > tolerance )
   {
      result.setFailed();
      result.message_ = message.makeMessage();
      result.message_.add( translate( "Double equality assertion failed." ) );
      result.message_.add( translate( "Expected: " ) + CppTL::toString( expected ) );
      result.message_.add( translate( "Actual  : " ) + CppTL::toString( actual ) );
      result.message_.add( translate( "Tolerance  : " ) + CppTL::toString( tolerance ) );
      result.message_.add( translate( "Actual difference  : " ) + CppTL::toString( diff ) );
   }
   return result;
}


void 
skipCurrentTest()
{
   TestStatus &status = TestInfo::threadInstance().testStatus();
   if ( status.hasPassed() )
      status.setStatus( TestStatus::skipped );
   throw SkipTestException();
}


} // namespace CppUT

@


1.19
log
@- added LazyMessage, a simple proxy class that avoid building Message until it is really needed (assertion failed).
@
text
@d11 8
a18 1
void 
d21 1
a21 1
   fail( translate("Assertion Failed") );
d25 1
a25 1
void 
d28 4
a31 2
   currentAssertion().setMessages( message.makeMessage() );
   realizeAssertion();
d35 1
a35 1
void 
d39 8
a46 6
   if ( shouldBeTrue )
      return;

   Message newMessage( message.makeMessage() );
   newMessage.insertAt( 0, translate( "expression did not evaluate to true." ) );
   fail( newMessage );
d50 1
a50 1
void 
d54 8
a61 6
   if ( !shouldBeFalse )
      return;

   Message newMessage( message.makeMessage() );
   newMessage.insertAt( 0, translate( "expression did not evaluate to false." ) );
   fail( newMessage );
d65 1
a65 1
void
d69 8
a76 6
   if ( assertionFailed )
      return;

   Message newMessage( translate( "Assertion expression did not fail as expected." ) );
   newMessage.extend( message.makeMessage() );
   fail( message );
d80 1
a80 1
void
d84 8
a91 6
   if ( !assertionFailed )
      return;

   Message newMessage( translate( "Assertion expression did not pass as expected." ) );
   newMessage.extend( message.makeMessage() );
   fail( message );
d95 3
a97 2
Message 
buildEqualityFailedMessage( const std::string &expected,
d101 5
a105 5
   Message newMessage( message.makeMessage() );
   newMessage.add( translate( "Equality assertion failed." ) );
   newMessage.add( translate( "Expected: " ) + expected );
   newMessage.add( translate( "Actual  : " ) + actual );
   return newMessage;
d109 3
a111 2
Message 
buildUnequalityFailedMessage( const std::string &expected,
d115 5
a119 5
   Message newMessage( message.makeMessage() );
   newMessage.add( translate( "Unequality assertion failed (expected & actual should be different)." ) );
   newMessage.add( translate( "Expected: " ) + expected );
   newMessage.add( translate( "Actual  : " ) + actual );
   return newMessage;
d123 1
a123 1
void 
d129 1
d133 11
a143 10
   if ( diff <= tolerance )
      return;

   Message newMessage( message.makeMessage() );
   newMessage.add( translate( "Double equality assertion failed." ) );
   newMessage.add( translate( "Expected: " ) + CppTL::toString( expected ) );
   newMessage.add( translate( "Actual  : " ) + CppTL::toString( actual ) );
   newMessage.add( translate( "Tolerance  : " ) + CppTL::toString( tolerance ) );
   newMessage.add( translate( "Actual difference  : " ) + CppTL::toString( diff ) );
   fail( newMessage );
@


1.18
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d12 1
a12 1
fail( const Message &message )
d14 8
a21 1
   currentAssertion().setMessages( message );
d28 1
a28 1
           const Message &message )
d33 1
a33 1
   Message newMessage( message );
d41 1
a41 1
            const Message &message )
d46 1
a46 1
   Message newMessage( message );
d54 1
a54 1
                    const Message &message )
d60 1
a60 1
   newMessage.extend( message );
d67 1
a67 1
                    const Message &message )
d73 1
a73 1
   newMessage.extend( message );
d81 1
a81 1
                            const Message &message )
d83 1
a83 1
   Message newMessage( message );
d94 1
a94 1
                              const Message &message )
d96 1
a96 1
   Message newMessage( message );
d108 1
a108 1
                   const Message &message )
d116 1
a116 1
   Message newMessage( message );
@


1.17
log
@- added unit tests for TestInfo
- fixed bug in CPPUT_IGNORE_FAILURE and exception guard.
- added 'isIgnoredFailure' to Assertion.
- lighttestrunner now print ignored failure and skipped tests.
@
text
@d1 1
a1 1
# include <cpput/assert.h>
@


1.16
log
@- added CPPUT_SKIP_TEST to skip the current test
- added CPPUT_IGNORE_FAILURE( assertion ) to ignore a failure caused by an assertion, but count the failed assertion
@
text
@d122 1
a122 1
   TestStatus &status = TestInfo::threadInstance().getUpdatedTestStatus();
@


1.15
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d119 10
@


1.14
log
@* added CPPUT_ASSERT_DOUBLES_EQUAL and CPPUT_CHECK_DOUBLES_EQUAL
@
text
@d72 2
a73 2
buildEqualityFailedMessage( const CppTL::ConstString &expected,
                            const CppTL::ConstString &actual,
d85 2
a86 2
buildUnequalityFailedMessage( const CppTL::ConstString &expected,
                              const CppTL::ConstString &actual,
@


1.13
log
@* Replaced function in namespace TestInfo by exposing the TestInfoData class and renaming it TestInfo. TestInfo in now an exposed per thread singleton.
* startNewTest() is now called from TestCase::runTest() instead of being the test runner responsability. There still a few call to this method in cpput bootstrap test (which use assertion without run a test case).
@
text
@d97 22
@


1.12
log
@* Enhanced failure report output
@
text
@d14 2
a15 2
   TestInfo::currentAssertion().setMessages( message );
   TestInfo::realizeAssertion();
@


1.11
log
@Rewrote failure reporting during test. It now provides more structure while still providing some flexibility.
@
text
@d27 1
a27 1
   newMessage.insertAt( 0, translate( "Assertion failed: expression did not evaluate to true." ) );
d40 1
a40 1
   newMessage.insertAt( 0, translate( "Assertion failed: expression did not evaluate to false." ) );
@


1.10
log
@* removed unnecessary on thread.h
@
text
@d14 1
a14 2
   for ( int index =0; index < message.count(); ++index )
      TestInfo::currentAssertion()["messages"].append( message.at(index) );
@


1.9
log
@* moved cpput/typehelper.h to cpptl/typename.h
* renamed helper functions: getObjectTypeName(), getTypeName() and demangleTypeInfoName()
* With mingw, typeinfo name is correctly extracted (skip initial digits)
* added automatic detection of the presence of RTTI with msvc.
@
text
@a3 1
# include <cpput/thread.h>
@


1.8
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@a5 1
# include <cpput/typehelper.h>
@


1.7
log
@* renamed 'message' to 'messages'
@
text
@d56 1
a56 1
   newMessage.add( message );
d69 1
a69 1
   newMessage.add( message );
d75 2
a76 2
buildEqualityFailedMessage( const std::string &expected,
                            const std::string &actual,
d88 2
a89 2
buildUnequalityFailedMessage( const std::string &expected,
                              const std::string &actual,
@


1.6
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@d17 1
a17 1
      TestInfo::currentAssertion()["message"].append( message.at(index) );
@


1.5
log
@* moved the assertion implementation to using TestInfo.
* added assertion (tested/failed) counter to TestInfo.
@
text
@a1 2
# include <cpput/resultexception.h>
# include <cpput/location.h>
@


1.4
log
@* added CPPUT_SUCCEED to report a success with a structured message (warning, time, actual/excepted values...). Throw SuccessException.
@
text
@a13 13
static ThreadLocalStorage<Location> checkPointLocation;


void setCheckPointLocation( const Location &location )
{
   checkPointLocation.set( location );
}

Location getCheckPointLocation()
{
   return checkPointLocation.get();
}

d18 3
a20 7
   throw AssertException( message, getCheckPointLocation() );
}

void 
succeed( const Message &message )
{
   throw SuccessException( message, getCheckPointLocation() );
d50 26
@


1.3
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d34 6
@


1.2
log
@* fixed bug in ThreadLocalStorageManager
@
text
@d2 1
a2 1
# include <cpput/assertexception.h>
@


1.1
log
@Initial revision
@
text
@d6 1
d14 1
a14 2
   // @@todo Make this thread-safety portable
   __declspec(thread) static LocationData checkPointLocation = { 0,-1,0 };
d16 10
a25 10
   /// @@todo Not thread-safe at the current time.
   void setCheckPointLocation( const Location &location )
   {
      checkPointLocation = location;
   }

   Location getCheckPointLocation()
   {
      return checkPointLocation;
   }
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
