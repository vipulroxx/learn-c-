head	1.7;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.5
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.2
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.1.1.1
	TG_AFTER_REMOVING_TESTCONTEXT:1.1.1.1
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.1.1.1
	TG_BEFORE_REMOVING_TESTCONTEXT:1.1.1.1
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.7
date	2008.07.08.20.42.00;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2007.08.15.11.20.57;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.11.08.23.25.31;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.21.44.55;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.02.27.10.17.05;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.35;	author blep;	state Exp;
branches;
next	;


desc
@@


1.7
log
@- Fixed bug in Registry::remove() when a suite had multiple child suites.
- Added Registry suite removal tests
@
text
@#include <cpput/registry.h>
#include <cpput/testsuite.h>
#include <cpput/translate.h>


namespace CppUT {

   /// \cond implementation_detail
   namespace Impl {
      struct ThreadSafeSuiteFactory
      {
         typedef TestPtr result_type;

         typedef TestPtr (*SuiteFactoryFn)( const std::string &suiteName);
         ThreadSafeSuiteFactory( SuiteFactoryFn factory,
                                 const std::string &suiteName )
            : factory_( factory )
            , suiteName_( suiteName )
         {
         }

         TestPtr operator()() const
         {
            return factory_( suiteName_ );
         }

         std::string suiteName_;
         SuiteFactoryFn factory_;
      };
   } // namespace Impl
   /// \endcond


std::string 
Registry::defaultParentSuiteName()
{
   return "";
}


Registry &
Registry::instance()
{
   static Registry registry;     // @@todo make this thread safe if multi-threading is enabled.
   return registry;
}


Registry::Registry()
   : nextId_( 0 )
{
}


void 
Registry::addChild( const std::string &parentSuiteName,
                    const std::string &childSuiteName )
{
//   ParentChildRelationShips::iterator it = relations_.find( childSuiteName );

//   relations_.erase( childSuiteName );     // erase inversed relationship
   relations_.insert( ParentChildRelationShips::value_type( parentSuiteName, childSuiteName ) );
}


void 
Registry::addChildToDefault( const std::string &childSuiteName )
{
   addChild( defaultParentSuiteName(), childSuiteName );
}


bool 
Registry::removeChild( const std::string &parentSuiteName,
                       const std::string &childSuiteName )
{
   ParentChildRelationShips::iterator it = relations_.find( parentSuiteName );
   for ( ; it != relations_.end()  &&  it->first == parentSuiteName; ++it )
   {
      const CppTL::ConstString &currentChildName = it->second;
      if ( currentChildName == childSuiteName )
      {
         relations_.erase( it );
         return true;
      }
   }
   return false;
}


TestFactoryId
Registry::add( const std::string &parentSuiteName,
               const TestFactory &testFactory )
{
   CppTL::ConstString actualParentSuiteName = parentSuiteName;
   if ( parentSuiteName.empty() )
      actualParentSuiteName = defaultParentSuiteName();
   TestFactoryId id = nextFactoryId();
   registry_[ actualParentSuiteName ].push_back( TestFactoryWithId( testFactory, id ) );
   parentSuiteById_[ id ] = actualParentSuiteName;
   return id;
}


TestFactoryId 
Registry::add( const std::string &parentSuiteName,
               TestPtr (*factory)() )
{
   return add( parentSuiteName, CppTL::cfn0r( factory ) );
}


TestFactoryId 
Registry::add( const std::string &parentSuiteName,
               TestPtr (*factory)( const std::string &suiteName ),
               const std::string &suiteName )
{
   return add( parentSuiteName, 
               CppTL::fn0r( Impl::ThreadSafeSuiteFactory( factory, suiteName ) ) );
}


TestFactoryId
Registry::addToDefault( const TestFactory &testFactory )
{
   return add( defaultParentSuiteName(), testFactory );
}

TestFactoryId 
Registry::addToDefault( TestPtr (*factory)() )
{
   return addToDefault( CppTL::cfn0r( factory ) );
}

TestFactoryId 
Registry::addToDefault( TestPtr (*factory)( const std::string &suiteName ),
                        const std::string &suiteName)
{
   return addToDefault( CppTL::fn0r( Impl::ThreadSafeSuiteFactory( factory, 
                                                                   suiteName ) ) );
}


bool 
Registry::remove( TestFactoryId testFactoryId )
{
   TestFactoryParentSuiteById::iterator parentIt = parentSuiteById_.find( testFactoryId );
   if ( parentIt == parentSuiteById_.end() )
      return false;

   CppTL::ConstString parentSuiteName = parentIt->second;
   TestFactoryRegistry::iterator itRegistry = registry_.find( parentSuiteName );
   if ( itRegistry == registry_.end() )
      return false;

   TestFactories &factories = itRegistry->second;
   TestFactories::iterator itFactory = factories.begin();
   bool found = false;
   while ( itFactory != factories.end() )
   {
      if ( itFactory->second == testFactoryId )
      {
         itFactory = factories.erase( itFactory );
         found = true;
      }
      else
         ++itFactory;
   }

   return found;
}



/*
void 
Registry::destroy( const CppTL::ConstString &suiteName )
{
   registry_.erase( suiteName );
   ParentChildRelationShips::iterator it = relations_.begin();
   ParentChildRelationShips::iterator itEnd = relations_.end();
   while ( it != itEnd )
   {
      if ( it->first == suiteName  ||  it->second == suiteName )
        relations_.erase( it++ );
      else
         ++it;
   }
}
*/

TestSuitePtr 
Registry::createTests( const std::string &suiteName ) const
{
   if ( suiteName == defaultParentSuiteName() )
      return createDefaultTests();

   TestSuitePtr suite( makeTestSuite( suiteName ) );
   addCreatedTests( suiteName, suite );
   return suite;
}


TestSuitePtr 
Registry::createDefaultTests() const
{
   TestSuitePtr suite( makeTestSuite( translate( "All Tests" ) ) );
   addCreatedTests( defaultParentSuiteName(), suite );
   return suite;
}


void 
Registry::addCreatedTests( const std::string &suiteName,
                           const TestSuitePtr &suite ) const
{
   addChildSuite( suiteName, suite );
   addSuiteRegisteredTests( suiteName, suite );
}


void 
Registry::addChildSuite( const std::string &suiteName, 
                         const TestSuitePtr &suite ) const
{
   ParentChildRelationShips::const_iterator itChild = relations_.lower_bound( suiteName );
   ParentChildRelationShips::const_iterator itChildEnd = relations_.upper_bound( suiteName );
   while ( itChild != itChildEnd )
   {
      const CppTL::ConstString &childSuiteName = itChild->second;
      suite->add( createTests( childSuiteName.str() ) );
      ++itChild;
   }
}


void 
Registry::addSuiteRegisteredTests( const std::string &suiteName, 
                                   const TestSuitePtr &suite ) const
{
   TestFactoryRegistry::const_iterator itSuite = registry_.find( suiteName );
   if ( itSuite == registry_.end() )
      return;

   const TestFactories &factories = itSuite->second;
   TestFactories::const_iterator itFactory = factories.begin();
   TestFactories::const_iterator itFactoryEnd = factories.end();
   while ( itFactory != itFactoryEnd )
   {
      TestFactory factory = (*itFactory++).first;
      suite->add( factory() );
   }
}


TestFactoryId 
Registry::nextFactoryId()
{
   return nextId_++;
}


} // namespace CppUT
@


1.6
log
@   Added support for light test fixture (a la CppUnitLite).
See lightfixture.h and example/light_fixture.
   Added support for direct declaration and registration of test in plain C
function. See testfunction.h and example/test_function.
@
text
@d78 1
a78 1
   while ( it != relations_.end()  &&  it->first == parentSuiteName )
d80 2
a81 1
      if ( it->second == childSuiteName )
@


1.5
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@d66 7
@


1.4
log
@- fixed static registration macro for Registry
- static registration macros must no longer be followed by a semi-colon
  (therefore we get compiler error if registry.h was not included)
- allow registration macros to work with class implenting suite() or suite( const std::string &).
@
text
@d8 1
d31 1
@


1.3
log
@- changed most interface to use std::string instead of CppTL::ConstString
- CppTL::ConstString is now an implementation detail and is used to store string in objects as it is thread-safe.
@
text
@d8 23
d95 18
d119 14
@


1.2
log
@* use CppTL::ConstString instead of std::string for thread-safety
@
text
@d9 1
a9 1
CppTL::ConstString 
d31 2
a32 2
Registry::addChild( const CppTL::ConstString &parentSuiteName,
                    const CppTL::ConstString &childSuiteName )
d42 2
a43 2
Registry::removeChild( const CppTL::ConstString &parentSuiteName,
                       const CppTL::ConstString &childSuiteName )
d59 1
a59 1
Registry::add( const CppTL::ConstString &parentSuiteName,
d62 3
d66 2
a67 2
   registry_[ parentSuiteName ].push_back( TestFactoryWithId( testFactory, id ) );
   parentSuiteById_[ id ] = parentSuiteName;
d128 1
a128 1
Registry::createTests( const CppTL::ConstString &suiteName ) const
d149 1
a149 1
Registry::addCreatedTests( const CppTL::ConstString &suiteName,
d158 1
a158 1
Registry::addChildSuite( const CppTL::ConstString &suiteName, 
d166 1
a166 1
      suite->add( createTests( childSuiteName ) );
d173 1
a173 1
Registry::addSuiteRegisteredTests( const CppTL::ConstString &suiteName, 
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
std::string 
d31 2
a32 2
Registry::addChild( const std::string &parentSuiteName,
                    const std::string &childSuiteName )
d42 2
a43 2
Registry::removeChild( const std::string &parentSuiteName,
                       const std::string &childSuiteName )
d59 1
a59 1
Registry::add( const std::string &parentSuiteName,
d83 1
a83 1
   std::string parentSuiteName = parentIt->second;
d109 1
a109 1
Registry::destroy( const std::string &suiteName )
d125 1
a125 1
Registry::createTests( const std::string &suiteName ) const
d146 1
a146 1
Registry::addCreatedTests( const std::string &suiteName,
d155 1
a155 1
Registry::addChildSuite( const std::string &suiteName, 
d162 1
a162 1
      const std::string &childSuiteName = itChild->second;
d170 1
a170 1
Registry::addSuiteRegisteredTests( const std::string &suiteName, 
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
