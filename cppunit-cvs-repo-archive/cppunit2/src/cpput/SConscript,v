head	1.12;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.11
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.3
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.3
	TG_AFTER_REMOVING_TESTCONTEXT:1.2
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.2
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2;
locks; strict;
comment	@# @;


1.12
date	2008.07.13.08.19.20;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.02.11.24.53;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.11.07.22.43.08;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.08.08.22.10.21;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.08.06.22.26.31;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.07.04.08.11.25;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.03.06.18.48.23;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.03.05.11.02.25;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.03.04.08.23.39;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.02.23.23.10.58;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.06.14.23.30.12;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.31.23.08.40;	author blep;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- Added core framework for resource handling to test case, resource registry and test info. Not integrated with the test runner and no unit tests yet.
@
text
@Import( 'env buildLibary' )

buildLibary( env, Split( """
    assert.cpp 
    assertstring.cpp 
    exceptionguard.cpp
    extendeddata.cpp
    lighttestrunner.cpp
	message.cpp
    registry.cpp 
    resource.cpp
    testcase.cpp 
    testinfo.cpp 
    testsuite.cpp
     """ ),
    'cpput' )
@


1.11
log
@- added LazyMessage, a simple proxy class that avoid building Message until it is really needed (assertion failed).
@
text
@d11 1
@


1.10
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d9 1
@


1.9
log
@Rewrote failure reporting during test. It now provides more structure while still providing some flexibility.
@
text
@a8 1
    properties.cpp 
@


1.8
log
@Added extendeddata.cpp
@
text
@a12 1
    testrunner.cpp 
@


1.7
log
@* fixed bug in lighttestrunner: called AbstractTestCase::run instead of runTest().
* fixed usage of incomplete SharedPtr in TestRunner.
@
text
@d7 1
@


1.6
log
@* added a library for cpptl for threading functionnalies.
@
text
@d6 2
a7 1
    exceptionguard.cpp 
@


1.5
log
@* changed from using string split() method to scons Split() helper function for portability with python 1.5.2.
@
text
@d12 1
a12 2
    testsuite.cpp 
    thread.cpp
@


1.4
log
@* added buildLibrary() and buildLibraryUnitTest() exported functions to sconstruct
* refactored sconscript to use the exported functions
* build productions are now placed in a platform specific subdirectory (bin/mingw/...)
@
text
@d3 1
a3 1
buildLibary( env, """
d14 1
a14 1
     """.split(),
@


1.3
log
@* scons can be used to build cppunit 2 using mingw
@
text
@d1 1
a1 1
Import( 'env' )
d3 1
a3 3
env = env.Copy( LIBPATH = '#libs' )

cpput_sources="""
d14 2
a15 13
     """.split()

static_lib = env.StaticLibrary( target='cpput',
                                source=cpput_sources )


#shared_lib = env.SharedLibrary( target='cpput',
#                                source=cpput_sources )

libs_dir='#libs'
bin_dir='#bin'

env.Install( libs_dir, static_lib )
@


1.2
log
@* clean up
@
text
@d1 1
a1 131
# cpput lib build script
import os.path

##Release:
##/O2 /I "..\..\include" /D "WIN32" /D "NDEBUG" /D "_LIB" /D "_MBCS"
##/FD /EHsc /MT /GR /YX"stdafx.h"
##/Fp".\..\..\build\cpput\release/cpput.pch"
##/Fo".\..\..\build\cpput\release/"
##/Fd".\..\..\build\cpput\release/" /W3 /nologo /c

##/EHa : enable exception (any instructions can throw an exception)
##/MT: multithreaded
##/MTd: mutlithread & debug
##/MD: multithreaded dll
##/MDd: multithreaded dll & debug
##/ML: singlethreaded
##/MLd: singlethreaded & debug
##/GR: enable rtti (_CPPRTTI  is defined)
##/GF: enable string-pooling as read-only
##/W3: warning level 3
##/nologo: disable copyright message
##/Zi: produce PDB debug information
##/Oi: enable intrinsic function optimization
##/Za: disable language extension (compile in C++ conformant mode)

##/Fd: PDB filename (link?)
##/Gy: enable function level linking

##Debug:
##/Od: disable optimization
##/RTCc: smaller type check
##/RTC1: stack frame & uninitialized variable check
##/GS: buffer security check

# variant options:
# crtdll
# nothread, threaded
# release,debug
# exception, noexception
# rtti, nortti
# ansi, extension
# stl, stlport

# crt/rtti

class BadBuildFeatures(RuntimeError):
	def __init__( self, message ):
		RuntimeError.__init__( message )

class FeatureValidator:
	def validate( self, features ):
		pass

	def checkIncompatibility( self, features, feature_set, incompatible_feature_set ):
		feature_set = self._getActualFeatures( feature_set )
		incompatible_feature_set = self._getActualFeatures( incompatible_feature_set )
		for feature in feature_set:
			if feature in incompatible_feature_set:
				self.reportIncompatibleFeatures( feature_set, incompatible_feature_set )
				
	def _getActualFeatures( self, wanted_features, actual_features ):
		if type(wanted_features) is str:
			wanted_features = [ wanted_features ]
		return filter( lambda feature: feature in actual_features )
	
	def reportIncompatibleFeatures( self, features1, features2 ):
		raise BadBuildFeatures( 'Feature <%s> can not be used with %s.' % (','.join(feature1s),','.join(feature2)) )

class CRTFeatureValidator(FeatureValidator):
	def validate( self, features ):
		self.checkIncompatibility( features, 'crtldll thread'.split(), 'nothread' )
		self.checkIncompatibility( features, 'release', 'debug' )

class OptionsFeatureValidator(CRTFeatureValidator):
	def validate( self, features ):
		CRTFeatureValidator.validate( self, features )
		self.checkIncompatibility( 'rtti', 'nortti' )
		self.checkIncompatibility( 'exception', 'noexception' )
		self.checkIncompatibility( 'ansi', 'extension' )

msvc71_compiler_options = [
	'__default__ : /W3 /nologo /GF',
	'crtdll release : /MD',
	'crtdll debug : /MDd',
	'threaded release : /MT',
	'threaded debug : MTd',
	'nothread release : /ML',
	'nothread debug : MLd',
	'rtti : /GR',
	'exception : /EHa',
	'noexception : /GX-',
	'ansi : /Za',
	'extension : /Ze',
	'release : /O2 /Oi',
	'debug : /Od' ]

preprocessor_options = [
	'__default__ : win32',
	'release : NDEBUG',
	'debug : _DEBUG' ]

def getCompilerOptions( features, options_map ):
	all_compiler_options = []
	for option in options_map:
		splitted = option.split(':')
		option_features = splitted[0].split()
		compiler_options = splitted[1].strip()
		has_option_features = True
		for feature in option_features:
			if feature not in features:
				has_option_features = False
				break
		if has_option_features:
			all_compiler_options.append( compiler_options )
	return ' '.join( all_compiler_options )
			

Import( 'base_env' )
env = base_env.Copy()


class FilterTargetByExt:
     def __init__( self, ext ):
         self.ext = ext
     def __call__( self, target ):
         import os
         return os.path.splitext( str(target) )[1] == self.ext

def FindDllNodeInNodes( targets ):
     return 

d3 1
d6 9
a14 8
    assert.cpp
    assertstring.cpp
    atomiccounter.cpp
    registry.cpp
    testcase.cpp
    testcontext.cpp
    testfailureguard.cpp
    testsuite.cpp
d16 1
a16 1
    """
d18 2
a19 1
BuildDir ('#buildscons/cpput/static', '#src/cpput', duplicate=0) 
a20 8
def prefix_list( list, prefix ):
	return map( lambda item: os.path.join( prefix, item ), list )

cpput_sources = prefix_list( Split(cpput_sources), '#buildscons/cpput/static' )
#print '\n'.join(cpput_sources)

static_lib = env.StaticLibrary( target='cpput-vc6-rs',
                                source=cpput_sources )
d22 2
a23 4
#BuildDir('#build/cpput/dll', '#src/cpput', duplicate=0)
#env.Append( CCFLAGS=' -DCPPUT_DLL_BUILD' )
#shared_lib = env.SharedLibrary( target='cpput-vc6-rd',
#                                source=Split(cpput_sources) )
a28 2
#env.Install( libs_dir, filter( FilterTargetByExt('.lib'), shared_lib ) )
#env.Install( bin_dir, filter( FilterTargetByExt('.dll'), shared_lib ) )
@


1.1
log
@* added very basic scons script
@
text
@d1 117
d146 7
a152 1
#BuildDir ('#buildscons/cpput/static', '#src/cpput', duplicate=0) 
d155 1
a155 1
                                source=Split(cpput_sources) )
@

