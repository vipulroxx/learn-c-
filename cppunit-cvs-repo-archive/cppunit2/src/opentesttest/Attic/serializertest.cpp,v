head	1.9;
access;
symbols;
locks; strict;
comment	@// @;


1.9
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.8;

1.8
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.09.21.45.08;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.08.23.25.31;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.07.22.43.08;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.02.20.27.37;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.01.20.32.04;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.01.08.19.37;	author blep;	state Exp;
branches;
next	;


desc
@@


1.9
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#include "serializertest.h"
#include <cpput/assertcommon.h>
#include <cpput/assertstring.h>
#include <cpput/registry.h>

namespace CppUT {
// converter for assert equal
inline std::string toString( const OpenTest::Value &value )
{
   return value.toStyledString();
}

} // namespace CppUT {


CPPUT_REGISTER_SUITE_TO_DEFAULT( SerializerTest )


SerializerTest::SerializerTest()
{
}


SerializerTest::~SerializerTest()
{
}


void 
SerializerTest::setUp()
{
   prepareSerialize();
}


void 
SerializerTest::tearDown()
{
}


void 
SerializerTest::prepareSerialize()
{
   streamOut_.packets().beginWriteMessage();
}


void 
SerializerTest::prepareUnserialize()
{
   streamOut_.packets().endWriteMessage();

   // Read the serialized message in 'streamOut_'
   int length = streamOut_.packets().getFirstMessageLength();
   void *buffer = new char[length];
   streamOut_.packets().read( buffer, length );
   streamOut_.packets().discardFirstMessage();

   // and write the serialized message back in 'streamIn_'
   streamIn_.packets().beginWriteMessage();
   streamIn_.packets().write( buffer, length );
   streamIn_.packets().endWriteMessage();
   delete [] (char *)buffer;
}

void 
SerializerTest::testBasicInteger()
{
   streamOut_ << 1 << -2;
   prepareUnserialize();
   int x, y;
   streamIn_ >> x >> y;
   CPPUT_ASSERT_EQUAL( 1, x );
   CPPUT_ASSERT_EQUAL( -2, y );
}


void 
SerializerTest::testMinMaxInteger()
{
   const int minInt = 1 << (sizeof(int) * 8 - 1);  // set sign bit
   const int maxInt = ~minInt;   // all bits but sign bit
   streamOut_ << maxInt << minInt;
   prepareUnserialize();
   int x, y;
   streamIn_ >> x >> y;
   CPPUT_ASSERT_EQUAL( maxInt, x );
   CPPUT_ASSERT_EQUAL( minInt, y );
}


void 
SerializerTest::testReal()
{
   double x1 = 1.23456789;
   double x2 = 12345678.9;
   streamOut_ << x1 << x2;
   prepareUnserialize();
   double x, y;
   streamIn_ >> x >> y;
   CPPUT_ASSERT_EQUAL( x1, x );
   CPPUT_ASSERT_EQUAL( x2, y );
}


void 
SerializerTest::testString()
{
   OpenTest::String empty;
   OpenTest::String text = "abcdefhjk.123798+-,_()[]\"'";
   streamOut_ << text << empty;
   prepareUnserialize();
   OpenTest::String s1, s2;
   streamIn_ >> s1 >> s2;
   CPPUT_ASSERTSTR_EQUAL( text, s1 );
   CPPUT_ASSERTSTR_EQUAL( empty, s2 );
}


void 
SerializerTest::testBool()
{
   streamOut_ << true << false;
   prepareUnserialize();
   bool x, y;
   streamIn_ >> x >> y;
   CPPUT_ASSERT_EQUAL( true, x );
   CPPUT_ASSERT_EQUAL( false, y );
}


void 
SerializerTest::testBasicValue()
{
   OpenTest::Value vEmpty;
   OpenTest::Value vUInt( (unsigned int)323456789 );
   OpenTest::Value vInt( -123456789 );
   OpenTest::Value vDouble( 1.2345678 );
   OpenTest::Value vString( "abcdefghijklmnopqrstuvwxyz" );
   streamOut_ << vEmpty << vUInt << vInt << vDouble;
   streamOut_ << vString;
   prepareUnserialize();
   OpenTest::Value v1, v2, v3, v4, v5;
   streamIn_ >> v1 >> v2 >> v3 >> v4;
   streamIn_ >> v5;
   CPPUT_ASSERT_EQUAL( vEmpty, v1 );
   CPPUT_ASSERT_EQUAL( vUInt, v2 );
   CPPUT_ASSERT_EQUAL( vInt, v3 );
   CPPUT_ASSERT_EQUAL( vDouble, v4 );
   CPPUT_ASSERT_EQUAL( vString, v5 );
}


void 
SerializerTest::testBasicProperty()
{
   OpenTest::Properties emptyValue;
   OpenTest::Properties arrayValue;
   OpenTest::Properties objectValue;
   OpenTest::Value vEmpty;
   OpenTest::Value vUInt( (unsigned int)323456789 );
   OpenTest::Value vInt( -123456789 );
   OpenTest::Value vDouble( 1.2345678 );
   OpenTest::Value vString( "abcdefghijklmnopqrstuvwxyz" );
   arrayValue.append( vEmpty );
   arrayValue.append( vUInt );
   arrayValue.append( vInt );
   arrayValue.append( vDouble );
   arrayValue.append( vString );
   objectValue["v1"] = vEmpty;
   objectValue["v2"] = vUInt;
   objectValue["v3"] = vInt;
   objectValue["v4"] = vDouble;
   objectValue["v5"] = vString;

   streamOut_ << emptyValue << arrayValue << objectValue;
   prepareUnserialize();
   OpenTest::Properties p1, p2, p3;
   streamIn_ >> p1 >> p2 >> p3;
   CPPUT_ASSERT_EQUAL( emptyValue, p1 );
   CPPUT_ASSERT_EQUAL( arrayValue, p2 );
   CPPUT_ASSERT_EQUAL( objectValue, p3 );
}
@


1.8
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@@


1.7
log
@- removed warning on linux-gcc
@
text
@d2 1
a2 1
#include <cpput/assert.h>
@


1.6
log
@- fixed static registration macro for Registry
- static registration macros must no longer be followed by a semi-colon
  (therefore we get compiler error if registry.h was not included)
- allow registration macros to work with class implenting suite() or suite( const std::string &).
@
text
@d64 1
a64 1
   delete [] buffer;
@


1.5
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d16 1
a16 1
CPPUT_REGISTER_SUITE_TO_DEFAULT( SerializerTest );
@


1.4
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@a7 5
inline std::string toString( const OpenTest::Properties &value )
{
   return value.toString().c_str();
}

d10 1
a10 1
   return value.toString().c_str();
d137 1
a137 1
   OpenTest::Value vUInt( 323456789 );
d141 2
a142 1
   streamOut_ << vEmpty << vUInt << vInt << vDouble << vString;
d145 2
a146 1
   streamIn_ >> v1 >> v2 >> v3 >> v4 >> v5;
d158 3
a160 2
   OpenTest::Properties emptyProperties;
   OpenTest::Properties properties;
d162 1
a162 1
   OpenTest::Value vUInt( 323456789 );
d166 18
a183 17
   properties.append( vEmpty );
   properties.append( vUInt );
   properties.append( vInt );
   properties.append( vDouble );
   properties.append( vString );
   properties["v1"] = vEmpty;
   properties["v2"] = vUInt;
   properties["v3"] = vInt;
   properties["v4"] = vDouble;
   properties["v5"] = vString;

   streamOut_ << emptyProperties << properties;
   prepareUnserialize();
   OpenTest::Properties p1, p2;
   streamIn_ >> p1 >> p2;
   CPPUT_ASSERT_EQUAL( emptyProperties, p1 );
   CPPUT_ASSERT_EQUAL( properties, p2 );
@


1.3
log
@* Added a simple test runner that does not rely on the open test framework to run cppunit2 tests.
* added CppTL::ConstCharView to wrapper const char *strings.
* added CppTL::quoteMultiLineString()
* string assertion output actual and expected using quoteMultiLineString().
* added serialize unit test for basic Properties
* opentest tests now use the LightTestRunner.
@
text
@d4 1
d8 6
a13 1
inline std::string convertToString( const OpenTest::Value &value )
d21 3
d50 1
a50 1
   streamOut_.packets().beginMessage();
d57 3
a59 1
   streamOut_.packets().endSerializeMessage();
d62 1
a62 1
   streamOut_.packets().send( buffer, length );
d65 4
a68 3
   streamIn_.packets().beginMessage();
   streamIn_.packets().received( buffer, length );
   streamIn_.packets().endExternalMessage();
@


1.2
log
@* added more unit tests for serializer
* fixed bugs
* added strict operator == for Value and Properties.
@
text
@d130 1
a130 1
   OpenTest::Value vUInt( 123456789 );
d144 30
@


1.1
log
@* started adding unit tests for opentest
* added serializer unit test squeleton
* fixed some bug in serializer
* added opentesttest project to VS solution.
@
text
@d3 10
d84 60
@

