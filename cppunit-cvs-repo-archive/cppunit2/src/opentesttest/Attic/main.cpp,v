head	1.5;
access;
symbols;
locks; strict;
comment	@// @;


1.5
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.4;

1.4
date	2005.09.06.07.31.42;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.07.04.08.12.34;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.02.20.27.37;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.07.01.08.19.37;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#include <cpput/test.h>
#include <cpput/testsuite.h>
#include <cpput/lighttestrunner.h>
#include <cpput/registry.h>
#include <stdio.h>
#include "packetstest.h"
#include "serializertest.h"


static void displayConfiguration()
{
   CppTL::StringBuffer config;
// Thread API
#if CPPTL_HAS_THREAD
   config += "Thread: Yes, API = ";
# if CPPTL_USE_WIN32_THREAD
   config += "win32";
# elif CPPTL_USE_PTHREAD_THREAD
   config += "pthread";
# else
   config += "???";
# endif
   config += "\n";
#else
   config += "Thread: No\n";
#endif
// Atomic counter implementation
   config += "Atomic counter API: ";
#if CPPTL_HAS_THREAD_SAFE_ATOMIC_COUNTER
# if CPPTL_USE_LINUX_ATOMIC
   config += "linux atomic operations (limited to 24 bits)";
# elif CPPTL_USE_WIN32_ATOMIC
   config += "win32";
# elif CPPTL_USE_PTHREAD_ATOMIC
   config += "pthread mutex";
# else
   config += "???";
# endif
#else
   config += "none (not thread-safe)";
#endif
   config += "\n";
// Int64
   config += "Int64: ";
#ifndef CPPTL_NO_INT64
   config += "Yes\n";
#else
   config += "No\n";
#endif
// RTTI
   config += "RTTI: ";
#ifndef CPPTL_NO_RTTI
   config += "Yes\n";
#else
   config += "No\n";
#endif

   printf( "=> CPPUT Configuration:\n%s\n", config.c_str() );
}


int main( int argc, const char *argv[] )
{
   displayConfiguration();

   printf( "All bootstrap tests passed successfuly...\n" );

   CppUT::TestSuitePtr allSuite = CppUT::Registry::instance().createDefaultTests();
//   allSuite->add( PacketsTest::suite() );
   //allSuite->add( SerializerTest::suite() );

   CppUT::LightTestRunner runner;
   CppUT::TestPtr rootSuite = 
      CppTL::staticPointerCast<CppUT::Test>( allSuite );
   runner.addTest( rootSuite );
   bool sucessful = runner.runAllTests();
   return sucessful ? 0 : 1;
}
@


1.4
log
@* fixed compilation without RTTI
* revised stringize implementation to allow an additional customization point by overloading toString().
* added test and corrected bug in serialization/packets implementation.
@
text
@@


1.3
log
@* Started adding unit tests for Packets.
@
text
@d4 1
d68 2
a69 2
   CppUT::TestSuitePtr allSuite = CppUT::makeTestSuite( "All tests" );
   allSuite->add( PacketsTest::suite() );
@


1.2
log
@* Added a simple test runner that does not rely on the open test framework to run cppunit2 tests.
* added CppTL::ConstCharView to wrapper const char *strings.
* added CppTL::quoteMultiLineString()
* string assertion output actual and expected using quoteMultiLineString().
* added serialize unit test for basic Properties
* opentest tests now use the LightTestRunner.
@
text
@d5 1
d68 2
a69 1
   allSuite->add( SerializerTest::suite() );
@


1.1
log
@* started adding unit tests for opentest
* added serializer unit test squeleton
* fixed some bug in serializer
* added opentesttest project to VS solution.
@
text
@d3 1
a6 3
#include <cpput/testrunner.h>    // cppunit2 testrunner for opentest
#include <opentest/texttestdriver.h>

d69 5
a73 7
   CppUT::TestRunner runner;
   CppUT::AbstractTestSuitePtr rootSuite = 
      CppTL::staticPointerCast<CppUT::AbstractTestSuite>( allSuite );
   runner.setRootSuite( rootSuite );

   OpenTest::TextTestDriver driver( runner );
   bool sucessful = driver.run();
@

