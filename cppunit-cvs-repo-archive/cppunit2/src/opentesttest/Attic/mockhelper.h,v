head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.4;

1.4
date	2006.06.05.13.22.58;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.20.25.50;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.07.22.43.08;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.06.07.43.48;	author blep;	state Exp;
branches;
next	;


desc
@@


1.5
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#ifndef OPENTTEST_MOCKHELPER_H_INCLUDED
# define OPENTTEST_MOCKHELPER_H_INCLUDED

# include <json/value.h>
# include <cpput/assertenum.h>

/** A simple helper to implement (simple) mock object.
 *
 * \code
 * helper_.logEvent( "call a()" );   // log what is expected to happened
 * helper_.logEvent( "call b()" );
 * helper_.recordActualEvents();     // log what is actually happenning
 * helper_.logEvent( "call a()" );
 * helper_.logEvent( "call c()" );
 * MOCKHELPER_ASSERT_VERIFY( helper_ );   // check that the expected events match the actual events
 * \endcode
 */
class MockHelper
{
public:
   /// At construction, expected events are recorded.
   MockHelper();

   void clearEvents();

   bool isRecordingExpectedEvents() const;

   void recordExpectedEvents();

   void recordActualEvents();

   void verify( const CppUT::Message &message = CppUT::Message( "Actual events do not match expected events." ) );

   void logEvent( const Json::Value &value );

   const Json::Value &expectedEvents() const;
   const Json::Value &actualEvents() const;

private:
   Json::Value expectations_;
   Json::Value actuals_;
   bool recordExpectations_;
};


#define MOCKHELPER_ASSERT_VERIFY( instance ) \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   (instance).verify()

#define MOCKHELPER_CHECK_VERIFY( instance ) \
   CPPUT_BEGIN_CHECKING_MACRO() \
   (instance).verify()

#define MOCKHELPER_ASSERT_VERIFY_MSG( instance, msg ) \
   CPPUT_BEGIN_ASSERTION_MACRO() \
   (instance).verify( msg )

#define MOCKHELPER_CHECK_VERIFY_MSG( instance, msg ) \
   CPPUT_BEGIN_CHECKING_MACRO() \
   (instance).verify( msg )



inline
MockHelper::MockHelper()
   : recordExpectations_( true )
   , expectations_( Json::Value() )
   , actuals_( Json::Value() )
{
}


inline void 
MockHelper::clearEvents()
{
   expectations_ = Json::Value();
   actuals_ = Json::Value();
}



inline bool 
MockHelper::isRecordingExpectedEvents() const
{
   return recordExpectations_;
}

inline void 
MockHelper::recordExpectedEvents()
{
   recordExpectations_ = true;
}

inline void 
MockHelper::recordActualEvents()
{
   recordExpectations_ = false;
}

inline void 
MockHelper::verify( const CppUT::Message &message )
{
   CppUT::RefComparator<const Json::Value &,
                        const Json::Value &> comparator;
   CppUT::RefStringizer<const Json::Value &> stringizer;
   
   CppUT::checkCustomHeterogeneousSequenceEqual( 
      CppTL::Enum::range( expectations_.begin(), expectations_.end(), CppTL::Type<const Json::Value &>() ), 
      CppTL::Enum::range( actuals_.begin(), actuals_.end(), CppTL::Type<const Json::Value &>() ), 
      stringizer,
      stringizer,
      comparator,
      message );
   clearEvents();
   recordExpectedEvents();
}

inline void 
MockHelper::logEvent( const Json::Value &value )
{
   if ( recordExpectations_ )
      expectations_.append( value );
   else
      actuals_.append( value );
}


inline const Json::Value &
MockHelper::expectedEvents() const
{
   return expectations_;
}


inline const Json::Value &
MockHelper::actualEvents() const
{
   return actuals_;
}



# endif // OPENTTEST_MOCKHELPER_H_INCLUDED
@


1.4
log
@- synchronized with lastest jsoncpp.
@
text
@@


1.3
log
@* replaced include/opentest/properties.h with include/json/value.h
* replaced all occurrences of OpenTest::Value and OpenTest::Properties with Json::Value.
@
text
@d106 8
a113 6
   CppUT::checkCustomHeterogeneousSequenceEqual( expectations_.enumValues(), 
                                                 actuals_.enumValues(),
                                                 stringizer,
                                                 stringizer,
                                                 comparator,
                                                 message );
@


1.2
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d4 1
a4 1
# include <opentest/properties.h>
d34 1
a34 1
   void logEvent( const OpenTest::Value &value );
d36 2
a37 2
   const OpenTest::Value &expectedEvents() const;
   const OpenTest::Value &actualEvents() const;
d40 2
a41 2
   OpenTest::Value expectations_;
   OpenTest::Value actuals_;
d67 2
a68 2
   , expectations_( OpenTest::Properties() )
   , actuals_( OpenTest::Properties() )
d76 2
a77 2
   expectations_ = OpenTest::Value();
   actuals_ = OpenTest::Value();
d103 3
a105 3
   CppUT::RefComparator<const OpenTest::Value &,
                        const OpenTest::Value &> comparator;
   CppUT::RefStringizer<const OpenTest::Value &> stringizer;
d117 1
a117 1
MockHelper::logEvent( const OpenTest::Value &value )
d126 1
a126 1
inline const OpenTest::Value &
d133 1
a133 1
inline const OpenTest::Value &
@


1.1
log
@* tests for remote Interfaces implementation in opentest
@
text
@d103 9
a111 3
   CppUT::checkSequenceEqual( expectations_.asProperties().listValues(), 
                              actuals_.asProperties().listValues(),
                              message );
@

