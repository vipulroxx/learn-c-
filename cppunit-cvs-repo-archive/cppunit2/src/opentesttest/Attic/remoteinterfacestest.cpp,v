head	1.6;
access;
symbols;
locks; strict;
comment	@// @;


1.6
date	2006.09.01.19.27.59;	author blep;	state dead;
branches;
next	1.5;

1.5
date	2006.06.05.13.22.58;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2005.12.11.17.16.09;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.08.23.25.31;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2005.11.07.22.43.08;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.06.07.43.48;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- opentest library has been moved to its own project: http://www.sf.net/projects/opentest/
@
text
@#include <opentest/serializedtesttransport.h>
#include <cpput/testfixture.h>
#include <cpput/registry.h>
#include <cpptl/scopedptr.h>
#include "mockhelper.h"


namespace CppUT {
// converter for assert equal
inline std::string toString( const OpenTest::Value &value )
{
   return value.toStyledString().c_str();
}

} // namespace CppUT {



class MockTestRunner : public OpenTest::TestRunnerInterface
                     , public OpenTest::TestRunnerServer
                     , public MockHelper
{
public:
   MockTestRunner()
      : OpenTest::TestRunnerServer( static_cast<OpenTest::TestRunnerInterface &>(*this) )
   {
   }

public: // overridden from OpenTest::TestRunnerInterface
   virtual void getTestDescriptions()
   {
      logEvent( "getTestDescriptions" );
   }

   virtual void getTestPlans()
   {
      logEvent( "getTestPlans" );
   }

   virtual void runTests( const OpenTest::TestPlans &plan )
   {
      logEvent( OpenTest::String("runTests( " + CppTL::toString( plan.testPlans_.size() ) + ")").c_str() );
   }

   virtual void stopTests()
   {
      logEvent( "stopTests" );
   }
};


class RemoteInterfacesTest : public CppUT::TestFixture
{
   CPPUT_TESTSUITE_BEGIN( RemoteInterfacesTest );
   CPPUT_TEST( testSimpleMessage );
   CPPUT_TEST( testTestRunnerProxy );
   CPPUT_TESTSUITE_END();

public:
   void setUp();
   void tearDown();

   void testSimpleMessage();
   void testTestRunnerProxy();

private:
   CppTL::ScopedPtr<OpenTest::SerializedTestTransport> transport_;
   CppTL::ScopedPtr<OpenTest::TestRunnerProxy> testRunnerProxy_;
   CppTL::ScopedPtr<MockTestRunner> testRunner_;
};


CPPUT_REGISTER_SUITE_TO_DEFAULT( RemoteInterfacesTest )


void
RemoteInterfacesTest::setUp()
{
   transport_.reset( new OpenTest::SerializedTestTransport() );
   testRunnerProxy_.reset( new OpenTest::TestRunnerProxy() );
   testRunnerProxy_->setTransport( *transport_ );
   testRunner_.reset( new MockTestRunner() );
}


void 
RemoteInterfacesTest::tearDown()
{
   testRunnerProxy_.reset();
   transport_.reset();
   testRunner_.reset();
}

void 
RemoteInterfacesTest::testSimpleMessage()
{
   testRunner_->getTestDescriptions();
   testRunner_->recordActualEvents();

   testRunnerProxy_->getTestDescriptions();
   transport_->dispatchReceivedMessages( *testRunner_ );
   MOCKHELPER_ASSERT_VERIFY( *testRunner_ );
}


void 
RemoteInterfacesTest::testTestRunnerProxy()
{
   testRunner_->getTestDescriptions();
   testRunner_->getTestPlans();
   OpenTest::TestPlans plans1;
   testRunner_->runTests( plans1 );
   OpenTest::TestPlans plans2;
   OpenTest::TestPlan plan1;
   plan1.testCase_ = OpenTest::TestId( 1234 );
   plan1.name_ = "dummy test";
   plans2.testPlans_.push_back( plan1 );
   testRunner_->runTests( plans2 );
   testRunner_->stopTests();
   testRunner_->recordActualEvents();

   testRunnerProxy_->getTestDescriptions();
   testRunnerProxy_->getTestPlans();
   testRunnerProxy_->runTests( plans1 );
   testRunnerProxy_->runTests( plans2 );
   testRunnerProxy_->stopTests();

   transport_->dispatchReceivedMessages( *testRunner_ );
   MOCKHELPER_ASSERT_VERIFY( *testRunner_ );
}
@


1.5
log
@- synchronized with lastest jsoncpp.
@
text
@@


1.4
log
@* rough sketch of a working OpenTest driver with CppUT adaptor for TestRunner.
@
text
@d42 1
a42 1
      logEvent( OpenTest::String("runTests( " + CppTL::toString( plan.testPlans_.size() ) + ")") );
@


1.3
log
@- fixed static registration macro for Registry
- static registration macros must no longer be followed by a semi-colon
  (therefore we get compiler error if registry.h was not included)
- allow registration macros to work with class implenting suite() or suite( const std::string &).
@
text
@a114 1
   plan1.id_ = OpenTest::TestId( 5678 );
@


1.2
log
@- replaced usage of OpenTest::Properties with Json::Value.
  Json::Value provides a simpler interface and a standard *simple* serialization
  format.
- jsoncpp has been inlined in CppTL to make deploy easier and remove
  an external dependency.
@
text
@d73 1
a73 1
CPPUT_REGISTER_SUITE_TO_DEFAULT( RemoteInterfacesTest );
@


1.1
log
@* tests for remote Interfaces implementation in opentest
@
text
@a9 5
inline std::string toString( const OpenTest::Properties &value )
{
   return value.toString().c_str();
}

d12 1
a12 1
   return value.toString().c_str();
@

