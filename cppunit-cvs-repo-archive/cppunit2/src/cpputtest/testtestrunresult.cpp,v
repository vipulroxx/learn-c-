head	1.6;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.6
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.5
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.5
	TG_AFTER_REMOVING_TESTCONTEXT:1.5
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.4;
locks; strict;
comment	@// @;


1.6
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.20.12.17.52;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.04.08.01.15;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.04.07.55.43;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.04.06.43.57;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.08.03.22.36.15;	author blep;	state Exp;
branches;
next	;


desc
@@


1.6
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@#include <cpput/testrunresult.h>
#include <cpput/assertcommon.h>
#include <cpput/resultexception.h>
#include <cpput/test.h>
#include <cpput/testcontext.h>
#include <iostream>

namespace {
   class DummyTest : public CppUT::AbstractTest
   {
   public:

      void run( CppUT::TestContext &context )
      {
      }

      void accept( CppUT::TestVisitor &visitor )
      {
      }

      int totalTestCount() const
      {
         return 1;
      }
   };
}


bool testTestRunResult()
{
   try
   {
      CppUT::TestInfo::startNewTest();
      CppUT::TestRunResult result;
      CppUT::TestContext context;
      CPPUT_ASSERT( result.successful() );
      CPPUT_ASSERT_EQUAL( 0, result.failureCount() );

      DummyTest dummyTest1;
      CppUT::Message message1( "message1" );
      message1.setStatus( false );
      message1.setResultType( "fault" );
      CppUT::TestResult failure1( dummyTest1, message1 );

      result.processTestResult( failure1, context );
      CPPUT_ASSERT_FALSE( result.successful() );
      CPPUT_ASSERT_EQUAL( 1, result.failureCount() );
      const CppUT::TestResult &failure1b = result.failureAt(0);
      CPPUT_ASSERT_FALSE( failure1b.isAssertionFailure() );
      CPPUT_ASSERT_EQUAL( 1, failure1b.message().count() );
      CPPUT_ASSERT_EQUAL( "message1", failure1b.message().at(0) );

      DummyTest dummyTest2;
      CppUT::Message message2( "message2" );
      message2.setStatus( false );
      message2.setResultType( "assertion" );
      CppUT::TestResult failure2( dummyTest2, message2, 
                                  CppUT::Location( "somefile.cpp", 123 ) );
      result.processTestResult( failure2, context );
      CPPUT_ASSERT_FALSE( result.successful() );
      CPPUT_ASSERT_EQUAL( 2, result.failureCount() );
      const CppUT::TestResult &failure2b = result.failureAt(1);
      CPPUT_ASSERT( failure2b.isAssertionFailure() );
      CPPUT_ASSERT_EQUAL( 1, failure2b.message().count() );
      CPPUT_ASSERT_EQUAL( "message2", failure2b.message().at(0) );
      CPPUT_ASSERT_EQUAL( "somefile.cpp", failure2b.location().fileName() );
      CPPUT_ASSERT_EQUAL( 123, failure2b.location().lineNumber() );


      DummyTest dummyTest3;
      CppUT::Message message3( "message3" );
      message3.setStatus( false );
      message3.setResultType( "assertion" );
      CppUT::TestResult failure3( dummyTest3, message3, 
                                  CppUT::Location( "somefile3.cpp", 23 ) );
      result.processTestResult( failure3, context );
      CPPUT_ASSERT_EQUAL( 3, result.failureCount() );
      CPPUT_ASSERT( result.failureAt(2).isAssertionFailure() );

      DummyTest dummyTest4;
      CppUT::Message message4( "message4" );
      message3.setStatus( false );
      message3.setResultType( "assertion" );
      CppUT::TestResult failure4( dummyTest4, message4 );
      result.processTestResult( failure4, context );
      CPPUT_ASSERT_EQUAL( 4, result.failureCount() );
      CPPUT_ASSERT_FALSE( result.failureAt(3).isAssertionFailure() );
   }
   catch ( CppUT::AbortingAssertionException &e )
   {
      std::cout << "testResult() failed: "  <<  e.what()  <<  std::endl;
      return false;
   }

   return true;
}
@


1.5
log
@* moved the assertion implementation to using TestInfo.
* added assertion (tested/failed) counter to TestInfo.
@
text
@d2 1
a2 1
#include <cpput/assert.h>
@


1.4
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d33 1
d89 1
a89 1
   catch ( CppUT::AssertException &e )
@


1.3
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d3 1
a3 1
#include <cpput/assertexception.h>
@


1.2
log
@* Replaced TestListener::testFailed() with TestListener::processTestResul(). TestResult can be either success or failure and is mutable: the callback can add structured data to the result.
* TestContext::protectTestRun() assumes test succeeded if no failing TestResult were dispatched during the test.
@
text
@d39 4
a42 1
      CppUT::TestResult failure1( dummyTest1, "message1", false );
d54 2
a55 1
      message2.setFailureType( "assertion" );
d57 1
a57 2
                                  CppUT::Location( "somefile.cpp", 123 ),
                                  false );
d71 2
a72 1
      message3.setFailureType( "assertion" );
d74 1
a74 2
                                  CppUT::Location( "somefile3.cpp", 23 ),
                                  false );
d80 4
a83 1
      CppUT::TestResult failure4( dummyTest4, "message4", false );
@


1.1
log
@* renamed TestFailure to TestResult (can now be a success or a failure)
* renamed testfailure.h to testresult.h
* renamed testresult.cpp to testtestrunresult.cpp
@
text
@d41 1
a41 1
      result.testFailed( failure1, context );
d55 1
a55 1
      result.testFailed( failure2, context );
d72 1
a72 1
      result.testFailed( failure3, context );
d78 1
a78 1
      result.testFailed( failure4, context );
@

