head	1.10;
access;
symbols
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.9
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.9
	TG_AFTER_REMOVING_TESTCONTEXT:1.9
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.8
	TG_BEFORE_REMOVING_TESTCONTEXT:1.8
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.10
date	2005.02.28.20.43.02;	author blep;	state dead;
branches;
next	1.9;

1.9
date	2004.11.20.12.17.52;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.04.19.41.18;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.04.19.33.28;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.08.04.08.01.15;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.04.07.55.43;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.04.06.43.57;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.03.22.36.15;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.29.08.38.51;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.38;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.38;	author blep;	state Exp;
branches;
next	;


desc
@@


1.10
log
@* added testexceptionguard.cpp which replaces testtestcontext.cpp
@
text
@#include <cpput/assert.h>
#include <cpput/resultexception.h>
#include <cpput/test.h>
#include <cpput/testresult.h>
#include <cpput/testsuite.h>
#include <cpput/testcontext.h>
#include <iostream>
#include "mocktestlistener.h"



namespace {
   class DummyTest : public CppUT::AbstractTest
   {
   public:

      void run( CppUT::TestContext &context )
      {
      }

      void accept( CppUT::TestVisitor &visitor )
      {
      }

      int totalTestCount() const
      {
         return 1;
      }
   };

   class DummyTestSuite : public CppUT::AbstractTestSuite
   {
   public:
      DummyTestSuite()
         : called_( false )
      {
      }

      int testCount() const 
      {
         return 1;
      }

      CppUT::TestPtr testAt( int index ) const
      {
         throw std::exception( "DummyTestSuite::testAt(): unsupported call" );
      }

      void runTests( CppUT::TestContext *context )
      {
         called_ = true;
      }

      bool called_;
   };

   
   class CustomException1
   {
   public:
   };
   
   class CustomException2
   {
   public:
   };

   class CustomException1TestExceptionGuard : public CppUT::TestExceptionGuard
   {
   public: // overridden from TestExceptionGuard
      bool protect( Context &context )
      {
         try
         {
            return callNextInChain( context );
         }
         catch ( const CustomException1 & )
         {
            CppUT::FaultException fault( "CustomException1" );
            context.exceptionHandler_.handleResultException( context.protectedTest_, fault );
         }

         return false;
      }
   };

   class CustomException2TestExceptionGuard : public CppUT::TestExceptionGuard
   {
   public: // overridden from TestExceptionGuard
      bool protect( Context &context )
      {
         try
         {
            return callNextInChain( context );
         }
         catch ( const CustomException2 & )
         {
            CppUT::FaultException fault( "CustomException2" );
            context.exceptionHandler_.handleResultException( context.protectedTest_, fault );
         }

         return false;
      }
   };

   class CaptureMessageTestListener : public CppUT::TestListener
   {
   public: // overridden from CppUT::TestListener
      void processTestResult( CppUT::TestResult &failure,
                              CppUT::TestContext &context )
      {
         message_ = failure.message().toString();
      }

      std::string message_;
   };
}




static void callbackCalled( bool *flag )
{
   *flag = true;
}


static void callbackThrowAssertException()
{
   throw CppUT::AbortingAssertionException( "test assertion" );
}


static void callbackThrowStdException()
{
   throw std::exception( "test exception" );
}


static void callbackThrowCustomException1()
{
   throw CustomException1();
}


static void callbackThrowCustomException2()
{
   throw CustomException2();
}


static void callbackThrowUnknownException()
{
   throw "test exception";
}


static void callbackTestRunPass( CppUT::TestContext * )
{
}

static bool callbackTestRunCalledFlag = false;

static void callbackTestRunCalled( CppUT::TestContext * )
{
   callbackTestRunCalledFlag = true;
}


static void callbackTestRunThrowAssertException( CppUT::TestContext * )
{
   throw CppUT::AbortingAssertionException( "test assertion" );
}


static void callbackTestRunThrowStdException( CppUT::TestContext * )
{
   throw std::exception( "test exception" );
}


static void callbackTestRunThrowUnknownException( CppUT::TestContext * )
{
   throw "test exception";
}



static void testTestContextProtect()
{
   CppUT::TestContext context;
   DummyTest dummyTest;
   bool callback1Called = false;
   context.protect( dummyTest, 
                    CppUT::bind1( CppUT::makeCFn1( &callbackCalled ),
                                  &callback1Called ) );
   CPPUT_ASSERT( callback1Called, 
                 "TestContext::protect() did not call callback." );

   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowAssertException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowStdException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowUnknownException ) ) );
}

static void testTestContextProtectTestRun()
{
   CppUT::TestContext context;
   DummyTest dummyTest;
   callbackTestRunCalledFlag = false;
   context.protectTestRun( dummyTest, 
                           CppUT::makeCFn1( &callbackTestRunCalled ) );
   CPPUT_ASSERT( callbackTestRunCalledFlag, 
                 "TestContext::protectTestRun() did not call callback." );

   CPPUT_ASSERT_NO_THROW( context.protectTestRun( dummyTest, 
      CppUT::makeCFn1( &callbackTestRunThrowAssertException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protectTestRun( dummyTest, 
      CppUT::makeCFn1( &callbackTestRunThrowStdException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protectTestRun( dummyTest, 
      CppUT::makeCFn1( &callbackTestRunThrowUnknownException ) ) );
}

/*
static void testTestContextProtectTestSuiteRun()
{
   CppUT::TestContext context;
   DummyTestSuite suite;
   callbackTestRunCalledFlag = false;
   context.protectTestSuiteRun( suite, 
                                CppUT::makeCFn1( &callbackTestRunCalled ) );
   CPPUT_ASSERT( callbackTestRunCalledFlag, 
                 "TestContext::protectTestSuiteRun() did not call callback." );

   CPPUT_ASSERT_NO_THROW( context.protectTestSuiteRun( suite, 
      CppUT::makeCFn1( &callbackTestRunThrowAssertException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protectTestSuiteRun( suite, 
      CppUT::makeCFn1( &callbackTestRunThrowStdException ) ) );

   CPPUT_ASSERT_NO_THROW( context.protectTestSuiteRun( suite, 
      CppUT::makeCFn1( &callbackTestRunThrowUnknownException ) ) );
}
*/

static void testTestContextEventDispatch()
{
   CppUT::TestContext context;
   DummyTest dummyTest1;
   MockTestListener listener1;
   context.add( listener1 );
   context.protectTestRun( dummyTest1, CppUT::makeCFn1( &callbackTestRunPass ) );
   CPPUT_ASSERT_EQUAL( 1, listener1.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener1.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener1.enterSuiteCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener1.exitSuiteCount_ );

   MockTestListener listener2;
   context.add( listener2 );
   context.protectTestRun( dummyTest1, 
      CppUT::makeCFn1( &callbackTestRunThrowAssertException ) );
   CPPUT_ASSERT_EQUAL( 2, listener1.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener1.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener1.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener2.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener2.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener2.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener2.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener2.testSucceededCount_ );

   MockTestListener listener3;
   context.add( listener3 );
   context.protectTestRun( dummyTest1, 
      CppUT::makeCFn1( &callbackTestRunThrowStdException ) );
   CPPUT_ASSERT_EQUAL( 3, listener1.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener1.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener1.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener1.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener2.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener2.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener2.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener2.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener2.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener3.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener3.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener3.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener3.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener3.testSucceededCount_ );

   MockTestListener listener4;
   context.add( listener4 );
   context.protectTestRun( dummyTest1, 
      CppUT::makeCFn1( &callbackTestRunThrowUnknownException ) );
   CPPUT_ASSERT_EQUAL( 4, listener1.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 4, listener1.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener1.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 4, listener1.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener2.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener2.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener2.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 3, listener2.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener2.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener3.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener3.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener3.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 2, listener3.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener3.testSucceededCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.enterTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.exitTestCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.testFailedCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.testResultCount_ );
   CPPUT_ASSERT_EQUAL( 0, listener4.testSucceededCount_ );
/*
   DummyTestSuite suite;
   context.protectTestSuiteRun( suite, 
      CppUT::makeCFn1( &callbackTestRunPass ) );
   CPPUT_ASSERT_EQUAL( 1, listener1.enterSuiteCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener1.exitSuiteCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.enterSuiteCount_ );
   CPPUT_ASSERT_EQUAL( 1, listener4.exitSuiteCount_ );
*/
}


static void testTestContextGuardChain()
{
   CppUT::TestContext context;
   CaptureMessageTestListener listener;
   context.add( listener );
   context.appendGuard( CppUT::TestExceptionGuardPtr( 
                           new CustomException1TestExceptionGuard() ) );
   context.appendGuard( CppUT::TestExceptionGuardPtr( 
                           new CustomException2TestExceptionGuard() ) );
   DummyTest dummyTest;

   listener.message_ = "";
   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowCustomException1 ) ) );
   CPPUT_ASSERT( listener.message_.find( "CustomException1" ) != std::string::npos,
                 "CustomException1 guard did not capture the exception" );

   listener.message_ = "";
   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowCustomException2 ) ) );
   CPPUT_ASSERT( listener.message_.find( "CustomException2" ) != std::string::npos,
                 "CustomException1 guard did not capture the exception" );

   context.removeGuard();
   listener.message_ = "";
   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowCustomException2 ) ) );
   CPPUT_ASSERT_FALSE( listener.message_.find( "CustomException2" ) != std::string::npos,
                 "CustomException2 should not have been captured by the guard" );

   context.removeGuard();
   listener.message_ = "";
   CPPUT_ASSERT_NO_THROW( context.protect( dummyTest, 
      CppUT::makeFn0( &callbackThrowCustomException1 ) ) );
   CPPUT_ASSERT_FALSE( listener.message_.find( "CustomException1" ) != std::string::npos,
                 "CustomException1 should not have been captured by the guard" );
}


bool testTestContext()
{
   try
   {
      CppUT::TestInfo::startNewTest();
      testTestContextProtect();
      testTestContextProtectTestRun();
//      testTestContextProtectTestSuiteRun();
      testTestContextEventDispatch();
      testTestContextGuardChain();
   }
   catch ( CppUT::AbortingAssertionException &e )
   {
      std::cout << "testTestContext() failed: "  <<  e.what()  <<  std::endl;
      return false;
   }

   return true;
}
@


1.9
log
@* moved the assertion implementation to using TestInfo.
* added assertion (tested/failed) counter to TestInfo.
@
text
@@


1.8
log
@* renamed TestFailureGuard TestExceptionGuard.
@
text
@d130 1
a130 1
   throw CppUT::AssertException( "test assertion" );
d172 1
a172 1
   throw CppUT::AssertException( "test assertion" );
d381 1
d388 1
a388 1
   catch ( CppUT::AssertException &e )
@


1.7
log
@* renamed TestFailureHandler to TestExceptionHandler.
@
text
@d68 1
a68 1
   class CustomException1TestFailureGuard : public CppUT::TestFailureGuard
d70 1
a70 1
   public: // overridden from TestFailureGuard
d87 1
a87 1
   class CustomException2TestFailureGuard : public CppUT::TestFailureGuard
d89 1
a89 1
   public: // overridden from TestFailureGuard
d343 4
a346 4
   context.appendGuard( CppUT::TestFailureGuardPtr( 
                           new CustomException1TestFailureGuard() ) );
   context.appendGuard( CppUT::TestFailureGuardPtr( 
                           new CustomException2TestFailureGuard() ) );
@


1.6
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d80 1
a80 1
            context.failureHandler_.handleResultException( context.protectedTest_, fault );
d99 1
a99 1
            context.failureHandler_.handleResultException( context.protectedTest_, fault );
@


1.5
log
@* TestResult: succeeded status moved to property "cpput.status' of the message
* Reworked exception hierarchy to allow for a 'success' exception.
* Reworked TestFailureGuard & TestFailureHandler to handle a generic ResultException.
@
text
@d2 1
a2 1
#include <cpput/assertexception.h>
@


1.4
log
@* Replaced TestListener::testFailed() with TestListener::processTestResul(). TestResult can be either success or failure and is mutable: the callback can add structured data to the result.
* TestContext::protectTestRun() assumes test succeeded if no failing TestResult were dispatched during the test.
@
text
@d80 1
a80 1
            context.failureHandler_.handleFault( context.protectedTest_, fault );
d99 1
a99 1
            context.failureHandler_.handleFault( context.protectedTest_, fault );
@


1.3
log
@* renamed TestFailure to TestResult (can now be a success or a failure)
* renamed testfailure.h to testresult.h
* renamed testresult.cpp to testtestrunresult.cpp
@
text
@d4 1
a4 1
#include <cpput/testfailure.h>
d109 2
a110 2
      void testFailed( const CppUT::TestResult &failure,
                       CppUT::TestContext &context )
d262 2
d274 2
d279 2
d289 2
d294 2
d299 2
d309 2
d314 2
d319 2
d324 2
@


1.2
log
@* added tests for appending and removing TestFailureGuard
@
text
@d109 1
a109 1
      void testFailed( const CppUT::TestFailure &failure,
@


1.1
log
@Initial revision
@
text
@d4 1
d57 60
d121 1
d140 12
d318 39
d365 1
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
