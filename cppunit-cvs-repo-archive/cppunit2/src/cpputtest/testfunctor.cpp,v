head	1.12;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.12
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.7
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.7
	TG_AFTER_REMOVING_TESTCONTEXT:1.6
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.4
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@// @;


1.12
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.10.21.34.29;	author blep;	state Exp;
branches;
next	1.10;

1.10
date	2005.02.27.16.50.36;	author blep;	state Exp;
branches;
next	1.9;

1.9
date	2005.02.27.16.30.34;	author blep;	state Exp;
branches;
next	1.8;

1.8
date	2005.02.27.14.38.28;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.02.26.11.45.50;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2004.11.20.15.07.00;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2004.11.20.12.17.52;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.17.08.59.34;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.04.08.01.15;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.22;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.38;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.38;	author blep;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@#include <cpput/assertcommon.h>
#include <cpptl/functor.h>
#include <stdio.h>


namespace {

   bool callbackCalled;
   bool badValue;
   std::string expected;

   static void callback0()
   {
      callbackCalled = true;
   }

   static void callback1( bool value )
   {
      callbackCalled = value;
   }

   static void callback12( const std::string &str, int x )
   {
      callbackCalled = true;
   }

   static void callback1string( const std::string &str )
   {
      callbackCalled = true;
      badValue = expected == str;
   }

   static double returnCallback1( int x )
   {
      return x / 2.0;
   }

   struct TestFunctor
   {
      TestFunctor() // avoid bogus suncc warning
      {
      }

      void operator()() const
      {
         callbackCalled = true;
      }

      void operator()( bool value ) const
      {
         callbackCalled = value;
      }
   };

   struct HelperObject
   {
      bool flag_;
      int value_;

      HelperObject()
         : flag_( false )
         , value_( 0 )
      {
      }

      HelperObject( const HelperObject &other )
         : flag_( other.flag_ )
         , value_( other.value_ + 1 )
      {
      }

      HelperObject &operator =( const HelperObject &other )
      {
         flag_ = other.flag_;
         value_ = other.value_ + 1;
         return *this;
      }

      void setFlagOn()
      {
         flag_ = true;
      }

      void setFlag( bool value )
      {
         flag_ = value;
      }

      double compute1( int x )
      {
         return (x + value_) / 2.0;
      }
   };


}

static void testFunctor()
{
   CppTL::Functor0 fn = CppTL::cfn0( &callback0 );
   callbackCalled = false;
   fn();
   CPPUT_ASSERT( callbackCalled, "Functor() did not call C function." );

   callbackCalled = false;
   TestFunctor testFunctor;
   fn = CppTL::fn0( testFunctor );
   fn();
   CPPUT_ASSERT( callbackCalled, "Functor() did not call functor object." );

   CppTL::SharedPtr<HelperObject> helper( new HelperObject() );
   helper->flag_ = false;
   fn = CppTL::memfn0( helper, &HelperObject::setFlagOn );
   fn();
   CPPUT_ASSERT( helper->flag_, "Functor() did not call object method (shared_ptr)." );

   helper->flag_ = false;
   fn = CppTL::memfn0( helper.get(), &HelperObject::setFlagOn );
   fn();
   CPPUT_ASSERT( helper->flag_, "Functor() did not call object method (ptr)." );
}


static void testFunctor1()
{
   CppTL::Functor1<bool> fn = CppTL::cfn1( &callback1 );
   callbackCalled = false;
   fn( true );
   CPPUT_ASSERT( callbackCalled, "Functor1(true) did not call C function." );
   fn( false );
   CPPUT_ASSERT_FALSE( callbackCalled, "Functor1(false) did not call C function." );

   CppTL::SharedPtr<HelperObject> helper( new HelperObject() );
   helper->flag_ = false;
   fn = CppTL::memfn1( helper, &HelperObject::setFlag );
   fn( true );
   CPPUT_ASSERT( helper->flag_, "Functor1(true) did not call object method." );
   fn( false );
   CPPUT_ASSERT_FALSE( helper->flag_, "Functor1(false) did not call object method." );
}


static void testFunctor1R()
{
   CppTL::Functor1R<double,int> fn = CppTL::cfn1r( &returnCallback1 );
   callbackCalled = false;
   CPPUT_ASSERT_EQUAL( 1.0, fn( 2 ) );

   CppTL::SharedPtr<HelperObject> helper( new HelperObject() );
   helper->value_ = 0;
   fn = CppTL::memfn1r( helper, &HelperObject::compute1 );
   CPPUT_ASSERT_EQUAL( 1.0, fn( 2 ) );
   helper->value_ = 10;
   CPPUT_ASSERT_EQUAL( 6.0, fn( 2 ) );
}

namespace {

   int extractHelperObjectValue( const HelperObject &object )
   {
      return object.value_;
   }

   void doubleHelperObjectValue( HelperObject &object )
   {
      object.value_ *= 2;
   }

} // anonymous namespace


static void testConstReferenceParameterSupport()
{
   CppTL::Functor1R<int,const HelperObject &> fncref1( CppTL::cfn1r( &extractHelperObjectValue ) );
   HelperObject object;
   object.value_ = 12345678;
   CPPUT_ASSERT_EQUAL( 12345678, fncref1( object ) );
}


static void testReferenceParameterSupport()
{
   CppTL::Functor1<HelperObject &> fnref1( CppTL::cfn1( &doubleHelperObjectValue ) );
   HelperObject object;
   object.value_ = 1111;
   fnref1( object );
   CPPUT_ASSERT_EQUAL( 1111*2, object.value_ );
}


namespace {
   int multiply( int x, int y )
   {
      return x * y;
   }
}

static void testBindValue()
{
   CppTL::Functor2R<int,int,int> fn2 = CppTL::cfn2r( &multiply );
   CppTL::Functor1R<int,int> fn1 = CppTL::fn1r( CppTL::bind2r( fn2, 3 ) );
   CPPUT_ASSERT_EQUAL( 2*3, fn1(2) );
   CPPUT_ASSERT_EQUAL( 5*3, fn1(5) );
}

static void testBindConstRef()
{
   CppTL::Functor1R<int,const HelperObject &> fn1( CppTL::cfn1r( &extractHelperObjectValue ) );
   HelperObject object;
   object.value_ = 12345678;
   CppTL::Functor0R<int> fn0 = CppTL::fn0r( CppTL::bind1r( fn1, CppTL::cref(object) ) );
   CPPUT_ASSERT_EQUAL( 12345678, fn0() );
}


static void testBindRef()
{
   CppTL::Functor1<HelperObject &> fnref1( CppTL::cfn1( &doubleHelperObjectValue ) );
   HelperObject object;
   object.value_ = 1111;
   CppTL::Functor0 fn0 = CppTL::fn0( CppTL::bind1( fnref1, CppTL::ref( object ) ) );
   fn0();
   CPPUT_ASSERT_EQUAL( 1111*2, object.value_ );
}


bool testFunctors()
{
   printf( "Running bootstrap test: testFunctors()...\n" );
   try
   {
      CppUT::TestInfo::threadInstance().startNewTest();
      testFunctor();
      testFunctor1();
      testFunctor1R();

      testConstReferenceParameterSupport();
	   testReferenceParameterSupport();
      testBindValue();
      testBindConstRef();
      testBindRef();
   }
   catch ( const CppUT::AbortingAssertionException &e )
   {
      printf( "testFunctors() failed: %s\n", e.what() );
      return false;
   }
   catch ( ... )
   {
      printf( "testFunctors() failed (uncaught exception)." );
      return false;
   }

   return true;
}
@


1.11
log
@* Replaced function in namespace TestInfo by exposing the TestInfoData class and renaming it TestInfo. TestInfo in now an exposed per thread singleton.
* startNewTest() is now called from TestCase::runTest() instead of being the test runner responsability. There still a few call to this method in cpput bootstrap test (which use assertion without run a test case).
@
text
@d1 1
a1 1
#include <cpput/assert.h>
@


1.10
log
@* catch any exceptions that the test may leak.
@
text
@d232 1
a232 1
      CppUT::TestInfo::startNewTest();
@


1.9
log
@* removed dependency on <iostream>.
* added progress traces while running bootstrap tests.
@
text
@d243 1
a243 1
   catch ( CppUT::AbortingAssertionException &e )
d248 5
@


1.8
log
@* changed cppunit 2 to use the new functors (cpptl/functor.h). bind_cfn & bind_memfn simplified some of the test code.
@
text
@d3 1
a3 1
#include <iostream>
d229 1
d245 1
a245 1
      std::cout << "testFunctors() failed: "  <<  e.what()  <<  std::endl;
@


1.7
log
@* added default constructor to work around bogus warning with suncc
@
text
@d2 1
a2 1
#include <cpput/functor.h>
d33 5
d58 20
d88 5
d100 1
a100 1
   CppUT::Functor0 fn = CppUT::makeFn0( &callback0 );
d107 1
a107 1
   fn = CppUT::makeFn0( testFunctor );
d113 1
a113 1
   fn = CppUT::makeMemFn0( helper, &HelperObject::setFlagOn );
d118 1
a118 1
   fn = CppUT::makeMemFn0( helper.get(), &HelperObject::setFlagOn );
d126 1
a126 1
   CppUT::Functor1<bool> fn = CppUT::makeCFn1( &callback1 );
d135 1
a135 1
   fn = CppUT::makeMemFn1( helper, &HelperObject::setFlag );
d143 14
a157 1
   static std::string callWithRefParam0;
d159 1
a159 1
   void callWithConstRef( const std::string &str )
d161 1
a161 1
      callWithRefParam0 = str;
d164 1
a164 1
   void callWithRef( std::string &str )
d166 1
a166 2
      callWithRefParam0 = str;
      str += "called";
d172 1
a172 1
static void testConstReferenceSupport()
d174 4
a177 5
   CppUT::Functor1<const std::string &> fncref1( CppUT::makeCFn1( &callWithConstRef ) );
   callWithRefParam0 = "";
   const std::string &s = "test1";
   fncref1( s );
   CPPUT_ASSERT_EQUAL( "test1", callWithRefParam0 );
d181 1
a181 1
static void testReferenceSupport()
d183 5
a187 6
   CppUT::Functor1<std::string &> fnref1( CppUT::makeCFn1( &callWithRef ) );
   callWithRefParam0 = "";
   std::string s = "test1";
   fnref1( s );
   CPPUT_ASSERT_EQUAL( "test1", callWithRefParam0 );
   CPPUT_ASSERT_EQUAL( "test1called", s );
d191 7
d200 4
a203 15
   CppUT::Functor1<const std::string &> fn1 = CppUT::makeCFn1( &callback1string );
   CppUT::Functor0 fn0 = CppUT::bind1( fn1, "str" );
   callbackCalled = false;
   badValue = false;
   expected = "str";
   fn0();
   CPPUT_ASSERT( callbackCalled, "bind1() did not call C function." );
   CPPUT_ASSERT( badValue, "bind1() did not pass the binded value." );

   callbackCalled = false;
   CppUT::Functor0 fbind12 = CppUT::bind( CppUT::makeCFn2( &callback12 ), 
                                          "str", 
                                          1234 );
   fbind12();
   CPPUT_ASSERT( callbackCalled, "bind(f,x,y) did not call C function." );
a205 1

d208 5
a212 6
   CppUT::Functor1<const std::string &> fncref1 = CppUT::makeCFn1( &callWithConstRef );
   std::string s = "test2";
   CppUT::Functor0 fn0 = CppUT::bind1( fncref1, CppUT::cref(s) );
   callWithRefParam0 = "";
   fn0();
   CPPUT_ASSERT_EQUAL( "test2", callWithRefParam0 );
d218 4
a221 4
   CppUT::Functor1<std::string &> fnref1 = CppUT::makeCFn1( &callWithRef );
   std::string s = "test3";
   CppUT::Functor0 fn0 = CppUT::bind1( fnref1, CppUT::ref(s) );
   callWithRefParam0 = "";
d223 1
a223 2
   CPPUT_ASSERT_EQUAL( "test3", callWithRefParam0 );
   CPPUT_ASSERT_EQUAL( "test3called", s );
a226 1

d234 4
a237 2
	   testConstReferenceSupport();
	   testReferenceSupport();
@


1.6
log
@* TestContext: no longer rely on exception to retrieve failure
* TestContext: removed TestListener support since everything is handled by TestInfo
* TestFailureGuard: modified to report fault using TestInfo instead of exception
* TestListener, TestResult, TestRunResult: removed, replaced by TestInfo
* TextTestDriver: fixed bug in result merging (not prefixed with "/result"). Still need work to handle assertion and fault reporting.
@
text
@d35 4
d210 1
a210 1
      std::cout << "testTestContext() failed: "  <<  e.what()  <<  std::endl;
@


1.5
log
@* moved the assertion implementation to using TestInfo.
* added assertion (tested/failed) counter to TestInfo.
@
text
@a1 1
#include <cpput/resultexception.h>
@


1.4
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@d196 1
d199 2
a200 2
	  testConstReferenceSupport();
	  testReferenceSupport();
d205 1
a205 1
   catch ( CppUT::AssertException &e )
@


1.3
log
@* renamed cpput/assertexception.h to cpput/resultexception.h
@
text
@d78 1
a78 1
   CppUT::SmartPtr<HelperObject> helper( new HelperObject() );
d100 1
a100 1
   CppUT::SmartPtr<HelperObject> helper( new HelperObject() );
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d2 1
a2 1
#include <cpput/assertexception.h>
@


1.1
log
@Initial revision
@
text
@d78 1
a78 1
   boost::shared_ptr<HelperObject> helper( new HelperObject() );
d100 1
a100 1
   boost::shared_ptr<HelperObject> helper( new HelperObject() );
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
