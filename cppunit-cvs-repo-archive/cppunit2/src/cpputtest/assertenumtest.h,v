head	1.2;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.2
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.2
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.2
	TG_AFTER_REMOVING_TESTCONTEXT:1.2
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.2
	TG_BEFORE_REMOVING_TESTCONTEXT:1.2
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.10.22.06.20.07;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.36;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.36;	author blep;	state Exp;
branches;
next	;


desc
@@


1.2
log
@* Replaced the EnumerationSugar strangely curring template  with a macro (compiler was too stressed)
* Fixed Internal compiler error on Keys
* Added sugar() enumeration for custom enumerator
* Test cases for all enumerator
@
text
@#ifndef CPPUT_ASSERTENUMTEST_H_INCLUDED
# define CPPUT_ASSERTENUMTEST_H_INCLUDED

# include <cpput/assertenum.h>
# include <cpput/testfixture.h>
# include <cpptl/enumerator.h>
# include <deque>
# include <map>
# include <set>
# include <vector>

class AssertEnumTest : public CppUT::TestFixture
{
   CPPUT_TESTSUITE_BEGIN( AssertEnumTest );
   CPPUT_TEST( testAssertSequenceEqual );
   CPPUT_TEST( testAssertSetEqual );
   CPPUT_TESTSUITE_END();

public:
   void setUp();
   void tearDown();

   void testAssertSequenceEqual();
   void testAssertSetEqual();

private:
   typedef CppTL::AnyEnumerator<int> IntEnum;
   typedef CppTL::AnyEnumerator<char> CharEnum;

   std::vector<int> vEmpty_;
   std::vector<int> v122_;
   std::vector<int> v123_;
   std::vector<int> v321_;
   std::vector<int> v1234_;
   std::vector<int> v4321_;
};


#endif  // CPPUT_ASSERTENUMTEST_H_INCLUDED

@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
# include <cpput/enumerator.h>
d27 2
a28 2
   typedef CppUT::Enumerator<int> IntEnum;
   typedef CppUT::Enumerator<char> CharEnum;
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
