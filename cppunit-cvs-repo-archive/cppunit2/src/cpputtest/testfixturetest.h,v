head	1.8;
access;
symbols
	CPPUNIT2_TG_BEFORE_NEW_ASSERTION:1.8
	CPPUNIT2_TG_AFTER_CONSTSTRING:1.4
	CPPUNIT2_TG_BEFORE_CONSTSTRING:1.4
	TG_AFTER_REMOVING_TESTCONTEXT:1.4
	TG_BEFORE_MOVING_ASSERT_TO_TESTINFO:1.4
	TG_BEFORE_REMOVING_TESTCONTEXT:1.4
	arelease:1.1.1.1
	avendor:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2005.11.13.10.12.01;	author blep;	state Exp;
branches;
next	1.7;

1.7
date	2005.11.08.23.25.31;	author blep;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.06.22.24.54;	author blep;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.27.16.12.08;	author blep;	state Exp;
branches;
next	1.4;

1.4
date	2004.11.17.08.59.34;	author blep;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.03.22.20.03;	author blep;	state Exp;
branches;
next	1.2;

1.2
date	2004.01.27.23.37.22;	author blep;	state Exp;
branches;
next	1.1;

1.1
date	2004.01.27.20.34.36;	author blep;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.01.27.20.34.36;	author blep;	state Exp;
branches;
next	;


desc
@@


1.8
log
@- renamed include/cpput/assert.h to include/cpput/assertcommon.h. This avoid clash with include <assert.h> in doxygen documentation
- most Impl namespaces are now hidden from documentation using \cond and \endcond.
@
text
@#ifndef CPPUTTEST_TESTFIXTURETEST_H_INCLUDED
#define CPPUTTEST_TESTFIXTURETEST_H_INCLUDED

# include <cpput/assertcommon.h>
# include <cpput/testfixture.h>


class TestFixtureTest
{
public:
   static CppUT::TestSuitePtr suite();

   void testEmptySuite();
   void testTwoTestsSuite();
   void testExtendTestSuite();
   void testExtendAbstractTestSuite();
   void testDefaultIsNoSharedFixture();
   void testFixtureWithSpecifics();

private:
   static void addTest( const CppTL::SharedPtr<TestFixtureTest> &fixture,
                        void (TestFixtureTest::*testMethod)(), 
                        const char *testName,
                        const CppUT::TestSuitePtr &suite );

};


#endif // CPPUTTEST_TESTFIXTURETEST_H_INCLUDED
@


1.7
log
@- fixed static registration macro for Registry
- static registration macros must no longer be followed by a semi-colon
  (therefore we get compiler error if registry.h was not included)
- allow registration macros to work with class implenting suite() or suite( const std::string &).
@
text
@d4 1
a4 1
# include <cpput/assert.h>
@


1.6
log
@Added possibility to add test to a fixture and set its description and time-out (and other specifics).
@
text
@a17 1
   void testSharedFixture();
@


1.5
log
@* ported the TestFixture tests back to the new framework architecture.
@
text
@d19 1
@


1.4
log
@* moved CppUT::SmartPtr to CppTL::SharedPtr
* moved CppUT::AtomicCounter to CppTL::AtomicCounter and inlined implementation
@
text
@a4 3
# include <cpput/testcase.h>
# include <cpput/testsuite.h>
# include <cpput/testcontext.h>
a5 1
# include <cpput/testrunresult.h>
@


1.3
log
@* renamed Result to TestRunResult (and cpput/result.h to cpput/testrunresult.h)
@
text
@d25 1
a25 1
   static void addTest( const CppUT::SmartPtr<TestFixtureTest> &fixture,
@


1.2
log
@* SmartPtr now subclass boost::shared_ptr to make templated function
  overloading easier.
* Added our own smart pointer implementation
* Added AtomicCounter as implementation detail.
  Can use boost::detail::atomic_counter.
@
text
@d9 1
a9 1
# include <cpput/result.h>
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
   static void addTest( const boost::shared_ptr<TestFixtureTest> &fixture,
@


1.1.1.1
log
@* initial import of cppunit 2
@
text
@@
